/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Open Attack Surface Management
 * Open-source platform for cybersecurity Attack Surface Management (ASM)
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { orvalClient } from '../axios-client';
export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const JobStatus = {
  pending: 'pending',
  in_progress: 'in_progress',
  completed: 'completed',
  failed: 'failed',
  cancelled: 'cancelled',
} as const;

export type CronSchedule = (typeof CronSchedule)[keyof typeof CronSchedule];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CronSchedule = {
  '0_0_*_*_0': '0 0 * * 0',
  '0_0_*/14_*_*': '0 0 */14 * *',
  '0_0_1_*_*': '0 0 1 * *',
} as const;

export type Target = {
  id: string;
  createdAt: string;
  updatedAt: string;
  /** The target domain (with optional URL path, will be parsed to extract domain) */
  value: string;
  lastDiscoveredAt: string;
  totalAssets: number;
  status: JobStatus;
  scanSchedule: CronSchedule;
};

export type AppResponseSerialization = { [key: string]: unknown };

export type CreateTargetDto = {
  /** The target domain (with optional URL path, will be parsed to extract domain) */
  value: string;
  /** The id of the workspace */
  workspaceId: string;
};

export type GetManyTargetResponseDtoScanSchedule =
  (typeof GetManyTargetResponseDtoScanSchedule)[keyof typeof GetManyTargetResponseDtoScanSchedule];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetManyTargetResponseDtoScanSchedule = {
  '0_0_*_*_0': '0 0 * * 0',
  '0_0_*/14_*_*': '0 0 */14 * *',
  '0_0_1_*_*': '0 0 1 * *',
} as const;

export type GetManyTargetResponseDtoStatus =
  (typeof GetManyTargetResponseDtoStatus)[keyof typeof GetManyTargetResponseDtoStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetManyTargetResponseDtoStatus = {
  RUNNING: 'RUNNING',
  DONE: 'DONE',
} as const;

export type GetManyTargetResponseDto = {
  id: string;
  value: string;
  reScanCount: number;
  scanSchedule: GetManyTargetResponseDtoScanSchedule;
  status: GetManyTargetResponseDtoStatus;
  totalAssets: number;
  duration: number;
  lastDiscoveredAt: string;
};

export type GetManyGetManyTargetResponseDtoDto = {
  data: GetManyTargetResponseDto[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type DefaultMessageResponseDto = {
  message: string;
};

export type UpdateTargetDtoScanSchedule =
  (typeof UpdateTargetDtoScanSchedule)[keyof typeof UpdateTargetDtoScanSchedule];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateTargetDtoScanSchedule = {
  '0_0_*_*_0': '0 0 * * 0',
  '0_0_*/14_*_*': '0 0 */14 * *',
  '0_0_1_*_*': '0 0 1 * *',
} as const;

export type UpdateTargetDto = {
  scanSchedule: UpdateTargetDtoScanSchedule;
};

export type WorkspaceArchivedAt = { [key: string]: unknown };

export type Workspace = {
  id: string;
  createdAt: string;
  updatedAt: string;
  /** The name of the workspace */
  name: string;
  /** The description of the workspace */
  description: string;
  archivedAt?: WorkspaceArchivedAt;
};

export type CreateWorkspaceDtoArchivedAt = { [key: string]: unknown };

export type CreateWorkspaceDto = {
  /** The name of the workspace */
  name: string;
  /** The description of the workspace */
  description: string;
  archivedAt?: CreateWorkspaceDtoArchivedAt;
};

export type GetApiKeyResponseDto = {
  apiKey: string;
};

export type GetManyWorkspaceDto = {
  data: Workspace[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type UpdateWorkspaceDtoArchivedAt = { [key: string]: unknown };

export type UpdateWorkspaceDto = {
  /** The name of the workspace */
  name?: string;
  /** The description of the workspace */
  description?: string;
  archivedAt?: UpdateWorkspaceDtoArchivedAt;
};

export type ArchiveWorkspaceDto = {
  /** Whether to archive (true) or unarchive (false) the workspace */
  isArchived: boolean;
};

export type CreateFirstAdminDto = {
  email: string;
  password: string;
};

export type GetMetadataDto = {
  isInit: boolean;
};

export type Job = {
  id: string;
  createdAt: string;
  updatedAt: string;
  category: string;
  status: string;
  pickJobAt: string;
  completedAt: string;
};

export type GetManyJobDto = {
  data: Job[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type JobTimelineItem = {
  name: string;
  target: string;
  targetId: string;
  jobHistoryId: string;
  startTime: string;
  endTime: string;
  status: string;
  description: string;
  toolCategory: string;
  duration: number;
};

export type JobTimelineResponseDto = {
  data: JobTimelineItem[];
};

export type GetNextJobResponseDto = {
  jobId: string;
  value: string;
  category: string;
  /** Command to run */
  command: string;
};

export type DataPayloadResultPayload = { [key: string]: unknown };

export type DataPayloadResult = {
  error: boolean;
  raw: string;
  payload: DataPayloadResultPayload;
};

export type UpdateResultDto = {
  jobId: string;
  data: DataPayloadResult;
};

export type CreateJobsDto = {
  toolIds: string[];
  targetId: string;
};

export type PickTypeClass = {
  id: string;
  name: string;
};

export type AssetTag = {
  id: string;
  createdAt: string;
  updatedAt: string;
  tag: string;
  tool: PickTypeClass;
};

export type TlsInfoFingerprintHash = { [key: string]: unknown };

export type TlsInfo = {
  host: string;
  port: string;
  probe_status: boolean;
  tls_version: string;
  cipher: string;
  not_before: string;
  not_after: string;
  subject_dn: string;
  subject_cn: string;
  subject_an: string[];
  serial: string;
  issuer_dn: string;
  issuer_cn: string;
  issuer_org: string[];
  fingerprint_hash: TlsInfoFingerprintHash;
  wildcard_certificate: boolean;
  tls_connection: string;
  sni: string;
};

export type KnowledgebaseInfo = {
  PageType: string;
  pHash: number;
};

export type HttpResponseDTOHeader = { [key: string]: unknown };

export type HttpResponseDTO = {
  id: string;
  createdAt: string;
  updatedAt: string;
  timestamp: string;
  tls: TlsInfo;
  port: string;
  url: string;
  input: string;
  title: string;
  scheme: string;
  webserver: string;
  body: string;
  content_type: string;
  method: string;
  host: string;
  path: string;
  favicon: string;
  favicon_md5: string;
  favicon_url: string;
  header: HttpResponseDTOHeader;
  raw_header: string;
  request: string;
  time: string;
  a: string[];
  tech: string[];
  words: number;
  lines: number;
  status_code: number;
  content_length: number;
  failed: boolean;
  knowledgebase: KnowledgebaseInfo;
  resolvers: string[];
  chain_status_codes: string[];
  assetId: string;
  jobHistoryId: string;
  techList: string[];
};

export type Port = {
  id: string;
  createdAt: string;
  updatedAt: string;
  ports: string[];
  assetId: string;
  jobHistoryId: string;
};

export type GetAssetsResponseDtoDnsRecords = { [key: string]: unknown };

export type GetAssetsResponseDto = {
  id: string;
  value: string;
  targetId: string;
  isPrimary?: boolean;
  createdAt: string;
  updatedAt: string;
  tags: AssetTag[];
  dnsRecords?: GetAssetsResponseDtoDnsRecords;
  ipAddresses: string[];
  httpResponses?: HttpResponseDTO;
  ports?: Port;
};

export type GetManyGetAssetsResponseDtoDto = {
  data: GetAssetsResponseDto[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type GetIpAssetsDTO = {
  ip: string;
  assetCount: number;
};

export type GetManyGetIpAssetsDTODto = {
  data: GetIpAssetsDTO[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type GetPortAssetsDTO = {
  port: string;
  assetCount: number;
};

export type GetManyGetPortAssetsDTODto = {
  data: GetPortAssetsDTO[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type TechnologyDetailDTOJs = { [key: string]: unknown };

export type TechnologyDetailDTOMeta = { [key: string]: unknown };

export type TechnologyDetailDTOHeaders = { [key: string]: unknown };

export type TechnologyDetailDTOCookies = { [key: string]: unknown };

export type TechnologyDetailDTODns = { [key: string]: unknown };

export type TechnologyDetailDTO = {
  name: string;
  cats?: string[];
  description?: string;
  html?: string[];
  icon?: string;
  implies?: string[];
  js?: TechnologyDetailDTOJs;
  oss?: boolean;
  scriptSrc?: string[];
  website?: string;
  pricing?: string[];
  saas?: boolean;
  dom?: string[];
  meta?: TechnologyDetailDTOMeta;
  headers?: TechnologyDetailDTOHeaders;
  cookies?: TechnologyDetailDTOCookies;
  dns?: TechnologyDetailDTODns;
  url?: string[];
  scripts?: string[];
  xhr?: string[];
  requires?: string[];
  categories?: string[];
  iconUrl?: string;
  categoryNames?: string[];
};

export type GetTechnologyAssetsDTO = {
  technology: TechnologyDetailDTO;
  assetCount: number;
};

export type GetManyGetTechnologyAssetsDTODto = {
  data: GetTechnologyAssetsDTO[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type GetStatusCodeAssetsDTO = {
  statusCode: string;
  assetCount: number;
};

export type GetManyGetStatusCodeAssetsDTODto = {
  data: GetStatusCodeAssetsDTO[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type UpdateAssetDto = {
  /** @nullable */
  tags: string[] | null;
};

export type WorkerAliveDto = {
  token: string;
};

export type WorkerInstance = {
  id: string;
  createdAt: string;
  updatedAt: string;
  lastSeenAt: string;
  token: string;
  currentJobsCount: number;
  type: string;
  scope: string;
};

export type WorkerJoinDto = {
  apiKey: string;
};

export type GetManyWorkerInstanceDto = {
  data: WorkerInstance[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type AssetDnsRecords = { [key: string]: unknown };

export type Asset = {
  id: string;
  createdAt: string;
  updatedAt: string;
  value: string;
  targetId: string;
  isPrimary: boolean;
  dnsRecords: AssetDnsRecords;
  isErrorPage: boolean;
};

export type SearchData = {
  assets: Asset[];
  targets: Target[];
};

export type SearchResponseDto = {
  data: SearchData;
  total: number;
  page: number;
  limit: number;
  pageCount: number;
  hasNextPage: boolean;
};

export type GetSearchHistoryResponseDto = {
  id: string;
  query: string;
  workspaceId: string;
  createdAt: string;
  updatedAt: string;
};

export type GetManyGetSearchHistoryResponseDtoDto = {
  data: GetSearchHistoryResponseDto[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type DeleteResponseDto = {
  /** Tr·∫°ng th√°i x√≥a th√†nh c√¥ng */
  success: boolean;
};

export type ToolCategory = (typeof ToolCategory)[keyof typeof ToolCategory];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolCategory = {
  subdomains: 'subdomains',
  http_probe: 'http_probe',
  ports_scanner: 'ports_scanner',
  vulnerabilities: 'vulnerabilities',
  classifier: 'classifier',
} as const;

export type Tool = {
  id: string;
  createdAt: string;
  updatedAt: string;
  name: string;
  description: string;
  category: ToolCategory;
  version: string;
  /** @nullable */
  logoUrl?: string | null;
  isInstalled: boolean;
  isOfficialSupport: boolean;
  type: string;
  providerId: string;
};

export type CreateToolDtoCategory =
  (typeof CreateToolDtoCategory)[keyof typeof CreateToolDtoCategory];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateToolDtoCategory = {
  subdomains: 'subdomains',
  http_probe: 'http_probe',
  ports_scanner: 'ports_scanner',
  vulnerabilities: 'vulnerabilities',
  classifier: 'classifier',
} as const;

export type CreateToolDto = {
  name: string;
  description: string;
  category: CreateToolDtoCategory;
  version: string;
  /** @nullable */
  logoUrl?: string | null;
  /** The ID of the provider */
  providerId: string;
};

export type RunToolDto = {
  targetIds?: string[];
  assetIds?: string[];
};

export type WorkspaceTool = {
  id: string;
  createdAt: string;
  updatedAt: string;
};

export type AddToolToWorkspaceDto = {
  /** The ID of the workspace */
  workspaceId: string;
  /** The ID of the tool */
  toolId: string;
};

export type InstallToolDto = {
  /** The ID of the workspace */
  workspaceId: string;
  /** The ID of the tool */
  toolId: string;
};

export type GetManyToolDto = {
  data: Tool[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type ScanDto = {
  /** Target ID */
  targetId: string;
};

export type Vulnerability = {
  id: string;
  createdAt: string;
  updatedAt: string;
  name: string;
  description: string;
  severity: string;
  tags: string[];
  references: string[];
  authors: string[];
  affectedUrl: string;
  ipAddress: string;
  host: string;
  port: string;
  cvssMetric: string;
  cvssScore: number;
  cveId: string;
  cweId: string[];
  extractorName: string;
  extractedResults: string[];
  tool: Tool;
};

export type GetManyVulnerabilityDto = {
  data: Vulnerability[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type VulnerabilityStatisticsDtoSeverity =
  (typeof VulnerabilityStatisticsDtoSeverity)[keyof typeof VulnerabilityStatisticsDtoSeverity];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VulnerabilityStatisticsDtoSeverity = {
  info: 'info',
  low: 'low',
  medium: 'medium',
  high: 'high',
  critical: 'critical',
} as const;

export type VulnerabilityStatisticsDto = {
  severity: VulnerabilityStatisticsDtoSeverity;
  count: number;
};

export type GetVulnerabilitiesStatisticsResponseDto = {
  data: VulnerabilityStatisticsDto[];
};

export type VulnerabilitySeverityDtoSeverity =
  (typeof VulnerabilitySeverityDtoSeverity)[keyof typeof VulnerabilitySeverityDtoSeverity];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VulnerabilitySeverityDtoSeverity = {
  info: 'info',
  low: 'low',
  medium: 'medium',
  high: 'high',
  critical: 'critical',
} as const;

export type VulnerabilitySeverityDto = {
  severity: VulnerabilitySeverityDtoSeverity;
  count: number;
};

export type GetVulnerabilitiesSeverityResponseDto = {
  data: VulnerabilitySeverityDto[];
};

export type String = { [key: string]: unknown };

export type GetManyStringDto = {
  data: string[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type StatisticResponseDto = {
  /** Total number of targets in the workspace */
  totalTargets: number;
  /** Total number of assets in the workspace */
  totalAssets: number;
  /** Total number of vulnerabilities in the workspace */
  totalVulnerabilities: number;
  /** Total number of unique technologies in the workspace */
  totalUniqueTechnologies: number;
};

export type ToolProvider = {
  id: string;
  createdAt: string;
  updatedAt: string;
  /** Provider name */
  name: string;
  /** Unique code/slug for provider */
  code: string;
  /** Provider description */
  description: string;
  /** Logo URL */
  logoUrl: string;
  /** Official website URL */
  websiteUrl: string;
  /** Support email */
  supportEmail: string;
  /** Company name */
  company: string;
  /** License info */
  licenseInfo: string;
  /** API documentation URL */
  apiDocsUrl: string;
  /** Is provider active */
  isActive: boolean;
};

export type GetManyToolProviderDto = {
  data: ToolProvider[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type CreateProviderDto = {
  /** Provider name */
  name: string;
  /** Unique code/slug for provider */
  code: string;
  /** Provider description */
  description: string;
  /** Logo URL */
  logoUrl: string;
  /** Official website URL */
  websiteUrl: string;
  /** Support email */
  supportEmail: string;
  /** Company name */
  company: string;
  /** License info */
  licenseInfo: string;
  /** API documentation URL */
  apiDocsUrl: string;
};

export type UpdateProviderDto = {
  /** Provider name */
  name?: string;
  /** Unique code/slug for provider */
  code?: string;
  /** Provider description */
  description?: string;
  /** Logo URL */
  logoUrl?: string;
  /** Official website URL */
  websiteUrl?: string;
  /** Support email */
  supportEmail?: string;
  /** Company name */
  company?: string;
  /** License info */
  licenseInfo?: string;
  /** API documentation URL */
  apiDocsUrl?: string;
};

export type Template = {
  id: string;
  createdAt: string;
  updatedAt: string;
  fileName: string;
  path: string;
};

export type CreateTemplateDTO = {
  fileName: string;
};

export type UploadTemplateResponseDTO = {
  path: string;
};

export type UploadTemplateDTO = {
  templateId: string;
  fileContent: string;
};

export type TargetsControllerGetTargetsInWorkspaceParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  value?: string;
};

export type WorkspacesControllerGetWorkspacesParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  /**
   * Whether to archive (true) or unarchive (false) the workspace
   */
  isArchived?: boolean;
};

export type JobsRegistryControllerGetManyJobsParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
};

export type AssetsControllerGetAssetsInWorkspaceParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  value?: string;
  targetIds?: string[];
  ipAddresses?: string[];
  ports?: string[];
  techs?: string[];
  statusCodes?: string[];
};

export type AssetsControllerGetIpAssetsParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  value?: string;
  targetIds?: string[];
  ipAddresses?: string[];
  ports?: string[];
  techs?: string[];
  statusCodes?: string[];
};

export type AssetsControllerGetPortAssetsParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  value?: string;
  targetIds?: string[];
  ipAddresses?: string[];
  ports?: string[];
  techs?: string[];
  statusCodes?: string[];
};

export type AssetsControllerGetTechnologyAssetsParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  value?: string;
  targetIds?: string[];
  ipAddresses?: string[];
  ports?: string[];
  techs?: string[];
  statusCodes?: string[];
};

export type AssetsControllerGetStatusCodeAssetsParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  value?: string;
  targetIds?: string[];
  ipAddresses?: string[];
  ports?: string[];
  techs?: string[];
  statusCodes?: string[];
};

export type WorkersControllerGetWorkersParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  workspaceId?: string;
};

export type SearchControllerSearchAssetsTargetsParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  value: string;
  workspaceId: string;
  isSaveHistory?: boolean;
};

export type SearchControllerGetSearchHistoryParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  workspaceId: string;
  query?: string;
};

export type ToolsControllerGetManyToolsParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  type?: ToolsControllerGetManyToolsType;
  category?: ToolsControllerGetManyToolsCategory;
  workspaceId?: string;
  providerId?: string;
};

export type ToolsControllerGetManyToolsType =
  (typeof ToolsControllerGetManyToolsType)[keyof typeof ToolsControllerGetManyToolsType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsControllerGetManyToolsType = {
  built_in: 'built_in',
  provider: 'provider',
} as const;

export type ToolsControllerGetManyToolsCategory =
  (typeof ToolsControllerGetManyToolsCategory)[keyof typeof ToolsControllerGetManyToolsCategory];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsControllerGetManyToolsCategory = {
  subdomains: 'subdomains',
  http_probe: 'http_probe',
  ports_scanner: 'ports_scanner',
  vulnerabilities: 'vulnerabilities',
  classifier: 'classifier',
} as const;

export type ToolsControllerGetInstalledToolsParams = {
  /**
   * The ID of the workspace
   */
  workspaceId: string;
  category?: ToolsControllerGetInstalledToolsCategory;
};

export type ToolsControllerGetInstalledToolsCategory =
  (typeof ToolsControllerGetInstalledToolsCategory)[keyof typeof ToolsControllerGetInstalledToolsCategory];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsControllerGetInstalledToolsCategory = {
  subdomains: 'subdomains',
  http_probe: 'http_probe',
  ports_scanner: 'ports_scanner',
  vulnerabilities: 'vulnerabilities',
  classifier: 'classifier',
} as const;

export type VulnerabilitiesControllerGetVulnerabilitiesParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  workspaceId: string;
  targetIds?: string[];
  q?: string;
};

export type VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams = {
  workspaceId: string;
  targetIds?: string[];
};

export type VulnerabilitiesControllerGetVulnerabilitiesSeverityParams = {
  workspaceId: string;
};

export type StatisticControllerGetStatisticsParams = {
  /**
   * The ID of the workspace to get statistics for
   */
  workspaceId: string;
};

export type ProvidersControllerGetManyProvidersParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  name?: string;
};

export type StorageControllerUploadFileBody = {
  file: Blob;
  /** Bucket name (default: "default") */
  bucket?: string;
};

export type StorageControllerUploadFile200 = {
  path?: string;
  bucket?: string;
  fullPath?: string;
};

export type StorageControllerForwardImageParams = {
  /**
   * The URL of the image to forward
   */
  url: string;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Creates a new target.
 * @summary Create a target
 */
export const targetsControllerCreateTarget = (
  createTargetDto: CreateTargetDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<Target>(
    {
      url: `/api/targets`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createTargetDto,
      signal,
    },
    options,
  );
};

export const getTargetsControllerCreateTargetMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof targetsControllerCreateTarget>>,
    TError,
    { data: CreateTargetDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof targetsControllerCreateTarget>>,
  TError,
  { data: CreateTargetDto },
  TContext
> => {
  const mutationKey = ['targetsControllerCreateTarget'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof targetsControllerCreateTarget>>,
    { data: CreateTargetDto }
  > = (props) => {
    const { data } = props ?? {};

    return targetsControllerCreateTarget(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TargetsControllerCreateTargetMutationResult = NonNullable<
  Awaited<ReturnType<typeof targetsControllerCreateTarget>>
>;
export type TargetsControllerCreateTargetMutationBody = CreateTargetDto;
export type TargetsControllerCreateTargetMutationError = unknown;

/**
 * @summary Create a target
 */
export const useTargetsControllerCreateTarget = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof targetsControllerCreateTarget>>,
      TError,
      { data: CreateTargetDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof targetsControllerCreateTarget>>,
  TError,
  { data: CreateTargetDto },
  TContext
> => {
  const mutationOptions =
    getTargetsControllerCreateTargetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieves all targets in a workspace.
 * @summary Get all targets in a workspace
 */
export const targetsControllerGetTargetsInWorkspace = (
  params?: TargetsControllerGetTargetsInWorkspaceParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyGetManyTargetResponseDtoDto>(
    { url: `/api/targets`, method: 'GET', params, signal },
    options,
  );
};

export const getTargetsControllerGetTargetsInWorkspaceQueryKey = (
  params?: TargetsControllerGetTargetsInWorkspaceParams,
) => {
  return [`/api/targets`, ...(params ? [params] : [])] as const;
};

export const getTargetsControllerGetTargetsInWorkspaceInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
    TargetsControllerGetTargetsInWorkspaceParams['page']
  >,
  TError = unknown,
>(
  params?: TargetsControllerGetTargetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData,
        QueryKey,
        TargetsControllerGetTargetsInWorkspaceParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTargetsControllerGetTargetsInWorkspaceQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
    QueryKey,
    TargetsControllerGetTargetsInWorkspaceParams['page']
  > = ({ signal, pageParam }) =>
    targetsControllerGetTargetsInWorkspace(
      { ...params, page: pageParam || params?.['page'] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
    TError,
    TData,
    QueryKey,
    TargetsControllerGetTargetsInWorkspaceParams['page']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TargetsControllerGetTargetsInWorkspaceInfiniteQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>
  >;
export type TargetsControllerGetTargetsInWorkspaceInfiniteQueryError = unknown;

export function useTargetsControllerGetTargetsInWorkspaceInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
    TargetsControllerGetTargetsInWorkspaceParams['page']
  >,
  TError = unknown,
>(
  params: undefined | TargetsControllerGetTargetsInWorkspaceParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData,
        QueryKey,
        TargetsControllerGetTargetsInWorkspaceParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
          TError,
          Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTargetsControllerGetTargetsInWorkspaceInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
    TargetsControllerGetTargetsInWorkspaceParams['page']
  >,
  TError = unknown,
>(
  params?: TargetsControllerGetTargetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData,
        QueryKey,
        TargetsControllerGetTargetsInWorkspaceParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
          TError,
          Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTargetsControllerGetTargetsInWorkspaceInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
    TargetsControllerGetTargetsInWorkspaceParams['page']
  >,
  TError = unknown,
>(
  params?: TargetsControllerGetTargetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData,
        QueryKey,
        TargetsControllerGetTargetsInWorkspaceParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all targets in a workspace
 */

export function useTargetsControllerGetTargetsInWorkspaceInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
    TargetsControllerGetTargetsInWorkspaceParams['page']
  >,
  TError = unknown,
>(
  params?: TargetsControllerGetTargetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData,
        QueryKey,
        TargetsControllerGetTargetsInWorkspaceParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getTargetsControllerGetTargetsInWorkspaceInfiniteQueryOptions(
      params,
      options,
    );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getTargetsControllerGetTargetsInWorkspaceQueryOptions = <
  TData = Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
  TError = unknown,
>(
  params?: TargetsControllerGetTargetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTargetsControllerGetTargetsInWorkspaceQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>
  > = ({ signal }) =>
    targetsControllerGetTargetsInWorkspace(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TargetsControllerGetTargetsInWorkspaceQueryResult = NonNullable<
  Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>
>;
export type TargetsControllerGetTargetsInWorkspaceQueryError = unknown;

export function useTargetsControllerGetTargetsInWorkspace<
  TData = Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
  TError = unknown,
>(
  params: undefined | TargetsControllerGetTargetsInWorkspaceParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
          TError,
          Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTargetsControllerGetTargetsInWorkspace<
  TData = Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
  TError = unknown,
>(
  params?: TargetsControllerGetTargetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
          TError,
          Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTargetsControllerGetTargetsInWorkspace<
  TData = Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
  TError = unknown,
>(
  params?: TargetsControllerGetTargetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all targets in a workspace
 */

export function useTargetsControllerGetTargetsInWorkspace<
  TData = Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
  TError = unknown,
>(
  params?: TargetsControllerGetTargetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getTargetsControllerGetTargetsInWorkspaceQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves a target by its ID.
 * @summary Get a target by ID
 */
export const targetsControllerGetTargetById = (
  id: string,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<Target>(
    { url: `/api/targets/${id}`, method: 'GET', signal },
    options,
  );
};

export const getTargetsControllerGetTargetByIdQueryKey = (id: string) => {
  return [`/api/targets/${id}`] as const;
};

export const getTargetsControllerGetTargetByIdInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof targetsControllerGetTargetById>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTargetsControllerGetTargetByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof targetsControllerGetTargetById>>
  > = ({ signal }) =>
    targetsControllerGetTargetById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TargetsControllerGetTargetByIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof targetsControllerGetTargetById>>
>;
export type TargetsControllerGetTargetByIdInfiniteQueryError = unknown;

export function useTargetsControllerGetTargetByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof targetsControllerGetTargetById>>
  >,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
          TError,
          Awaited<ReturnType<typeof targetsControllerGetTargetById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTargetsControllerGetTargetByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof targetsControllerGetTargetById>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
          TError,
          Awaited<ReturnType<typeof targetsControllerGetTargetById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTargetsControllerGetTargetByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof targetsControllerGetTargetById>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a target by ID
 */

export function useTargetsControllerGetTargetByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof targetsControllerGetTargetById>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getTargetsControllerGetTargetByIdInfiniteQueryOptions(
    id,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getTargetsControllerGetTargetByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTargetsControllerGetTargetByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof targetsControllerGetTargetById>>
  > = ({ signal }) =>
    targetsControllerGetTargetById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TargetsControllerGetTargetByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof targetsControllerGetTargetById>>
>;
export type TargetsControllerGetTargetByIdQueryError = unknown;

export function useTargetsControllerGetTargetById<
  TData = Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
          TError,
          Awaited<ReturnType<typeof targetsControllerGetTargetById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTargetsControllerGetTargetById<
  TData = Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
          TError,
          Awaited<ReturnType<typeof targetsControllerGetTargetById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTargetsControllerGetTargetById<
  TData = Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a target by ID
 */

export function useTargetsControllerGetTargetById<
  TData = Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getTargetsControllerGetTargetByIdQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates a target.
 * @summary Update a target
 */
export const targetsControllerUpdateTarget = (
  id: string,
  updateTargetDto: UpdateTargetDto,
  options?: SecondParameter<typeof orvalClient>,
) => {
  return orvalClient<Target>(
    {
      url: `/api/targets/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateTargetDto,
    },
    options,
  );
};

export const getTargetsControllerUpdateTargetMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof targetsControllerUpdateTarget>>,
    TError,
    { id: string; data: UpdateTargetDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof targetsControllerUpdateTarget>>,
  TError,
  { id: string; data: UpdateTargetDto },
  TContext
> => {
  const mutationKey = ['targetsControllerUpdateTarget'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof targetsControllerUpdateTarget>>,
    { id: string; data: UpdateTargetDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return targetsControllerUpdateTarget(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TargetsControllerUpdateTargetMutationResult = NonNullable<
  Awaited<ReturnType<typeof targetsControllerUpdateTarget>>
>;
export type TargetsControllerUpdateTargetMutationBody = UpdateTargetDto;
export type TargetsControllerUpdateTargetMutationError = unknown;

/**
 * @summary Update a target
 */
export const useTargetsControllerUpdateTarget = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof targetsControllerUpdateTarget>>,
      TError,
      { id: string; data: UpdateTargetDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof targetsControllerUpdateTarget>>,
  TError,
  { id: string; data: UpdateTargetDto },
  TContext
> => {
  const mutationOptions =
    getTargetsControllerUpdateTargetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Deletes a target from a workspace.
 * @summary Delete a target from a workspace
 */
export const targetsControllerDeleteTargetFromWorkspace = (
  id: string,
  workspaceId: string,
  options?: SecondParameter<typeof orvalClient>,
) => {
  return orvalClient<DefaultMessageResponseDto>(
    { url: `/api/targets/${id}/workspace/${workspaceId}`, method: 'DELETE' },
    options,
  );
};

export const getTargetsControllerDeleteTargetFromWorkspaceMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof targetsControllerDeleteTargetFromWorkspace>>,
    TError,
    { id: string; workspaceId: string },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof targetsControllerDeleteTargetFromWorkspace>>,
  TError,
  { id: string; workspaceId: string },
  TContext
> => {
  const mutationKey = ['targetsControllerDeleteTargetFromWorkspace'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof targetsControllerDeleteTargetFromWorkspace>>,
    { id: string; workspaceId: string }
  > = (props) => {
    const { id, workspaceId } = props ?? {};

    return targetsControllerDeleteTargetFromWorkspace(
      id,
      workspaceId,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type TargetsControllerDeleteTargetFromWorkspaceMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof targetsControllerDeleteTargetFromWorkspace>>
  >;

export type TargetsControllerDeleteTargetFromWorkspaceMutationError = unknown;

/**
 * @summary Delete a target from a workspace
 */
export const useTargetsControllerDeleteTargetFromWorkspace = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof targetsControllerDeleteTargetFromWorkspace>>,
      TError,
      { id: string; workspaceId: string },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof targetsControllerDeleteTargetFromWorkspace>>,
  TError,
  { id: string; workspaceId: string },
  TContext
> => {
  const mutationOptions =
    getTargetsControllerDeleteTargetFromWorkspaceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Rescans a target and triggers a new scan job.
 * @summary Rescan a target
 */
export const targetsControllerReScanTarget = (
  id: string,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<DefaultMessageResponseDto>(
    { url: `/api/targets/${id}/re-scan`, method: 'POST', signal },
    options,
  );
};

export const getTargetsControllerReScanTargetMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof targetsControllerReScanTarget>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof targetsControllerReScanTarget>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['targetsControllerReScanTarget'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof targetsControllerReScanTarget>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return targetsControllerReScanTarget(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TargetsControllerReScanTargetMutationResult = NonNullable<
  Awaited<ReturnType<typeof targetsControllerReScanTarget>>
>;

export type TargetsControllerReScanTargetMutationError = unknown;

/**
 * @summary Rescan a target
 */
export const useTargetsControllerReScanTarget = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof targetsControllerReScanTarget>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof targetsControllerReScanTarget>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getTargetsControllerReScanTargetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Creates a new workspace.
 * @summary Create Workspace
 */
export const workspacesControllerCreateWorkspace = (
  createWorkspaceDto: CreateWorkspaceDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<Workspace>(
    {
      url: `/api/workspaces`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createWorkspaceDto,
      signal,
    },
    options,
  );
};

export const getWorkspacesControllerCreateWorkspaceMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workspacesControllerCreateWorkspace>>,
    TError,
    { data: CreateWorkspaceDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workspacesControllerCreateWorkspace>>,
  TError,
  { data: CreateWorkspaceDto },
  TContext
> => {
  const mutationKey = ['workspacesControllerCreateWorkspace'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workspacesControllerCreateWorkspace>>,
    { data: CreateWorkspaceDto }
  > = (props) => {
    const { data } = props ?? {};

    return workspacesControllerCreateWorkspace(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkspacesControllerCreateWorkspaceMutationResult = NonNullable<
  Awaited<ReturnType<typeof workspacesControllerCreateWorkspace>>
>;
export type WorkspacesControllerCreateWorkspaceMutationBody =
  CreateWorkspaceDto;
export type WorkspacesControllerCreateWorkspaceMutationError = unknown;

/**
 * @summary Create Workspace
 */
export const useWorkspacesControllerCreateWorkspace = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof workspacesControllerCreateWorkspace>>,
      TError,
      { data: CreateWorkspaceDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof workspacesControllerCreateWorkspace>>,
  TError,
  { data: CreateWorkspaceDto },
  TContext
> => {
  const mutationOptions =
    getWorkspacesControllerCreateWorkspaceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieves a list of workspaces that the user is a member of.
 * @summary Get Workspaces
 */
export const workspacesControllerGetWorkspaces = (
  params?: WorkspacesControllerGetWorkspacesParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyWorkspaceDto>(
    { url: `/api/workspaces`, method: 'GET', params, signal },
    options,
  );
};

export const getWorkspacesControllerGetWorkspacesQueryKey = (
  params?: WorkspacesControllerGetWorkspacesParams,
) => {
  return [`/api/workspaces`, ...(params ? [params] : [])] as const;
};

export const getWorkspacesControllerGetWorkspacesInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
    WorkspacesControllerGetWorkspacesParams['page']
  >,
  TError = unknown,
>(
  params?: WorkspacesControllerGetWorkspacesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData,
        QueryKey,
        WorkspacesControllerGetWorkspacesParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getWorkspacesControllerGetWorkspacesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
    QueryKey,
    WorkspacesControllerGetWorkspacesParams['page']
  > = ({ signal, pageParam }) =>
    workspacesControllerGetWorkspaces(
      { ...params, page: pageParam || params?.['page'] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
    TError,
    TData,
    QueryKey,
    WorkspacesControllerGetWorkspacesParams['page']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkspacesControllerGetWorkspacesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>
>;
export type WorkspacesControllerGetWorkspacesInfiniteQueryError = unknown;

export function useWorkspacesControllerGetWorkspacesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
    WorkspacesControllerGetWorkspacesParams['page']
  >,
  TError = unknown,
>(
  params: undefined | WorkspacesControllerGetWorkspacesParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData,
        QueryKey,
        WorkspacesControllerGetWorkspacesParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspacesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
    WorkspacesControllerGetWorkspacesParams['page']
  >,
  TError = unknown,
>(
  params?: WorkspacesControllerGetWorkspacesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData,
        QueryKey,
        WorkspacesControllerGetWorkspacesParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspacesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
    WorkspacesControllerGetWorkspacesParams['page']
  >,
  TError = unknown,
>(
  params?: WorkspacesControllerGetWorkspacesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData,
        QueryKey,
        WorkspacesControllerGetWorkspacesParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Workspaces
 */

export function useWorkspacesControllerGetWorkspacesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
    WorkspacesControllerGetWorkspacesParams['page']
  >,
  TError = unknown,
>(
  params?: WorkspacesControllerGetWorkspacesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData,
        QueryKey,
        WorkspacesControllerGetWorkspacesParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWorkspacesControllerGetWorkspacesInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getWorkspacesControllerGetWorkspacesQueryOptions = <
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
  TError = unknown,
>(
  params?: WorkspacesControllerGetWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getWorkspacesControllerGetWorkspacesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>
  > = ({ signal }) =>
    workspacesControllerGetWorkspaces(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkspacesControllerGetWorkspacesQueryResult = NonNullable<
  Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>
>;
export type WorkspacesControllerGetWorkspacesQueryError = unknown;

export function useWorkspacesControllerGetWorkspaces<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
  TError = unknown,
>(
  params: undefined | WorkspacesControllerGetWorkspacesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaces<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
  TError = unknown,
>(
  params?: WorkspacesControllerGetWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaces<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
  TError = unknown,
>(
  params?: WorkspacesControllerGetWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Workspaces
 */

export function useWorkspacesControllerGetWorkspaces<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
  TError = unknown,
>(
  params?: WorkspacesControllerGetWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWorkspacesControllerGetWorkspacesQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves the API key for a workspace.
 * @summary Get workspace API key
 */
export const workspacesControllerGetWorkspaceApiKey = (
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetApiKeyResponseDto>(
    { url: `/api/workspaces/api-key`, method: 'GET', signal },
    options,
  );
};

export const getWorkspacesControllerGetWorkspaceApiKeyQueryKey = () => {
  return [`/api/workspaces/api-key`] as const;
};

export const getWorkspacesControllerGetWorkspaceApiKeyInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getWorkspacesControllerGetWorkspaceApiKeyQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>
  > = ({ signal }) =>
    workspacesControllerGetWorkspaceApiKey(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkspacesControllerGetWorkspaceApiKeyInfiniteQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>
  >;
export type WorkspacesControllerGetWorkspaceApiKeyInfiniteQueryError = unknown;

export function useWorkspacesControllerGetWorkspaceApiKeyInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>
  >,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaceApiKeyInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaceApiKeyInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get workspace API key
 */

export function useWorkspacesControllerGetWorkspaceApiKeyInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getWorkspacesControllerGetWorkspaceApiKeyInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getWorkspacesControllerGetWorkspaceApiKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getWorkspacesControllerGetWorkspaceApiKeyQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>
  > = ({ signal }) =>
    workspacesControllerGetWorkspaceApiKey(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkspacesControllerGetWorkspaceApiKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>
>;
export type WorkspacesControllerGetWorkspaceApiKeyQueryError = unknown;

export function useWorkspacesControllerGetWorkspaceApiKey<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaceApiKey<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaceApiKey<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get workspace API key
 */

export function useWorkspacesControllerGetWorkspaceApiKey<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceApiKey>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getWorkspacesControllerGetWorkspaceApiKeyQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves a workspace by its ID.
 * @summary Get Workspace By ID
 */
export const workspacesControllerGetWorkspaceById = (
  id: string,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<Workspace>(
    { url: `/api/workspaces/${id}`, method: 'GET', signal },
    options,
  );
};

export const getWorkspacesControllerGetWorkspaceByIdQueryKey = (id: string) => {
  return [`/api/workspaces/${id}`] as const;
};

export const getWorkspacesControllerGetWorkspaceByIdInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getWorkspacesControllerGetWorkspaceByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
  > = ({ signal }) =>
    workspacesControllerGetWorkspaceById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkspacesControllerGetWorkspaceByIdInfiniteQueryResult =
  NonNullable<Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>>;
export type WorkspacesControllerGetWorkspaceByIdInfiniteQueryError = unknown;

export function useWorkspacesControllerGetWorkspaceByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
  >,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaceByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaceByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Workspace By ID
 */

export function useWorkspacesControllerGetWorkspaceByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getWorkspacesControllerGetWorkspaceByIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getWorkspacesControllerGetWorkspaceByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getWorkspacesControllerGetWorkspaceByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
  > = ({ signal }) =>
    workspacesControllerGetWorkspaceById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkspacesControllerGetWorkspaceByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
>;
export type WorkspacesControllerGetWorkspaceByIdQueryError = unknown;

export function useWorkspacesControllerGetWorkspaceById<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaceById<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaceById<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Workspace By ID
 */

export function useWorkspacesControllerGetWorkspaceById<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWorkspacesControllerGetWorkspaceByIdQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates a workspace by its ID.
 * @summary Update Workspace
 */
export const workspacesControllerUpdateWorkspace = (
  id: string,
  updateWorkspaceDto: UpdateWorkspaceDto,
  options?: SecondParameter<typeof orvalClient>,
) => {
  return orvalClient<DefaultMessageResponseDto>(
    {
      url: `/api/workspaces/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateWorkspaceDto,
    },
    options,
  );
};

export const getWorkspacesControllerUpdateWorkspaceMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workspacesControllerUpdateWorkspace>>,
    TError,
    { id: string; data: UpdateWorkspaceDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workspacesControllerUpdateWorkspace>>,
  TError,
  { id: string; data: UpdateWorkspaceDto },
  TContext
> => {
  const mutationKey = ['workspacesControllerUpdateWorkspace'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workspacesControllerUpdateWorkspace>>,
    { id: string; data: UpdateWorkspaceDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return workspacesControllerUpdateWorkspace(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkspacesControllerUpdateWorkspaceMutationResult = NonNullable<
  Awaited<ReturnType<typeof workspacesControllerUpdateWorkspace>>
>;
export type WorkspacesControllerUpdateWorkspaceMutationBody =
  UpdateWorkspaceDto;
export type WorkspacesControllerUpdateWorkspaceMutationError = unknown;

/**
 * @summary Update Workspace
 */
export const useWorkspacesControllerUpdateWorkspace = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof workspacesControllerUpdateWorkspace>>,
      TError,
      { id: string; data: UpdateWorkspaceDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof workspacesControllerUpdateWorkspace>>,
  TError,
  { id: string; data: UpdateWorkspaceDto },
  TContext
> => {
  const mutationOptions =
    getWorkspacesControllerUpdateWorkspaceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Deletes a workspace by its ID.
 * @summary Delete Workspace
 */
export const workspacesControllerDeleteWorkspace = (
  id: string,
  options?: SecondParameter<typeof orvalClient>,
) => {
  return orvalClient<DefaultMessageResponseDto>(
    { url: `/api/workspaces/${id}`, method: 'DELETE' },
    options,
  );
};

export const getWorkspacesControllerDeleteWorkspaceMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workspacesControllerDeleteWorkspace>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workspacesControllerDeleteWorkspace>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['workspacesControllerDeleteWorkspace'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workspacesControllerDeleteWorkspace>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return workspacesControllerDeleteWorkspace(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkspacesControllerDeleteWorkspaceMutationResult = NonNullable<
  Awaited<ReturnType<typeof workspacesControllerDeleteWorkspace>>
>;

export type WorkspacesControllerDeleteWorkspaceMutationError = unknown;

/**
 * @summary Delete Workspace
 */
export const useWorkspacesControllerDeleteWorkspace = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof workspacesControllerDeleteWorkspace>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof workspacesControllerDeleteWorkspace>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getWorkspacesControllerDeleteWorkspaceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Regenerates the API key for a workspace.
 * @summary Rotate API key
 */
export const workspacesControllerRotateApiKey = (
  id: string,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetApiKeyResponseDto>(
    { url: `/api/workspaces/${id}/api-key/rotate`, method: 'POST', signal },
    options,
  );
};

export const getWorkspacesControllerRotateApiKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workspacesControllerRotateApiKey>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workspacesControllerRotateApiKey>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['workspacesControllerRotateApiKey'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workspacesControllerRotateApiKey>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return workspacesControllerRotateApiKey(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkspacesControllerRotateApiKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof workspacesControllerRotateApiKey>>
>;

export type WorkspacesControllerRotateApiKeyMutationError = unknown;

/**
 * @summary Rotate API key
 */
export const useWorkspacesControllerRotateApiKey = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof workspacesControllerRotateApiKey>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof workspacesControllerRotateApiKey>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getWorkspacesControllerRotateApiKeyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Sets the archived status of a workspace.
 * @summary Archive/Unarchive Workspace
 */
export const workspacesControllerMakeArchived = (
  id: string,
  archiveWorkspaceDto: ArchiveWorkspaceDto,
  options?: SecondParameter<typeof orvalClient>,
) => {
  return orvalClient<DefaultMessageResponseDto>(
    {
      url: `/api/workspaces/${id}/archived`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: archiveWorkspaceDto,
    },
    options,
  );
};

export const getWorkspacesControllerMakeArchivedMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workspacesControllerMakeArchived>>,
    TError,
    { id: string; data: ArchiveWorkspaceDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workspacesControllerMakeArchived>>,
  TError,
  { id: string; data: ArchiveWorkspaceDto },
  TContext
> => {
  const mutationKey = ['workspacesControllerMakeArchived'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workspacesControllerMakeArchived>>,
    { id: string; data: ArchiveWorkspaceDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return workspacesControllerMakeArchived(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkspacesControllerMakeArchivedMutationResult = NonNullable<
  Awaited<ReturnType<typeof workspacesControllerMakeArchived>>
>;
export type WorkspacesControllerMakeArchivedMutationBody = ArchiveWorkspaceDto;
export type WorkspacesControllerMakeArchivedMutationError = unknown;

/**
 * @summary Archive/Unarchive Workspace
 */
export const useWorkspacesControllerMakeArchived = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof workspacesControllerMakeArchived>>,
      TError,
      { id: string; data: ArchiveWorkspaceDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof workspacesControllerMakeArchived>>,
  TError,
  { id: string; data: ArchiveWorkspaceDto },
  TContext
> => {
  const mutationOptions =
    getWorkspacesControllerMakeArchivedMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const rootControllerGetHealth = (
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<void>(
    { url: `/api/health`, method: 'GET', signal },
    options,
  );
};

export const getRootControllerGetHealthQueryKey = () => {
  return [`/api/health`] as const;
};

export const getRootControllerGetHealthInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof rootControllerGetHealth>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof rootControllerGetHealth>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRootControllerGetHealthQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rootControllerGetHealth>>
  > = ({ signal }) => rootControllerGetHealth(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof rootControllerGetHealth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RootControllerGetHealthInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof rootControllerGetHealth>>
>;
export type RootControllerGetHealthInfiniteQueryError = unknown;

export function useRootControllerGetHealthInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rootControllerGetHealth>>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetHealth>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootControllerGetHealth>>,
          TError,
          Awaited<ReturnType<typeof rootControllerGetHealth>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRootControllerGetHealthInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rootControllerGetHealth>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetHealth>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootControllerGetHealth>>,
          TError,
          Awaited<ReturnType<typeof rootControllerGetHealth>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRootControllerGetHealthInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rootControllerGetHealth>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetHealth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useRootControllerGetHealthInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rootControllerGetHealth>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetHealth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRootControllerGetHealthInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getRootControllerGetHealthQueryOptions = <
  TData = Awaited<ReturnType<typeof rootControllerGetHealth>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof rootControllerGetHealth>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRootControllerGetHealthQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rootControllerGetHealth>>
  > = ({ signal }) => rootControllerGetHealth(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof rootControllerGetHealth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RootControllerGetHealthQueryResult = NonNullable<
  Awaited<ReturnType<typeof rootControllerGetHealth>>
>;
export type RootControllerGetHealthQueryError = unknown;

export function useRootControllerGetHealth<
  TData = Awaited<ReturnType<typeof rootControllerGetHealth>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetHealth>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootControllerGetHealth>>,
          TError,
          Awaited<ReturnType<typeof rootControllerGetHealth>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRootControllerGetHealth<
  TData = Awaited<ReturnType<typeof rootControllerGetHealth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetHealth>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootControllerGetHealth>>,
          TError,
          Awaited<ReturnType<typeof rootControllerGetHealth>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRootControllerGetHealth<
  TData = Awaited<ReturnType<typeof rootControllerGetHealth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetHealth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useRootControllerGetHealth<
  TData = Awaited<ReturnType<typeof rootControllerGetHealth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetHealth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRootControllerGetHealthQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates the first admin user in the system.
 * @summary Creates the first admin user in the system.
 */
export const rootControllerCreateFirstAdmin = (
  createFirstAdminDto: CreateFirstAdminDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<DefaultMessageResponseDto>(
    {
      url: `/api/init-admin`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createFirstAdminDto,
      signal,
    },
    options,
  );
};

export const getRootControllerCreateFirstAdminMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rootControllerCreateFirstAdmin>>,
    TError,
    { data: CreateFirstAdminDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof rootControllerCreateFirstAdmin>>,
  TError,
  { data: CreateFirstAdminDto },
  TContext
> => {
  const mutationKey = ['rootControllerCreateFirstAdmin'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rootControllerCreateFirstAdmin>>,
    { data: CreateFirstAdminDto }
  > = (props) => {
    const { data } = props ?? {};

    return rootControllerCreateFirstAdmin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RootControllerCreateFirstAdminMutationResult = NonNullable<
  Awaited<ReturnType<typeof rootControllerCreateFirstAdmin>>
>;
export type RootControllerCreateFirstAdminMutationBody = CreateFirstAdminDto;
export type RootControllerCreateFirstAdminMutationError = unknown;

/**
 * @summary Creates the first admin user in the system.
 */
export const useRootControllerCreateFirstAdmin = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof rootControllerCreateFirstAdmin>>,
      TError,
      { data: CreateFirstAdminDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof rootControllerCreateFirstAdmin>>,
  TError,
  { data: CreateFirstAdminDto },
  TContext
> => {
  const mutationOptions =
    getRootControllerCreateFirstAdminMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Returns metadata about the system state, like whether it has been initialized.
 * @summary Get system metadata.
 */
export const rootControllerGetMetadata = (
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetMetadataDto>(
    { url: `/api/metadata`, method: 'GET', signal },
    options,
  );
};

export const getRootControllerGetMetadataQueryKey = () => {
  return [`/api/metadata`] as const;
};

export const getRootControllerGetMetadataInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof rootControllerGetMetadata>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof rootControllerGetMetadata>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRootControllerGetMetadataQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rootControllerGetMetadata>>
  > = ({ signal }) => rootControllerGetMetadata(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof rootControllerGetMetadata>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RootControllerGetMetadataInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof rootControllerGetMetadata>>
>;
export type RootControllerGetMetadataInfiniteQueryError = unknown;

export function useRootControllerGetMetadataInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rootControllerGetMetadata>>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetMetadata>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootControllerGetMetadata>>,
          TError,
          Awaited<ReturnType<typeof rootControllerGetMetadata>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRootControllerGetMetadataInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rootControllerGetMetadata>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetMetadata>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootControllerGetMetadata>>,
          TError,
          Awaited<ReturnType<typeof rootControllerGetMetadata>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRootControllerGetMetadataInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rootControllerGetMetadata>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetMetadata>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get system metadata.
 */

export function useRootControllerGetMetadataInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rootControllerGetMetadata>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetMetadata>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getRootControllerGetMetadataInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getRootControllerGetMetadataQueryOptions = <
  TData = Awaited<ReturnType<typeof rootControllerGetMetadata>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof rootControllerGetMetadata>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRootControllerGetMetadataQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rootControllerGetMetadata>>
  > = ({ signal }) => rootControllerGetMetadata(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof rootControllerGetMetadata>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RootControllerGetMetadataQueryResult = NonNullable<
  Awaited<ReturnType<typeof rootControllerGetMetadata>>
>;
export type RootControllerGetMetadataQueryError = unknown;

export function useRootControllerGetMetadata<
  TData = Awaited<ReturnType<typeof rootControllerGetMetadata>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetMetadata>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootControllerGetMetadata>>,
          TError,
          Awaited<ReturnType<typeof rootControllerGetMetadata>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRootControllerGetMetadata<
  TData = Awaited<ReturnType<typeof rootControllerGetMetadata>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetMetadata>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootControllerGetMetadata>>,
          TError,
          Awaited<ReturnType<typeof rootControllerGetMetadata>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRootControllerGetMetadata<
  TData = Awaited<ReturnType<typeof rootControllerGetMetadata>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetMetadata>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get system metadata.
 */

export function useRootControllerGetMetadata<
  TData = Awaited<ReturnType<typeof rootControllerGetMetadata>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetMetadata>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRootControllerGetMetadataQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves a list of jobs that the user is a member of.
 * @summary Get Jobs
 */
export const jobsRegistryControllerGetManyJobs = (
  params?: JobsRegistryControllerGetManyJobsParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyJobDto>(
    { url: `/api/jobs-registry`, method: 'GET', params, signal },
    options,
  );
};

export const getJobsRegistryControllerGetManyJobsQueryKey = (
  params?: JobsRegistryControllerGetManyJobsParams,
) => {
  return [`/api/jobs-registry`, ...(params ? [params] : [])] as const;
};

export const getJobsRegistryControllerGetManyJobsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
    JobsRegistryControllerGetManyJobsParams['page']
  >,
  TError = unknown,
>(
  params?: JobsRegistryControllerGetManyJobsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetManyJobsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getJobsRegistryControllerGetManyJobsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
    QueryKey,
    JobsRegistryControllerGetManyJobsParams['page']
  > = ({ signal, pageParam }) =>
    jobsRegistryControllerGetManyJobs(
      { ...params, page: pageParam || params?.['page'] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
    TError,
    TData,
    QueryKey,
    JobsRegistryControllerGetManyJobsParams['page']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type JobsRegistryControllerGetManyJobsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>
>;
export type JobsRegistryControllerGetManyJobsInfiniteQueryError = unknown;

export function useJobsRegistryControllerGetManyJobsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
    JobsRegistryControllerGetManyJobsParams['page']
  >,
  TError = unknown,
>(
  params: undefined | JobsRegistryControllerGetManyJobsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetManyJobsParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetManyJobsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
    JobsRegistryControllerGetManyJobsParams['page']
  >,
  TError = unknown,
>(
  params?: JobsRegistryControllerGetManyJobsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetManyJobsParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetManyJobsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
    JobsRegistryControllerGetManyJobsParams['page']
  >,
  TError = unknown,
>(
  params?: JobsRegistryControllerGetManyJobsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetManyJobsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Jobs
 */

export function useJobsRegistryControllerGetManyJobsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
    JobsRegistryControllerGetManyJobsParams['page']
  >,
  TError = unknown,
>(
  params?: JobsRegistryControllerGetManyJobsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetManyJobsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getJobsRegistryControllerGetManyJobsInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getJobsRegistryControllerGetManyJobsQueryOptions = <
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
  TError = unknown,
>(
  params?: JobsRegistryControllerGetManyJobsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getJobsRegistryControllerGetManyJobsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>
  > = ({ signal }) =>
    jobsRegistryControllerGetManyJobs(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type JobsRegistryControllerGetManyJobsQueryResult = NonNullable<
  Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>
>;
export type JobsRegistryControllerGetManyJobsQueryError = unknown;

export function useJobsRegistryControllerGetManyJobs<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
  TError = unknown,
>(
  params: undefined | JobsRegistryControllerGetManyJobsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetManyJobs<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
  TError = unknown,
>(
  params?: JobsRegistryControllerGetManyJobsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetManyJobs<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
  TError = unknown,
>(
  params?: JobsRegistryControllerGetManyJobsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Jobs
 */

export function useJobsRegistryControllerGetManyJobs<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
  TError = unknown,
>(
  params?: JobsRegistryControllerGetManyJobsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getJobsRegistryControllerGetManyJobsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Creates a new job associated with the given asset and worker name.
 */
export const jobsRegistryControllerCreateJobsForTarget = (
  createJobsDto: CreateJobsDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<AppResponseSerialization>(
    {
      url: `/api/jobs-registry`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createJobsDto,
      signal,
    },
    options,
  );
};

export const getJobsRegistryControllerCreateJobsForTargetMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof jobsRegistryControllerCreateJobsForTarget>>,
    TError,
    { data: CreateJobsDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof jobsRegistryControllerCreateJobsForTarget>>,
  TError,
  { data: CreateJobsDto },
  TContext
> => {
  const mutationKey = ['jobsRegistryControllerCreateJobsForTarget'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof jobsRegistryControllerCreateJobsForTarget>>,
    { data: CreateJobsDto }
  > = (props) => {
    const { data } = props ?? {};

    return jobsRegistryControllerCreateJobsForTarget(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type JobsRegistryControllerCreateJobsForTargetMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof jobsRegistryControllerCreateJobsForTarget>>
  >;
export type JobsRegistryControllerCreateJobsForTargetMutationBody =
  CreateJobsDto;
export type JobsRegistryControllerCreateJobsForTargetMutationError = unknown;

/**
 * @summary Creates a new job associated with the given asset and worker name.
 */
export const useJobsRegistryControllerCreateJobsForTarget = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof jobsRegistryControllerCreateJobsForTarget>>,
      TError,
      { data: CreateJobsDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof jobsRegistryControllerCreateJobsForTarget>>,
  TError,
  { data: CreateJobsDto },
  TContext
> => {
  const mutationOptions =
    getJobsRegistryControllerCreateJobsForTargetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieves a timeline of jobs grouped by tool name and target.
 * @summary Get Jobs Timeline
 */
export const jobsRegistryControllerGetJobsTimeline = (
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<JobTimelineResponseDto>(
    { url: `/api/jobs-registry/timeline`, method: 'GET', signal },
    options,
  );
};

export const getJobsRegistryControllerGetJobsTimelineQueryKey = () => {
  return [`/api/jobs-registry/timeline`] as const;
};

export const getJobsRegistryControllerGetJobsTimelineInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getJobsRegistryControllerGetJobsTimelineQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>
  > = ({ signal }) =>
    jobsRegistryControllerGetJobsTimeline(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type JobsRegistryControllerGetJobsTimelineInfiniteQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>
  >;
export type JobsRegistryControllerGetJobsTimelineInfiniteQueryError = unknown;

export function useJobsRegistryControllerGetJobsTimelineInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>
  >,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetJobsTimelineInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetJobsTimelineInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Jobs Timeline
 */

export function useJobsRegistryControllerGetJobsTimelineInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getJobsRegistryControllerGetJobsTimelineInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getJobsRegistryControllerGetJobsTimelineQueryOptions = <
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getJobsRegistryControllerGetJobsTimelineQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>
  > = ({ signal }) =>
    jobsRegistryControllerGetJobsTimeline(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type JobsRegistryControllerGetJobsTimelineQueryResult = NonNullable<
  Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>
>;
export type JobsRegistryControllerGetJobsTimelineQueryError = unknown;

export function useJobsRegistryControllerGetJobsTimeline<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetJobsTimeline<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetJobsTimeline<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Jobs Timeline
 */

export function useJobsRegistryControllerGetJobsTimeline<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsTimeline>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getJobsRegistryControllerGetJobsTimelineQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Retrieves the next job associated with the given worker that has not yet been started.
 */
export const jobsRegistryControllerGetNextJob = (
  workerId: string,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetNextJobResponseDto>(
    { url: `/api/jobs-registry/${workerId}/next`, method: 'GET', signal },
    options,
  );
};

export const getJobsRegistryControllerGetNextJobQueryKey = (
  workerId: string,
) => {
  return [`/api/jobs-registry/${workerId}/next`] as const;
};

export const getJobsRegistryControllerGetNextJobInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
  >,
  TError = unknown,
>(
  workerId: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getJobsRegistryControllerGetNextJobQueryKey(workerId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
  > = ({ signal }) =>
    jobsRegistryControllerGetNextJob(workerId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!workerId,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type JobsRegistryControllerGetNextJobInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
>;
export type JobsRegistryControllerGetNextJobInfiniteQueryError = unknown;

export function useJobsRegistryControllerGetNextJobInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
  >,
  TError = unknown,
>(
  workerId: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetNextJobInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
  >,
  TError = unknown,
>(
  workerId: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetNextJobInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
  >,
  TError = unknown,
>(
  workerId: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Retrieves the next job associated with the given worker that has not yet been started.
 */

export function useJobsRegistryControllerGetNextJobInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
  >,
  TError = unknown,
>(
  workerId: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getJobsRegistryControllerGetNextJobInfiniteQueryOptions(
    workerId,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getJobsRegistryControllerGetNextJobQueryOptions = <
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
  TError = unknown,
>(
  workerId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getJobsRegistryControllerGetNextJobQueryKey(workerId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
  > = ({ signal }) =>
    jobsRegistryControllerGetNextJob(workerId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!workerId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type JobsRegistryControllerGetNextJobQueryResult = NonNullable<
  Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
>;
export type JobsRegistryControllerGetNextJobQueryError = unknown;

export function useJobsRegistryControllerGetNextJob<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
  TError = unknown,
>(
  workerId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetNextJob<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
  TError = unknown,
>(
  workerId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetNextJob<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
  TError = unknown,
>(
  workerId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Retrieves the next job associated with the given worker that has not yet been started.
 */

export function useJobsRegistryControllerGetNextJob<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
  TError = unknown,
>(
  workerId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getJobsRegistryControllerGetNextJobQueryOptions(
    workerId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Updates the result of a job with the given worker ID.
 */
export const jobsRegistryControllerUpdateResult = (
  workerId: string,
  updateResultDto: UpdateResultDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<AppResponseSerialization>(
    {
      url: `/api/jobs-registry/${workerId}/result`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: updateResultDto,
      signal,
    },
    options,
  );
};

export const getJobsRegistryControllerUpdateResultMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof jobsRegistryControllerUpdateResult>>,
    TError,
    { workerId: string; data: UpdateResultDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof jobsRegistryControllerUpdateResult>>,
  TError,
  { workerId: string; data: UpdateResultDto },
  TContext
> => {
  const mutationKey = ['jobsRegistryControllerUpdateResult'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof jobsRegistryControllerUpdateResult>>,
    { workerId: string; data: UpdateResultDto }
  > = (props) => {
    const { workerId, data } = props ?? {};

    return jobsRegistryControllerUpdateResult(workerId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type JobsRegistryControllerUpdateResultMutationResult = NonNullable<
  Awaited<ReturnType<typeof jobsRegistryControllerUpdateResult>>
>;
export type JobsRegistryControllerUpdateResultMutationBody = UpdateResultDto;
export type JobsRegistryControllerUpdateResultMutationError = unknown;

/**
 * @summary Updates the result of a job with the given worker ID.
 */
export const useJobsRegistryControllerUpdateResult = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof jobsRegistryControllerUpdateResult>>,
      TError,
      { workerId: string; data: UpdateResultDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof jobsRegistryControllerUpdateResult>>,
  TError,
  { workerId: string; data: UpdateResultDto },
  TContext
> => {
  const mutationOptions =
    getJobsRegistryControllerUpdateResultMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieves a list of assets associated with the given target.
 * @summary Get assets in target
 */
export const assetsControllerGetAssetsInWorkspace = (
  params?: AssetsControllerGetAssetsInWorkspaceParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyGetAssetsResponseDtoDto>(
    { url: `/api/assets`, method: 'GET', params, signal },
    options,
  );
};

export const getAssetsControllerGetAssetsInWorkspaceQueryKey = (
  params?: AssetsControllerGetAssetsInWorkspaceParams,
) => {
  return [`/api/assets`, ...(params ? [params] : [])] as const;
};

export const getAssetsControllerGetAssetsInWorkspaceInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
    AssetsControllerGetAssetsInWorkspaceParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetAssetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetAssetsInWorkspaceParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAssetsControllerGetAssetsInWorkspaceQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
    QueryKey,
    AssetsControllerGetAssetsInWorkspaceParams['page']
  > = ({ signal, pageParam }) =>
    assetsControllerGetAssetsInWorkspace(
      { ...params, page: pageParam || params?.['page'] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
    TError,
    TData,
    QueryKey,
    AssetsControllerGetAssetsInWorkspaceParams['page']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AssetsControllerGetAssetsInWorkspaceInfiniteQueryResult =
  NonNullable<Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>>;
export type AssetsControllerGetAssetsInWorkspaceInfiniteQueryError = unknown;

export function useAssetsControllerGetAssetsInWorkspaceInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
    AssetsControllerGetAssetsInWorkspaceParams['page']
  >,
  TError = unknown,
>(
  params: undefined | AssetsControllerGetAssetsInWorkspaceParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetAssetsInWorkspaceParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetAssetsInWorkspaceInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
    AssetsControllerGetAssetsInWorkspaceParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetAssetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetAssetsInWorkspaceParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetAssetsInWorkspaceInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
    AssetsControllerGetAssetsInWorkspaceParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetAssetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetAssetsInWorkspaceParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get assets in target
 */

export function useAssetsControllerGetAssetsInWorkspaceInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
    AssetsControllerGetAssetsInWorkspaceParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetAssetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetAssetsInWorkspaceParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getAssetsControllerGetAssetsInWorkspaceInfiniteQueryOptions(
      params,
      options,
    );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAssetsControllerGetAssetsInWorkspaceQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
  TError = unknown,
>(
  params?: AssetsControllerGetAssetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAssetsControllerGetAssetsInWorkspaceQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>
  > = ({ signal }) =>
    assetsControllerGetAssetsInWorkspace(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AssetsControllerGetAssetsInWorkspaceQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>
>;
export type AssetsControllerGetAssetsInWorkspaceQueryError = unknown;

export function useAssetsControllerGetAssetsInWorkspace<
  TData = Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
  TError = unknown,
>(
  params: undefined | AssetsControllerGetAssetsInWorkspaceParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetAssetsInWorkspace<
  TData = Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
  TError = unknown,
>(
  params?: AssetsControllerGetAssetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetAssetsInWorkspace<
  TData = Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
  TError = unknown,
>(
  params?: AssetsControllerGetAssetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get assets in target
 */

export function useAssetsControllerGetAssetsInWorkspace<
  TData = Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
  TError = unknown,
>(
  params?: AssetsControllerGetAssetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetsInWorkspace>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAssetsControllerGetAssetsInWorkspaceQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves a list of ip with number of assets.
 * @summary Get IP asset
 */
export const assetsControllerGetIpAssets = (
  params?: AssetsControllerGetIpAssetsParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyGetIpAssetsDTODto>(
    { url: `/api/assets/ip`, method: 'GET', params, signal },
    options,
  );
};

export const getAssetsControllerGetIpAssetsQueryKey = (
  params?: AssetsControllerGetIpAssetsParams,
) => {
  return [`/api/assets/ip`, ...(params ? [params] : [])] as const;
};

export const getAssetsControllerGetIpAssetsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
    AssetsControllerGetIpAssetsParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetIpAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetIpAssetsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAssetsControllerGetIpAssetsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
    QueryKey,
    AssetsControllerGetIpAssetsParams['page']
  > = ({ signal, pageParam }) =>
    assetsControllerGetIpAssets(
      { ...params, page: pageParam || params?.['page'] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
    TError,
    TData,
    QueryKey,
    AssetsControllerGetIpAssetsParams['page']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AssetsControllerGetIpAssetsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsControllerGetIpAssets>>
>;
export type AssetsControllerGetIpAssetsInfiniteQueryError = unknown;

export function useAssetsControllerGetIpAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
    AssetsControllerGetIpAssetsParams['page']
  >,
  TError = unknown,
>(
  params: undefined | AssetsControllerGetIpAssetsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetIpAssetsParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetIpAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
    AssetsControllerGetIpAssetsParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetIpAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetIpAssetsParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetIpAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
    AssetsControllerGetIpAssetsParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetIpAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetIpAssetsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get IP asset
 */

export function useAssetsControllerGetIpAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
    AssetsControllerGetIpAssetsParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetIpAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetIpAssetsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAssetsControllerGetIpAssetsInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAssetsControllerGetIpAssetsQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
  TError = unknown,
>(
  params?: AssetsControllerGetIpAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAssetsControllerGetIpAssetsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsControllerGetIpAssets>>
  > = ({ signal }) =>
    assetsControllerGetIpAssets(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AssetsControllerGetIpAssetsQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsControllerGetIpAssets>>
>;
export type AssetsControllerGetIpAssetsQueryError = unknown;

export function useAssetsControllerGetIpAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
  TError = unknown,
>(
  params: undefined | AssetsControllerGetIpAssetsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetIpAssets>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetIpAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
  TError = unknown,
>(
  params?: AssetsControllerGetIpAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetIpAssets>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetIpAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
  TError = unknown,
>(
  params?: AssetsControllerGetIpAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get IP asset
 */

export function useAssetsControllerGetIpAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
  TError = unknown,
>(
  params?: AssetsControllerGetIpAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetIpAssets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAssetsControllerGetIpAssetsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves a list of port with number of assets.
 * @summary Get ports and number of assets
 */
export const assetsControllerGetPortAssets = (
  params?: AssetsControllerGetPortAssetsParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyGetPortAssetsDTODto>(
    { url: `/api/assets/port`, method: 'GET', params, signal },
    options,
  );
};

export const getAssetsControllerGetPortAssetsQueryKey = (
  params?: AssetsControllerGetPortAssetsParams,
) => {
  return [`/api/assets/port`, ...(params ? [params] : [])] as const;
};

export const getAssetsControllerGetPortAssetsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
    AssetsControllerGetPortAssetsParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetPortAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetPortAssetsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAssetsControllerGetPortAssetsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
    QueryKey,
    AssetsControllerGetPortAssetsParams['page']
  > = ({ signal, pageParam }) =>
    assetsControllerGetPortAssets(
      { ...params, page: pageParam || params?.['page'] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
    TError,
    TData,
    QueryKey,
    AssetsControllerGetPortAssetsParams['page']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AssetsControllerGetPortAssetsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsControllerGetPortAssets>>
>;
export type AssetsControllerGetPortAssetsInfiniteQueryError = unknown;

export function useAssetsControllerGetPortAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
    AssetsControllerGetPortAssetsParams['page']
  >,
  TError = unknown,
>(
  params: undefined | AssetsControllerGetPortAssetsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetPortAssetsParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetPortAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
    AssetsControllerGetPortAssetsParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetPortAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetPortAssetsParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetPortAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
    AssetsControllerGetPortAssetsParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetPortAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetPortAssetsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get ports and number of assets
 */

export function useAssetsControllerGetPortAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
    AssetsControllerGetPortAssetsParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetPortAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetPortAssetsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAssetsControllerGetPortAssetsInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAssetsControllerGetPortAssetsQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
  TError = unknown,
>(
  params?: AssetsControllerGetPortAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAssetsControllerGetPortAssetsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsControllerGetPortAssets>>
  > = ({ signal }) =>
    assetsControllerGetPortAssets(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AssetsControllerGetPortAssetsQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsControllerGetPortAssets>>
>;
export type AssetsControllerGetPortAssetsQueryError = unknown;

export function useAssetsControllerGetPortAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
  TError = unknown,
>(
  params: undefined | AssetsControllerGetPortAssetsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetPortAssets>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetPortAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
  TError = unknown,
>(
  params?: AssetsControllerGetPortAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetPortAssets>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetPortAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
  TError = unknown,
>(
  params?: AssetsControllerGetPortAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get ports and number of assets
 */

export function useAssetsControllerGetPortAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
  TError = unknown,
>(
  params?: AssetsControllerGetPortAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetPortAssets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAssetsControllerGetPortAssetsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves a list of technologies with number of assets.
 * @summary Get technologies along with number of assets
 */
export const assetsControllerGetTechnologyAssets = (
  params?: AssetsControllerGetTechnologyAssetsParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyGetTechnologyAssetsDTODto>(
    { url: `/api/assets/tech`, method: 'GET', params, signal },
    options,
  );
};

export const getAssetsControllerGetTechnologyAssetsQueryKey = (
  params?: AssetsControllerGetTechnologyAssetsParams,
) => {
  return [`/api/assets/tech`, ...(params ? [params] : [])] as const;
};

export const getAssetsControllerGetTechnologyAssetsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
    AssetsControllerGetTechnologyAssetsParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetTechnologyAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetTechnologyAssetsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAssetsControllerGetTechnologyAssetsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
    QueryKey,
    AssetsControllerGetTechnologyAssetsParams['page']
  > = ({ signal, pageParam }) =>
    assetsControllerGetTechnologyAssets(
      { ...params, page: pageParam || params?.['page'] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
    TError,
    TData,
    QueryKey,
    AssetsControllerGetTechnologyAssetsParams['page']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AssetsControllerGetTechnologyAssetsInfiniteQueryResult =
  NonNullable<Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>>;
export type AssetsControllerGetTechnologyAssetsInfiniteQueryError = unknown;

export function useAssetsControllerGetTechnologyAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
    AssetsControllerGetTechnologyAssetsParams['page']
  >,
  TError = unknown,
>(
  params: undefined | AssetsControllerGetTechnologyAssetsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetTechnologyAssetsParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetTechnologyAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
    AssetsControllerGetTechnologyAssetsParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetTechnologyAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetTechnologyAssetsParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetTechnologyAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
    AssetsControllerGetTechnologyAssetsParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetTechnologyAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetTechnologyAssetsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get technologies along with number of assets
 */

export function useAssetsControllerGetTechnologyAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
    AssetsControllerGetTechnologyAssetsParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetTechnologyAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetTechnologyAssetsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getAssetsControllerGetTechnologyAssetsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAssetsControllerGetTechnologyAssetsQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
  TError = unknown,
>(
  params?: AssetsControllerGetTechnologyAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAssetsControllerGetTechnologyAssetsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>
  > = ({ signal }) =>
    assetsControllerGetTechnologyAssets(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AssetsControllerGetTechnologyAssetsQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>
>;
export type AssetsControllerGetTechnologyAssetsQueryError = unknown;

export function useAssetsControllerGetTechnologyAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
  TError = unknown,
>(
  params: undefined | AssetsControllerGetTechnologyAssetsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetTechnologyAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
  TError = unknown,
>(
  params?: AssetsControllerGetTechnologyAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetTechnologyAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
  TError = unknown,
>(
  params?: AssetsControllerGetTechnologyAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get technologies along with number of assets
 */

export function useAssetsControllerGetTechnologyAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
  TError = unknown,
>(
  params?: AssetsControllerGetTechnologyAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetTechnologyAssets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAssetsControllerGetTechnologyAssetsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves a list of technologies with number of assets.
 * @summary Get technologies along with number of assets
 */
export const assetsControllerGetStatusCodeAssets = (
  params?: AssetsControllerGetStatusCodeAssetsParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyGetStatusCodeAssetsDTODto>(
    { url: `/api/assets/status-code`, method: 'GET', params, signal },
    options,
  );
};

export const getAssetsControllerGetStatusCodeAssetsQueryKey = (
  params?: AssetsControllerGetStatusCodeAssetsParams,
) => {
  return [`/api/assets/status-code`, ...(params ? [params] : [])] as const;
};

export const getAssetsControllerGetStatusCodeAssetsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
    AssetsControllerGetStatusCodeAssetsParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetStatusCodeAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetStatusCodeAssetsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAssetsControllerGetStatusCodeAssetsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
    QueryKey,
    AssetsControllerGetStatusCodeAssetsParams['page']
  > = ({ signal, pageParam }) =>
    assetsControllerGetStatusCodeAssets(
      { ...params, page: pageParam || params?.['page'] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
    TError,
    TData,
    QueryKey,
    AssetsControllerGetStatusCodeAssetsParams['page']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AssetsControllerGetStatusCodeAssetsInfiniteQueryResult =
  NonNullable<Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>>;
export type AssetsControllerGetStatusCodeAssetsInfiniteQueryError = unknown;

export function useAssetsControllerGetStatusCodeAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
    AssetsControllerGetStatusCodeAssetsParams['page']
  >,
  TError = unknown,
>(
  params: undefined | AssetsControllerGetStatusCodeAssetsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetStatusCodeAssetsParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetStatusCodeAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
    AssetsControllerGetStatusCodeAssetsParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetStatusCodeAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetStatusCodeAssetsParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetStatusCodeAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
    AssetsControllerGetStatusCodeAssetsParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetStatusCodeAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetStatusCodeAssetsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get technologies along with number of assets
 */

export function useAssetsControllerGetStatusCodeAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
    AssetsControllerGetStatusCodeAssetsParams['page']
  >,
  TError = unknown,
>(
  params?: AssetsControllerGetStatusCodeAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetStatusCodeAssetsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getAssetsControllerGetStatusCodeAssetsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAssetsControllerGetStatusCodeAssetsQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
  TError = unknown,
>(
  params?: AssetsControllerGetStatusCodeAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAssetsControllerGetStatusCodeAssetsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>
  > = ({ signal }) =>
    assetsControllerGetStatusCodeAssets(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AssetsControllerGetStatusCodeAssetsQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>
>;
export type AssetsControllerGetStatusCodeAssetsQueryError = unknown;

export function useAssetsControllerGetStatusCodeAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
  TError = unknown,
>(
  params: undefined | AssetsControllerGetStatusCodeAssetsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetStatusCodeAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
  TError = unknown,
>(
  params?: AssetsControllerGetStatusCodeAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetStatusCodeAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
  TError = unknown,
>(
  params?: AssetsControllerGetStatusCodeAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get technologies along with number of assets
 */

export function useAssetsControllerGetStatusCodeAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
  TError = unknown,
>(
  params?: AssetsControllerGetStatusCodeAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetStatusCodeAssets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAssetsControllerGetStatusCodeAssetsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves a single asset by its ID.
 * @summary Get asset by ID
 */
export const assetsControllerGetAssetById = (
  id: string,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetAssetsResponseDto>(
    { url: `/api/assets/${id}`, method: 'GET', signal },
    options,
  );
};

export const getAssetsControllerGetAssetByIdQueryKey = (id: string) => {
  return [`/api/assets/${id}`] as const;
};

export const getAssetsControllerGetAssetByIdInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetAssetById>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAssetsControllerGetAssetByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsControllerGetAssetById>>
  > = ({ signal }) => assetsControllerGetAssetById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AssetsControllerGetAssetByIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsControllerGetAssetById>>
>;
export type AssetsControllerGetAssetByIdInfiniteQueryError = unknown;

export function useAssetsControllerGetAssetByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetAssetById>>
  >,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetAssetById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetAssetByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetAssetById>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetAssetById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetAssetByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetAssetById>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get asset by ID
 */

export function useAssetsControllerGetAssetByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetAssetById>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAssetsControllerGetAssetByIdInfiniteQueryOptions(
    id,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAssetsControllerGetAssetByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAssetsControllerGetAssetByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsControllerGetAssetById>>
  > = ({ signal }) => assetsControllerGetAssetById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AssetsControllerGetAssetByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsControllerGetAssetById>>
>;
export type AssetsControllerGetAssetByIdQueryError = unknown;

export function useAssetsControllerGetAssetById<
  TData = Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetAssetById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetAssetById<
  TData = Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetAssetById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetAssetById<
  TData = Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get asset by ID
 */

export function useAssetsControllerGetAssetById<
  TData = Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssetById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAssetsControllerGetAssetByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates an asset by its ID. Only tags can be updated.
 * @summary Update asset by ID
 */
export const assetsControllerUpdateAssetById = (
  id: string,
  updateAssetDto: UpdateAssetDto,
  options?: SecondParameter<typeof orvalClient>,
) => {
  return orvalClient<GetAssetsResponseDto>(
    {
      url: `/api/assets/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateAssetDto,
    },
    options,
  );
};

export const getAssetsControllerUpdateAssetByIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsControllerUpdateAssetById>>,
    TError,
    { id: string; data: UpdateAssetDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsControllerUpdateAssetById>>,
  TError,
  { id: string; data: UpdateAssetDto },
  TContext
> => {
  const mutationKey = ['assetsControllerUpdateAssetById'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsControllerUpdateAssetById>>,
    { id: string; data: UpdateAssetDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return assetsControllerUpdateAssetById(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AssetsControllerUpdateAssetByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof assetsControllerUpdateAssetById>>
>;
export type AssetsControllerUpdateAssetByIdMutationBody = UpdateAssetDto;
export type AssetsControllerUpdateAssetByIdMutationError = unknown;

/**
 * @summary Update asset by ID
 */
export const useAssetsControllerUpdateAssetById = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof assetsControllerUpdateAssetById>>,
      TError,
      { id: string; data: UpdateAssetDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof assetsControllerUpdateAssetById>>,
  TError,
  { id: string; data: UpdateAssetDto },
  TContext
> => {
  const mutationOptions =
    getAssetsControllerUpdateAssetByIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieves detailed information about a specific technology.
 * @summary Get technology information
 */
export const technologyControllerGetTechnologyInfo = (
  name: string,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<TechnologyDetailDTO>(
    { url: `/api/technology/${name}`, method: 'GET', signal },
    options,
  );
};

export const getTechnologyControllerGetTechnologyInfoQueryKey = (
  name: string,
) => {
  return [`/api/technology/${name}`] as const;
};

export const getTechnologyControllerGetTechnologyInfoInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>
  >,
  TError = unknown,
>(
  name: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTechnologyControllerGetTechnologyInfoQueryKey(name);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>
  > = ({ signal }) =>
    technologyControllerGetTechnologyInfo(name, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!name,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TechnologyControllerGetTechnologyInfoInfiniteQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>
  >;
export type TechnologyControllerGetTechnologyInfoInfiniteQueryError = unknown;

export function useTechnologyControllerGetTechnologyInfoInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>
  >,
  TError = unknown,
>(
  name: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
          TError,
          Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTechnologyControllerGetTechnologyInfoInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>
  >,
  TError = unknown,
>(
  name: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
          TError,
          Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTechnologyControllerGetTechnologyInfoInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>
  >,
  TError = unknown,
>(
  name: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get technology information
 */

export function useTechnologyControllerGetTechnologyInfoInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>
  >,
  TError = unknown,
>(
  name: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getTechnologyControllerGetTechnologyInfoInfiniteQueryOptions(name, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getTechnologyControllerGetTechnologyInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
  TError = unknown,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTechnologyControllerGetTechnologyInfoQueryKey(name);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>
  > = ({ signal }) =>
    technologyControllerGetTechnologyInfo(name, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!name,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TechnologyControllerGetTechnologyInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>
>;
export type TechnologyControllerGetTechnologyInfoQueryError = unknown;

export function useTechnologyControllerGetTechnologyInfo<
  TData = Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
  TError = unknown,
>(
  name: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
          TError,
          Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTechnologyControllerGetTechnologyInfo<
  TData = Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
  TError = unknown,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
          TError,
          Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTechnologyControllerGetTechnologyInfo<
  TData = Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
  TError = unknown,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get technology information
 */

export function useTechnologyControllerGetTechnologyInfo<
  TData = Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
  TError = unknown,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof technologyControllerGetTechnologyInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getTechnologyControllerGetTechnologyInfoQueryOptions(
    name,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Worker alive
 * @summary Worker alive
 */
export const workersControllerAlive = (
  workerAliveDto: WorkerAliveDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<DefaultMessageResponseDto>(
    {
      url: `/api/workers/alive`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: workerAliveDto,
      signal,
    },
    options,
  );
};

export const getWorkersControllerAliveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workersControllerAlive>>,
    TError,
    { data: WorkerAliveDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workersControllerAlive>>,
  TError,
  { data: WorkerAliveDto },
  TContext
> => {
  const mutationKey = ['workersControllerAlive'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workersControllerAlive>>,
    { data: WorkerAliveDto }
  > = (props) => {
    const { data } = props ?? {};

    return workersControllerAlive(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkersControllerAliveMutationResult = NonNullable<
  Awaited<ReturnType<typeof workersControllerAlive>>
>;
export type WorkersControllerAliveMutationBody = WorkerAliveDto;
export type WorkersControllerAliveMutationError = unknown;

/**
 * @summary Worker alive
 */
export const useWorkersControllerAlive = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof workersControllerAlive>>,
      TError,
      { data: WorkerAliveDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof workersControllerAlive>>,
  TError,
  { data: WorkerAliveDto },
  TContext
> => {
  const mutationOptions = getWorkersControllerAliveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Worker join the cluster
 * @summary Worker join
 */
export const workersControllerJoin = (
  workerJoinDto: WorkerJoinDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<WorkerInstance>(
    {
      url: `/api/workers/join`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: workerJoinDto,
      signal,
    },
    options,
  );
};

export const getWorkersControllerJoinMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workersControllerJoin>>,
    TError,
    { data: WorkerJoinDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workersControllerJoin>>,
  TError,
  { data: WorkerJoinDto },
  TContext
> => {
  const mutationKey = ['workersControllerJoin'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workersControllerJoin>>,
    { data: WorkerJoinDto }
  > = (props) => {
    const { data } = props ?? {};

    return workersControllerJoin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkersControllerJoinMutationResult = NonNullable<
  Awaited<ReturnType<typeof workersControllerJoin>>
>;
export type WorkersControllerJoinMutationBody = WorkerJoinDto;
export type WorkersControllerJoinMutationError = unknown;

/**
 * @summary Worker join
 */
export const useWorkersControllerJoin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof workersControllerJoin>>,
      TError,
      { data: WorkerJoinDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof workersControllerJoin>>,
  TError,
  { data: WorkerJoinDto },
  TContext
> => {
  const mutationOptions = getWorkersControllerJoinMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Gets all workers with pagination and sorting.
 */
export const workersControllerGetWorkers = (
  params?: WorkersControllerGetWorkersParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyWorkerInstanceDto>(
    { url: `/api/workers`, method: 'GET', params, signal },
    options,
  );
};

export const getWorkersControllerGetWorkersQueryKey = (
  params?: WorkersControllerGetWorkersParams,
) => {
  return [`/api/workers`, ...(params ? [params] : [])] as const;
};

export const getWorkersControllerGetWorkersInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof workersControllerGetWorkers>>,
    WorkersControllerGetWorkersParams['page']
  >,
  TError = unknown,
>(
  params?: WorkersControllerGetWorkersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData,
        QueryKey,
        WorkersControllerGetWorkersParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getWorkersControllerGetWorkersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workersControllerGetWorkers>>,
    QueryKey,
    WorkersControllerGetWorkersParams['page']
  > = ({ signal, pageParam }) =>
    workersControllerGetWorkers(
      { ...params, page: pageParam || params?.['page'] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof workersControllerGetWorkers>>,
    TError,
    TData,
    QueryKey,
    WorkersControllerGetWorkersParams['page']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkersControllerGetWorkersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof workersControllerGetWorkers>>
>;
export type WorkersControllerGetWorkersInfiniteQueryError = unknown;

export function useWorkersControllerGetWorkersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workersControllerGetWorkers>>,
    WorkersControllerGetWorkersParams['page']
  >,
  TError = unknown,
>(
  params: undefined | WorkersControllerGetWorkersParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData,
        QueryKey,
        WorkersControllerGetWorkersParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof workersControllerGetWorkers>>,
          TError,
          Awaited<ReturnType<typeof workersControllerGetWorkers>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkersControllerGetWorkersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workersControllerGetWorkers>>,
    WorkersControllerGetWorkersParams['page']
  >,
  TError = unknown,
>(
  params?: WorkersControllerGetWorkersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData,
        QueryKey,
        WorkersControllerGetWorkersParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof workersControllerGetWorkers>>,
          TError,
          Awaited<ReturnType<typeof workersControllerGetWorkers>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkersControllerGetWorkersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workersControllerGetWorkers>>,
    WorkersControllerGetWorkersParams['page']
  >,
  TError = unknown,
>(
  params?: WorkersControllerGetWorkersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData,
        QueryKey,
        WorkersControllerGetWorkersParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets all workers with pagination and sorting.
 */

export function useWorkersControllerGetWorkersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workersControllerGetWorkers>>,
    WorkersControllerGetWorkersParams['page']
  >,
  TError = unknown,
>(
  params?: WorkersControllerGetWorkersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData,
        QueryKey,
        WorkersControllerGetWorkersParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWorkersControllerGetWorkersInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getWorkersControllerGetWorkersQueryOptions = <
  TData = Awaited<ReturnType<typeof workersControllerGetWorkers>>,
  TError = unknown,
>(
  params?: WorkersControllerGetWorkersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getWorkersControllerGetWorkersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workersControllerGetWorkers>>
  > = ({ signal }) =>
    workersControllerGetWorkers(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof workersControllerGetWorkers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkersControllerGetWorkersQueryResult = NonNullable<
  Awaited<ReturnType<typeof workersControllerGetWorkers>>
>;
export type WorkersControllerGetWorkersQueryError = unknown;

export function useWorkersControllerGetWorkers<
  TData = Awaited<ReturnType<typeof workersControllerGetWorkers>>,
  TError = unknown,
>(
  params: undefined | WorkersControllerGetWorkersParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof workersControllerGetWorkers>>,
          TError,
          Awaited<ReturnType<typeof workersControllerGetWorkers>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkersControllerGetWorkers<
  TData = Awaited<ReturnType<typeof workersControllerGetWorkers>>,
  TError = unknown,
>(
  params?: WorkersControllerGetWorkersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof workersControllerGetWorkers>>,
          TError,
          Awaited<ReturnType<typeof workersControllerGetWorkers>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkersControllerGetWorkers<
  TData = Awaited<ReturnType<typeof workersControllerGetWorkers>>,
  TError = unknown,
>(
  params?: WorkersControllerGetWorkersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets all workers with pagination and sorting.
 */

export function useWorkersControllerGetWorkers<
  TData = Awaited<ReturnType<typeof workersControllerGetWorkers>>,
  TError = unknown,
>(
  params?: WorkersControllerGetWorkersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWorkersControllerGetWorkersQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Search assets and targets
 * @summary Search assets and targets
 */
export const searchControllerSearchAssetsTargets = (
  params: SearchControllerSearchAssetsTargetsParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<SearchResponseDto>(
    { url: `/api/search`, method: 'GET', params, signal },
    options,
  );
};

export const getSearchControllerSearchAssetsTargetsQueryKey = (
  params: SearchControllerSearchAssetsTargetsParams,
) => {
  return [`/api/search`, ...(params ? [params] : [])] as const;
};

export const getSearchControllerSearchAssetsTargetsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
    SearchControllerSearchAssetsTargetsParams['page']
  >,
  TError = unknown,
>(
  params: SearchControllerSearchAssetsTargetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
        TError,
        TData,
        QueryKey,
        SearchControllerSearchAssetsTargetsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getSearchControllerSearchAssetsTargetsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
    QueryKey,
    SearchControllerSearchAssetsTargetsParams['page']
  > = ({ signal, pageParam }) =>
    searchControllerSearchAssetsTargets(
      { ...params, page: pageParam || params?.['page'] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
    TError,
    TData,
    QueryKey,
    SearchControllerSearchAssetsTargetsParams['page']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchControllerSearchAssetsTargetsInfiniteQueryResult =
  NonNullable<Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>>;
export type SearchControllerSearchAssetsTargetsInfiniteQueryError = unknown;

export function useSearchControllerSearchAssetsTargetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
    SearchControllerSearchAssetsTargetsParams['page']
  >,
  TError = unknown,
>(
  params: SearchControllerSearchAssetsTargetsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
        TError,
        TData,
        QueryKey,
        SearchControllerSearchAssetsTargetsParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
          TError,
          Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchControllerSearchAssetsTargetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
    SearchControllerSearchAssetsTargetsParams['page']
  >,
  TError = unknown,
>(
  params: SearchControllerSearchAssetsTargetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
        TError,
        TData,
        QueryKey,
        SearchControllerSearchAssetsTargetsParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
          TError,
          Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchControllerSearchAssetsTargetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
    SearchControllerSearchAssetsTargetsParams['page']
  >,
  TError = unknown,
>(
  params: SearchControllerSearchAssetsTargetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
        TError,
        TData,
        QueryKey,
        SearchControllerSearchAssetsTargetsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search assets and targets
 */

export function useSearchControllerSearchAssetsTargetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
    SearchControllerSearchAssetsTargetsParams['page']
  >,
  TError = unknown,
>(
  params: SearchControllerSearchAssetsTargetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
        TError,
        TData,
        QueryKey,
        SearchControllerSearchAssetsTargetsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getSearchControllerSearchAssetsTargetsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSearchControllerSearchAssetsTargetsQueryOptions = <
  TData = Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
  TError = unknown,
>(
  params: SearchControllerSearchAssetsTargetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getSearchControllerSearchAssetsTargetsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>
  > = ({ signal }) =>
    searchControllerSearchAssetsTargets(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchControllerSearchAssetsTargetsQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>
>;
export type SearchControllerSearchAssetsTargetsQueryError = unknown;

export function useSearchControllerSearchAssetsTargets<
  TData = Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
  TError = unknown,
>(
  params: SearchControllerSearchAssetsTargetsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
          TError,
          Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchControllerSearchAssetsTargets<
  TData = Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
  TError = unknown,
>(
  params: SearchControllerSearchAssetsTargetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
          TError,
          Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchControllerSearchAssetsTargets<
  TData = Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
  TError = unknown,
>(
  params: SearchControllerSearchAssetsTargetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search assets and targets
 */

export function useSearchControllerSearchAssetsTargets<
  TData = Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
  TError = unknown,
>(
  params: SearchControllerSearchAssetsTargetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchControllerSearchAssetsTargets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSearchControllerSearchAssetsTargetsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get search history
 * @summary Get search history
 */
export const searchControllerGetSearchHistory = (
  params: SearchControllerGetSearchHistoryParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyGetSearchHistoryResponseDtoDto>(
    { url: `/api/search/histories`, method: 'GET', params, signal },
    options,
  );
};

export const getSearchControllerGetSearchHistoryQueryKey = (
  params: SearchControllerGetSearchHistoryParams,
) => {
  return [`/api/search/histories`, ...(params ? [params] : [])] as const;
};

export const getSearchControllerGetSearchHistoryInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
    SearchControllerGetSearchHistoryParams['page']
  >,
  TError = unknown,
>(
  params: SearchControllerGetSearchHistoryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
        TError,
        TData,
        QueryKey,
        SearchControllerGetSearchHistoryParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getSearchControllerGetSearchHistoryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
    QueryKey,
    SearchControllerGetSearchHistoryParams['page']
  > = ({ signal, pageParam }) =>
    searchControllerGetSearchHistory(
      { ...params, page: pageParam || params?.['page'] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
    TError,
    TData,
    QueryKey,
    SearchControllerGetSearchHistoryParams['page']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchControllerGetSearchHistoryInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchControllerGetSearchHistory>>
>;
export type SearchControllerGetSearchHistoryInfiniteQueryError = unknown;

export function useSearchControllerGetSearchHistoryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
    SearchControllerGetSearchHistoryParams['page']
  >,
  TError = unknown,
>(
  params: SearchControllerGetSearchHistoryParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
        TError,
        TData,
        QueryKey,
        SearchControllerGetSearchHistoryParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
          TError,
          Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchControllerGetSearchHistoryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
    SearchControllerGetSearchHistoryParams['page']
  >,
  TError = unknown,
>(
  params: SearchControllerGetSearchHistoryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
        TError,
        TData,
        QueryKey,
        SearchControllerGetSearchHistoryParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
          TError,
          Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchControllerGetSearchHistoryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
    SearchControllerGetSearchHistoryParams['page']
  >,
  TError = unknown,
>(
  params: SearchControllerGetSearchHistoryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
        TError,
        TData,
        QueryKey,
        SearchControllerGetSearchHistoryParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get search history
 */

export function useSearchControllerGetSearchHistoryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
    SearchControllerGetSearchHistoryParams['page']
  >,
  TError = unknown,
>(
  params: SearchControllerGetSearchHistoryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
        TError,
        TData,
        QueryKey,
        SearchControllerGetSearchHistoryParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSearchControllerGetSearchHistoryInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSearchControllerGetSearchHistoryQueryOptions = <
  TData = Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
  TError = unknown,
>(
  params: SearchControllerGetSearchHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getSearchControllerGetSearchHistoryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchControllerGetSearchHistory>>
  > = ({ signal }) =>
    searchControllerGetSearchHistory(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchControllerGetSearchHistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchControllerGetSearchHistory>>
>;
export type SearchControllerGetSearchHistoryQueryError = unknown;

export function useSearchControllerGetSearchHistory<
  TData = Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
  TError = unknown,
>(
  params: SearchControllerGetSearchHistoryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
          TError,
          Awaited<ReturnType<typeof searchControllerGetSearchHistory>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchControllerGetSearchHistory<
  TData = Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
  TError = unknown,
>(
  params: SearchControllerGetSearchHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
          TError,
          Awaited<ReturnType<typeof searchControllerGetSearchHistory>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchControllerGetSearchHistory<
  TData = Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
  TError = unknown,
>(
  params: SearchControllerGetSearchHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get search history
 */

export function useSearchControllerGetSearchHistory<
  TData = Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
  TError = unknown,
>(
  params: SearchControllerGetSearchHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchControllerGetSearchHistory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSearchControllerGetSearchHistoryQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Delete all search history entries for the user
 * @summary Delete all search history
 */
export const searchControllerDeleteAllSearchHistories = (
  options?: SecondParameter<typeof orvalClient>,
) => {
  return orvalClient<DeleteResponseDto>(
    { url: `/api/search/histories`, method: 'DELETE' },
    options,
  );
};

export const getSearchControllerDeleteAllSearchHistoriesMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof searchControllerDeleteAllSearchHistories>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof searchControllerDeleteAllSearchHistories>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['searchControllerDeleteAllSearchHistories'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof searchControllerDeleteAllSearchHistories>>,
    void
  > = () => {
    return searchControllerDeleteAllSearchHistories(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SearchControllerDeleteAllSearchHistoriesMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof searchControllerDeleteAllSearchHistories>>
  >;

export type SearchControllerDeleteAllSearchHistoriesMutationError = unknown;

/**
 * @summary Delete all search history
 */
export const useSearchControllerDeleteAllSearchHistories = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof searchControllerDeleteAllSearchHistories>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof searchControllerDeleteAllSearchHistories>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getSearchControllerDeleteAllSearchHistoriesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Delete a specific search history entry by its ID
 * @summary Delete search history by ID
 */
export const searchControllerDeleteSearchHistory = (
  id: string,
  options?: SecondParameter<typeof orvalClient>,
) => {
  return orvalClient<DeleteResponseDto>(
    { url: `/api/search/histories/${id}`, method: 'DELETE' },
    options,
  );
};

export const getSearchControllerDeleteSearchHistoryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof searchControllerDeleteSearchHistory>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof searchControllerDeleteSearchHistory>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['searchControllerDeleteSearchHistory'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof searchControllerDeleteSearchHistory>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return searchControllerDeleteSearchHistory(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SearchControllerDeleteSearchHistoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof searchControllerDeleteSearchHistory>>
>;

export type SearchControllerDeleteSearchHistoryMutationError = unknown;

/**
 * @summary Delete search history by ID
 */
export const useSearchControllerDeleteSearchHistory = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof searchControllerDeleteSearchHistory>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof searchControllerDeleteSearchHistory>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getSearchControllerDeleteSearchHistoryMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Creates a new tool with the provided information.
 * @summary Create a new tool
 */
export const toolsControllerCreateTool = (
  createToolDto: CreateToolDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<Tool>(
    {
      url: `/api/tools`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createToolDto,
      signal,
    },
    options,
  );
};

export const getToolsControllerCreateToolMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof toolsControllerCreateTool>>,
    TError,
    { data: CreateToolDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof toolsControllerCreateTool>>,
  TError,
  { data: CreateToolDto },
  TContext
> => {
  const mutationKey = ['toolsControllerCreateTool'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof toolsControllerCreateTool>>,
    { data: CreateToolDto }
  > = (props) => {
    const { data } = props ?? {};

    return toolsControllerCreateTool(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ToolsControllerCreateToolMutationResult = NonNullable<
  Awaited<ReturnType<typeof toolsControllerCreateTool>>
>;
export type ToolsControllerCreateToolMutationBody = CreateToolDto;
export type ToolsControllerCreateToolMutationError = unknown;

/**
 * @summary Create a new tool
 */
export const useToolsControllerCreateTool = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof toolsControllerCreateTool>>,
      TError,
      { data: CreateToolDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof toolsControllerCreateTool>>,
  TError,
  { data: CreateToolDto },
  TContext
> => {
  const mutationOptions = getToolsControllerCreateToolMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieves a list of tools with pagination.
 * @summary Get tools
 */
export const toolsControllerGetManyTools = (
  params?: ToolsControllerGetManyToolsParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyToolDto>(
    { url: `/api/tools`, method: 'GET', params, signal },
    options,
  );
};

export const getToolsControllerGetManyToolsQueryKey = (
  params?: ToolsControllerGetManyToolsParams,
) => {
  return [`/api/tools`, ...(params ? [params] : [])] as const;
};

export const getToolsControllerGetManyToolsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
    ToolsControllerGetManyToolsParams['page']
  >,
  TError = unknown,
>(
  params?: ToolsControllerGetManyToolsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
        TError,
        TData,
        QueryKey,
        ToolsControllerGetManyToolsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getToolsControllerGetManyToolsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
    QueryKey,
    ToolsControllerGetManyToolsParams['page']
  > = ({ signal, pageParam }) =>
    toolsControllerGetManyTools(
      { ...params, page: pageParam || params?.['page'] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
    TError,
    TData,
    QueryKey,
    ToolsControllerGetManyToolsParams['page']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ToolsControllerGetManyToolsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof toolsControllerGetManyTools>>
>;
export type ToolsControllerGetManyToolsInfiniteQueryError = unknown;

export function useToolsControllerGetManyToolsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
    ToolsControllerGetManyToolsParams['page']
  >,
  TError = unknown,
>(
  params: undefined | ToolsControllerGetManyToolsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
        TError,
        TData,
        QueryKey,
        ToolsControllerGetManyToolsParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetManyToolsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
    ToolsControllerGetManyToolsParams['page']
  >,
  TError = unknown,
>(
  params?: ToolsControllerGetManyToolsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
        TError,
        TData,
        QueryKey,
        ToolsControllerGetManyToolsParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetManyToolsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
    ToolsControllerGetManyToolsParams['page']
  >,
  TError = unknown,
>(
  params?: ToolsControllerGetManyToolsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
        TError,
        TData,
        QueryKey,
        ToolsControllerGetManyToolsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get tools
 */

export function useToolsControllerGetManyToolsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
    ToolsControllerGetManyToolsParams['page']
  >,
  TError = unknown,
>(
  params?: ToolsControllerGetManyToolsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
        TError,
        TData,
        QueryKey,
        ToolsControllerGetManyToolsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getToolsControllerGetManyToolsInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getToolsControllerGetManyToolsQueryOptions = <
  TData = Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
  TError = unknown,
>(
  params?: ToolsControllerGetManyToolsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getToolsControllerGetManyToolsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof toolsControllerGetManyTools>>
  > = ({ signal }) =>
    toolsControllerGetManyTools(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ToolsControllerGetManyToolsQueryResult = NonNullable<
  Awaited<ReturnType<typeof toolsControllerGetManyTools>>
>;
export type ToolsControllerGetManyToolsQueryError = unknown;

export function useToolsControllerGetManyTools<
  TData = Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
  TError = unknown,
>(
  params: undefined | ToolsControllerGetManyToolsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetManyTools>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetManyTools<
  TData = Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
  TError = unknown,
>(
  params?: ToolsControllerGetManyToolsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetManyTools>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetManyTools<
  TData = Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
  TError = unknown,
>(
  params?: ToolsControllerGetManyToolsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get tools
 */

export function useToolsControllerGetManyTools<
  TData = Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
  TError = unknown,
>(
  params?: ToolsControllerGetManyToolsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetManyTools>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getToolsControllerGetManyToolsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Runs a tool with the provided information.
 * @summary Run a tool
 */
export const toolsControllerRunTool = (
  id: string,
  runToolDto: RunToolDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<DefaultMessageResponseDto>(
    {
      url: `/api/tools/${id}/run`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: runToolDto,
      signal,
    },
    options,
  );
};

export const getToolsControllerRunToolMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof toolsControllerRunTool>>,
    TError,
    { id: string; data: RunToolDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof toolsControllerRunTool>>,
  TError,
  { id: string; data: RunToolDto },
  TContext
> => {
  const mutationKey = ['toolsControllerRunTool'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof toolsControllerRunTool>>,
    { id: string; data: RunToolDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return toolsControllerRunTool(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ToolsControllerRunToolMutationResult = NonNullable<
  Awaited<ReturnType<typeof toolsControllerRunTool>>
>;
export type ToolsControllerRunToolMutationBody = RunToolDto;
export type ToolsControllerRunToolMutationError = unknown;

/**
 * @summary Run a tool
 */
export const useToolsControllerRunTool = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof toolsControllerRunTool>>,
      TError,
      { id: string; data: RunToolDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof toolsControllerRunTool>>,
  TError,
  { id: string; data: RunToolDto },
  TContext
> => {
  const mutationOptions = getToolsControllerRunToolMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Adds a tool to a specific workspace.
 * @summary Add tool to workspace
 */
export const toolsControllerAddToolToWorkspace = (
  addToolToWorkspaceDto: AddToolToWorkspaceDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<WorkspaceTool>(
    {
      url: `/api/tools/add-to-workspace`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: addToolToWorkspaceDto,
      signal,
    },
    options,
  );
};

export const getToolsControllerAddToolToWorkspaceMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof toolsControllerAddToolToWorkspace>>,
    TError,
    { data: AddToolToWorkspaceDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof toolsControllerAddToolToWorkspace>>,
  TError,
  { data: AddToolToWorkspaceDto },
  TContext
> => {
  const mutationKey = ['toolsControllerAddToolToWorkspace'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof toolsControllerAddToolToWorkspace>>,
    { data: AddToolToWorkspaceDto }
  > = (props) => {
    const { data } = props ?? {};

    return toolsControllerAddToolToWorkspace(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ToolsControllerAddToolToWorkspaceMutationResult = NonNullable<
  Awaited<ReturnType<typeof toolsControllerAddToolToWorkspace>>
>;
export type ToolsControllerAddToolToWorkspaceMutationBody =
  AddToolToWorkspaceDto;
export type ToolsControllerAddToolToWorkspaceMutationError = unknown;

/**
 * @summary Add tool to workspace
 */
export const useToolsControllerAddToolToWorkspace = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof toolsControllerAddToolToWorkspace>>,
      TError,
      { data: AddToolToWorkspaceDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof toolsControllerAddToolToWorkspace>>,
  TError,
  { data: AddToolToWorkspaceDto },
  TContext
> => {
  const mutationOptions =
    getToolsControllerAddToolToWorkspaceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Installs a tool to a specific workspace, checking for duplicates before insertion.
 * @summary Install tool
 */
export const toolsControllerInstallTool = (
  installToolDto: InstallToolDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<WorkspaceTool>(
    {
      url: `/api/tools/install`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: installToolDto,
      signal,
    },
    options,
  );
};

export const getToolsControllerInstallToolMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof toolsControllerInstallTool>>,
    TError,
    { data: InstallToolDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof toolsControllerInstallTool>>,
  TError,
  { data: InstallToolDto },
  TContext
> => {
  const mutationKey = ['toolsControllerInstallTool'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof toolsControllerInstallTool>>,
    { data: InstallToolDto }
  > = (props) => {
    const { data } = props ?? {};

    return toolsControllerInstallTool(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ToolsControllerInstallToolMutationResult = NonNullable<
  Awaited<ReturnType<typeof toolsControllerInstallTool>>
>;
export type ToolsControllerInstallToolMutationBody = InstallToolDto;
export type ToolsControllerInstallToolMutationError = unknown;

/**
 * @summary Install tool
 */
export const useToolsControllerInstallTool = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof toolsControllerInstallTool>>,
      TError,
      { data: InstallToolDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof toolsControllerInstallTool>>,
  TError,
  { data: InstallToolDto },
  TContext
> => {
  const mutationOptions = getToolsControllerInstallToolMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Uninstalls a tool from a specific workspace by removing the record from workspace_tools table.
 * @summary Uninstall tool
 */
export const toolsControllerUninstallTool = (
  installToolDto: InstallToolDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<DefaultMessageResponseDto>(
    {
      url: `/api/tools/uninstall`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: installToolDto,
      signal,
    },
    options,
  );
};

export const getToolsControllerUninstallToolMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof toolsControllerUninstallTool>>,
    TError,
    { data: InstallToolDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof toolsControllerUninstallTool>>,
  TError,
  { data: InstallToolDto },
  TContext
> => {
  const mutationKey = ['toolsControllerUninstallTool'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof toolsControllerUninstallTool>>,
    { data: InstallToolDto }
  > = (props) => {
    const { data } = props ?? {};

    return toolsControllerUninstallTool(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ToolsControllerUninstallToolMutationResult = NonNullable<
  Awaited<ReturnType<typeof toolsControllerUninstallTool>>
>;
export type ToolsControllerUninstallToolMutationBody = InstallToolDto;
export type ToolsControllerUninstallToolMutationError = unknown;

/**
 * @summary Uninstall tool
 */
export const useToolsControllerUninstallTool = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof toolsControllerUninstallTool>>,
      TError,
      { data: InstallToolDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof toolsControllerUninstallTool>>,
  TError,
  { data: InstallToolDto },
  TContext
> => {
  const mutationOptions =
    getToolsControllerUninstallToolMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Get built-in tools
 */
export const toolsControllerGetBuiltInTools = (
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyToolDto>(
    { url: `/api/tools/built-in-tools`, method: 'GET', signal },
    options,
  );
};

export const getToolsControllerGetBuiltInToolsQueryKey = () => {
  return [`/api/tools/built-in-tools`] as const;
};

export const getToolsControllerGetBuiltInToolsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getToolsControllerGetBuiltInToolsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>
  > = ({ signal }) => toolsControllerGetBuiltInTools(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ToolsControllerGetBuiltInToolsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>
>;
export type ToolsControllerGetBuiltInToolsInfiniteQueryError = unknown;

export function useToolsControllerGetBuiltInToolsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>
  >,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetBuiltInToolsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetBuiltInToolsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get built-in tools
 */

export function useToolsControllerGetBuiltInToolsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getToolsControllerGetBuiltInToolsInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getToolsControllerGetBuiltInToolsQueryOptions = <
  TData = Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getToolsControllerGetBuiltInToolsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>
  > = ({ signal }) => toolsControllerGetBuiltInTools(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ToolsControllerGetBuiltInToolsQueryResult = NonNullable<
  Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>
>;
export type ToolsControllerGetBuiltInToolsQueryError = unknown;

export function useToolsControllerGetBuiltInTools<
  TData = Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetBuiltInTools<
  TData = Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetBuiltInTools<
  TData = Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get built-in tools
 */

export function useToolsControllerGetBuiltInTools<
  TData = Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetBuiltInTools>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getToolsControllerGetBuiltInToolsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves a list of installed tools for a specific workspace, including built-in tools.
 * @summary Get installed tools for a workspace
 */
export const toolsControllerGetInstalledTools = (
  params: ToolsControllerGetInstalledToolsParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyToolDto>(
    { url: `/api/tools/installed`, method: 'GET', params, signal },
    options,
  );
};

export const getToolsControllerGetInstalledToolsQueryKey = (
  params: ToolsControllerGetInstalledToolsParams,
) => {
  return [`/api/tools/installed`, ...(params ? [params] : [])] as const;
};

export const getToolsControllerGetInstalledToolsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
    ToolsControllerGetInstalledToolsParams['page']
  >,
  TError = unknown,
>(
  params: ToolsControllerGetInstalledToolsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
        TError,
        TData,
        QueryKey,
        ToolsControllerGetInstalledToolsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getToolsControllerGetInstalledToolsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
    QueryKey,
    ToolsControllerGetInstalledToolsParams['page']
  > = ({ signal, pageParam }) =>
    toolsControllerGetInstalledTools(
      { ...params, page: pageParam || params?.['page'] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
    TError,
    TData,
    QueryKey,
    ToolsControllerGetInstalledToolsParams['page']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ToolsControllerGetInstalledToolsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>
>;
export type ToolsControllerGetInstalledToolsInfiniteQueryError = unknown;

export function useToolsControllerGetInstalledToolsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
    ToolsControllerGetInstalledToolsParams['page']
  >,
  TError = unknown,
>(
  params: ToolsControllerGetInstalledToolsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
        TError,
        TData,
        QueryKey,
        ToolsControllerGetInstalledToolsParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetInstalledToolsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
    ToolsControllerGetInstalledToolsParams['page']
  >,
  TError = unknown,
>(
  params: ToolsControllerGetInstalledToolsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
        TError,
        TData,
        QueryKey,
        ToolsControllerGetInstalledToolsParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetInstalledToolsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
    ToolsControllerGetInstalledToolsParams['page']
  >,
  TError = unknown,
>(
  params: ToolsControllerGetInstalledToolsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
        TError,
        TData,
        QueryKey,
        ToolsControllerGetInstalledToolsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get installed tools for a workspace
 */

export function useToolsControllerGetInstalledToolsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
    ToolsControllerGetInstalledToolsParams['page']
  >,
  TError = unknown,
>(
  params: ToolsControllerGetInstalledToolsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
        TError,
        TData,
        QueryKey,
        ToolsControllerGetInstalledToolsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getToolsControllerGetInstalledToolsInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getToolsControllerGetInstalledToolsQueryOptions = <
  TData = Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
  TError = unknown,
>(
  params: ToolsControllerGetInstalledToolsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getToolsControllerGetInstalledToolsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>
  > = ({ signal }) =>
    toolsControllerGetInstalledTools(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ToolsControllerGetInstalledToolsQueryResult = NonNullable<
  Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>
>;
export type ToolsControllerGetInstalledToolsQueryError = unknown;

export function useToolsControllerGetInstalledTools<
  TData = Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
  TError = unknown,
>(
  params: ToolsControllerGetInstalledToolsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetInstalledTools<
  TData = Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
  TError = unknown,
>(
  params: ToolsControllerGetInstalledToolsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetInstalledTools<
  TData = Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
  TError = unknown,
>(
  params: ToolsControllerGetInstalledToolsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get installed tools for a workspace
 */

export function useToolsControllerGetInstalledTools<
  TData = Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
  TError = unknown,
>(
  params: ToolsControllerGetInstalledToolsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetInstalledTools>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getToolsControllerGetInstalledToolsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves a tool by its unique identifier.
 * @summary Get tool by ID
 */
export const toolsControllerGetToolById = (
  id: string,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<Tool>(
    { url: `/api/tools/${id}`, method: 'GET', signal },
    options,
  );
};

export const getToolsControllerGetToolByIdQueryKey = (id: string) => {
  return [`/api/tools/${id}`] as const;
};

export const getToolsControllerGetToolByIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof toolsControllerGetToolById>>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getToolsControllerGetToolByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof toolsControllerGetToolById>>
  > = ({ signal }) => toolsControllerGetToolById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof toolsControllerGetToolById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ToolsControllerGetToolByIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof toolsControllerGetToolById>>
>;
export type ToolsControllerGetToolByIdInfiniteQueryError = unknown;

export function useToolsControllerGetToolByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof toolsControllerGetToolById>>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetToolById>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetToolById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetToolByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof toolsControllerGetToolById>>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetToolById>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetToolById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetToolByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof toolsControllerGetToolById>>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get tool by ID
 */

export function useToolsControllerGetToolByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof toolsControllerGetToolById>>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getToolsControllerGetToolByIdInfiniteQueryOptions(
    id,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getToolsControllerGetToolByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof toolsControllerGetToolById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getToolsControllerGetToolByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof toolsControllerGetToolById>>
  > = ({ signal }) => toolsControllerGetToolById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof toolsControllerGetToolById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ToolsControllerGetToolByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof toolsControllerGetToolById>>
>;
export type ToolsControllerGetToolByIdQueryError = unknown;

export function useToolsControllerGetToolById<
  TData = Awaited<ReturnType<typeof toolsControllerGetToolById>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetToolById>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetToolById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetToolById<
  TData = Awaited<ReturnType<typeof toolsControllerGetToolById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetToolById>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetToolById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetToolById<
  TData = Awaited<ReturnType<typeof toolsControllerGetToolById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get tool by ID
 */

export function useToolsControllerGetToolById<
  TData = Awaited<ReturnType<typeof toolsControllerGetToolById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getToolsControllerGetToolByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves the API key for a tool.
 * @summary Get tool API key
 */
export const toolsControllerGetToolApiKey = (
  id: string,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetApiKeyResponseDto>(
    { url: `/api/tools/${id}/api-key`, method: 'GET', signal },
    options,
  );
};

export const getToolsControllerGetToolApiKeyQueryKey = (id: string) => {
  return [`/api/tools/${id}/api-key`] as const;
};

export const getToolsControllerGetToolApiKeyInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getToolsControllerGetToolApiKeyQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>
  > = ({ signal }) => toolsControllerGetToolApiKey(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ToolsControllerGetToolApiKeyInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>
>;
export type ToolsControllerGetToolApiKeyInfiniteQueryError = unknown;

export function useToolsControllerGetToolApiKeyInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>
  >,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetToolApiKeyInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetToolApiKeyInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get tool API key
 */

export function useToolsControllerGetToolApiKeyInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getToolsControllerGetToolApiKeyInfiniteQueryOptions(
    id,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getToolsControllerGetToolApiKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getToolsControllerGetToolApiKeyQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>
  > = ({ signal }) => toolsControllerGetToolApiKey(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ToolsControllerGetToolApiKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>
>;
export type ToolsControllerGetToolApiKeyQueryError = unknown;

export function useToolsControllerGetToolApiKey<
  TData = Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetToolApiKey<
  TData = Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
          TError,
          Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToolsControllerGetToolApiKey<
  TData = Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get tool API key
 */

export function useToolsControllerGetToolApiKey<
  TData = Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof toolsControllerGetToolApiKey>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getToolsControllerGetToolApiKeyQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Regenerates the API key for a tool.
 * @summary Rotate tool API key
 */
export const toolsControllerRotateToolApiKey = (
  id: string,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetApiKeyResponseDto>(
    { url: `/api/tools/${id}/api-key/rotate`, method: 'POST', signal },
    options,
  );
};

export const getToolsControllerRotateToolApiKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof toolsControllerRotateToolApiKey>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof toolsControllerRotateToolApiKey>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['toolsControllerRotateToolApiKey'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof toolsControllerRotateToolApiKey>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return toolsControllerRotateToolApiKey(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ToolsControllerRotateToolApiKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof toolsControllerRotateToolApiKey>>
>;

export type ToolsControllerRotateToolApiKeyMutationError = unknown;

/**
 * @summary Rotate tool API key
 */
export const useToolsControllerRotateToolApiKey = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof toolsControllerRotateToolApiKey>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof toolsControllerRotateToolApiKey>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getToolsControllerRotateToolApiKeyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const vulnerabilitiesControllerScan = (
  scanDto: ScanDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<void>(
    {
      url: `/api/vulnerabilities/scan`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: scanDto,
      signal,
    },
    options,
  );
};

export const getVulnerabilitiesControllerScanMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof vulnerabilitiesControllerScan>>,
    TError,
    { data: ScanDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof vulnerabilitiesControllerScan>>,
  TError,
  { data: ScanDto },
  TContext
> => {
  const mutationKey = ['vulnerabilitiesControllerScan'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof vulnerabilitiesControllerScan>>,
    { data: ScanDto }
  > = (props) => {
    const { data } = props ?? {};

    return vulnerabilitiesControllerScan(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type VulnerabilitiesControllerScanMutationResult = NonNullable<
  Awaited<ReturnType<typeof vulnerabilitiesControllerScan>>
>;
export type VulnerabilitiesControllerScanMutationBody = ScanDto;
export type VulnerabilitiesControllerScanMutationError = unknown;

export const useVulnerabilitiesControllerScan = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof vulnerabilitiesControllerScan>>,
      TError,
      { data: ScanDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof vulnerabilitiesControllerScan>>,
  TError,
  { data: ScanDto },
  TContext
> => {
  const mutationOptions =
    getVulnerabilitiesControllerScanMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Get vulnerabilities
 * @summary Get vulnerabilities
 */
export const vulnerabilitiesControllerGetVulnerabilities = (
  params: VulnerabilitiesControllerGetVulnerabilitiesParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyVulnerabilityDto>(
    { url: `/api/vulnerabilities`, method: 'GET', params, signal },
    options,
  );
};

export const getVulnerabilitiesControllerGetVulnerabilitiesQueryKey = (
  params: VulnerabilitiesControllerGetVulnerabilitiesParams,
) => {
  return [`/api/vulnerabilities`, ...(params ? [params] : [])] as const;
};

export const getVulnerabilitiesControllerGetVulnerabilitiesInfiniteQueryOptions =
  <
    TData = InfiniteData<
      Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>,
      VulnerabilitiesControllerGetVulnerabilitiesParams['page']
    >,
    TError = unknown,
  >(
    params: VulnerabilitiesControllerGetVulnerabilitiesParams,
    options?: {
      query?: Partial<
        UseInfiniteQueryOptions<
          Awaited<
            ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>
          >,
          TError,
          TData,
          QueryKey,
          VulnerabilitiesControllerGetVulnerabilitiesParams['page']
        >
      >;
      request?: SecondParameter<typeof orvalClient>;
    },
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getVulnerabilitiesControllerGetVulnerabilitiesQueryKey(params);

    const queryFn: QueryFunction<
      Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>,
      QueryKey,
      VulnerabilitiesControllerGetVulnerabilitiesParams['page']
    > = ({ signal, pageParam }) =>
      vulnerabilitiesControllerGetVulnerabilities(
        { ...params, page: pageParam || params?.['page'] },
        requestOptions,
        signal,
      );

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>,
      TError,
      TData,
      QueryKey,
      VulnerabilitiesControllerGetVulnerabilitiesParams['page']
    > & { queryKey: DataTag<QueryKey, TData, TError> };
  };

export type VulnerabilitiesControllerGetVulnerabilitiesInfiniteQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>
  >;
export type VulnerabilitiesControllerGetVulnerabilitiesInfiniteQueryError =
  unknown;

export function useVulnerabilitiesControllerGetVulnerabilitiesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>,
    VulnerabilitiesControllerGetVulnerabilitiesParams['page']
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>,
        TError,
        TData,
        QueryKey,
        VulnerabilitiesControllerGetVulnerabilitiesParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>
          >,
          TError,
          Awaited<
            ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>
          >,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVulnerabilitiesControllerGetVulnerabilitiesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>,
    VulnerabilitiesControllerGetVulnerabilitiesParams['page']
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>,
        TError,
        TData,
        QueryKey,
        VulnerabilitiesControllerGetVulnerabilitiesParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>
          >,
          TError,
          Awaited<
            ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>
          >,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVulnerabilitiesControllerGetVulnerabilitiesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>,
    VulnerabilitiesControllerGetVulnerabilitiesParams['page']
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>,
        TError,
        TData,
        QueryKey,
        VulnerabilitiesControllerGetVulnerabilitiesParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get vulnerabilities
 */

export function useVulnerabilitiesControllerGetVulnerabilitiesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>,
    VulnerabilitiesControllerGetVulnerabilitiesParams['page']
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>,
        TError,
        TData,
        QueryKey,
        VulnerabilitiesControllerGetVulnerabilitiesParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getVulnerabilitiesControllerGetVulnerabilitiesInfiniteQueryOptions(
      params,
      options,
    );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getVulnerabilitiesControllerGetVulnerabilitiesQueryOptions = <
  TData = Awaited<
    ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getVulnerabilitiesControllerGetVulnerabilitiesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>
  > = ({ signal }) =>
    vulnerabilitiesControllerGetVulnerabilities(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VulnerabilitiesControllerGetVulnerabilitiesQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>
  >;
export type VulnerabilitiesControllerGetVulnerabilitiesQueryError = unknown;

export function useVulnerabilitiesControllerGetVulnerabilities<
  TData = Awaited<
    ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>
          >,
          TError,
          Awaited<
            ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>
          >
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVulnerabilitiesControllerGetVulnerabilities<
  TData = Awaited<
    ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>
          >,
          TError,
          Awaited<
            ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>
          >
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVulnerabilitiesControllerGetVulnerabilities<
  TData = Awaited<
    ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get vulnerabilities
 */

export function useVulnerabilitiesControllerGetVulnerabilities<
  TData = Awaited<
    ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof vulnerabilitiesControllerGetVulnerabilities>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getVulnerabilitiesControllerGetVulnerabilitiesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get count of vulnerabilities by severity level
 * @summary Get vulnerabilities statistics
 */
export const vulnerabilitiesControllerGetVulnerabilitiesStatistics = (
  params: VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetVulnerabilitiesStatisticsResponseDto>(
    { url: `/api/vulnerabilities/statistics`, method: 'GET', params, signal },
    options,
  );
};

export const getVulnerabilitiesControllerGetVulnerabilitiesStatisticsQueryKey =
  (params: VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams) => {
    return [
      `/api/vulnerabilities/statistics`,
      ...(params ? [params] : []),
    ] as const;
  };

export const getVulnerabilitiesControllerGetVulnerabilitiesStatisticsInfiniteQueryOptions =
  <
    TData = InfiniteData<
      Awaited<
        ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics>
      >,
      VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams['page']
    >,
    TError = unknown,
  >(
    params: VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams,
    options?: {
      query?: Partial<
        UseInfiniteQueryOptions<
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics
            >
          >,
          TError,
          TData,
          QueryKey,
          VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams['page']
        >
      >;
      request?: SecondParameter<typeof orvalClient>;
    },
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getVulnerabilitiesControllerGetVulnerabilitiesStatisticsQueryKey(params);

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics>
      >,
      QueryKey,
      VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams['page']
    > = ({ signal, pageParam }) =>
      vulnerabilitiesControllerGetVulnerabilitiesStatistics(
        { ...params, page: pageParam || params?.['page'] },
        requestOptions,
        signal,
      );

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
      Awaited<
        ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics>
      >,
      TError,
      TData,
      QueryKey,
      VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams['page']
    > & { queryKey: DataTag<QueryKey, TData, TError> };
  };

export type VulnerabilitiesControllerGetVulnerabilitiesStatisticsInfiniteQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics>
    >
  >;
export type VulnerabilitiesControllerGetVulnerabilitiesStatisticsInfiniteQueryError =
  unknown;

export function useVulnerabilitiesControllerGetVulnerabilitiesStatisticsInfinite<
  TData = InfiniteData<
    Awaited<
      ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics>
    >,
    VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams['page']
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<
          ReturnType<
            typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics
          >
        >,
        TError,
        TData,
        QueryKey,
        VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics
            >
          >,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVulnerabilitiesControllerGetVulnerabilitiesStatisticsInfinite<
  TData = InfiniteData<
    Awaited<
      ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics>
    >,
    VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams['page']
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<
          ReturnType<
            typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics
          >
        >,
        TError,
        TData,
        QueryKey,
        VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics
            >
          >,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVulnerabilitiesControllerGetVulnerabilitiesStatisticsInfinite<
  TData = InfiniteData<
    Awaited<
      ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics>
    >,
    VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams['page']
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<
          ReturnType<
            typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics
          >
        >,
        TError,
        TData,
        QueryKey,
        VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get vulnerabilities statistics
 */

export function useVulnerabilitiesControllerGetVulnerabilitiesStatisticsInfinite<
  TData = InfiniteData<
    Awaited<
      ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics>
    >,
    VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams['page']
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<
          ReturnType<
            typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics
          >
        >,
        TError,
        TData,
        QueryKey,
        VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getVulnerabilitiesControllerGetVulnerabilitiesStatisticsInfiniteQueryOptions(
      params,
      options,
    );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getVulnerabilitiesControllerGetVulnerabilitiesStatisticsQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics>
    >,
    TError = unknown,
  >(
    params: VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics
            >
          >,
          TError,
          TData
        >
      >;
      request?: SecondParameter<typeof orvalClient>;
    },
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getVulnerabilitiesControllerGetVulnerabilitiesStatisticsQueryKey(params);

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics>
      >
    > = ({ signal }) =>
      vulnerabilitiesControllerGetVulnerabilitiesStatistics(
        params,
        requestOptions,
        signal,
      );

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
      Awaited<
        ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics>
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
  };

export type VulnerabilitiesControllerGetVulnerabilitiesStatisticsQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics>
    >
  >;
export type VulnerabilitiesControllerGetVulnerabilitiesStatisticsQueryError =
  unknown;

export function useVulnerabilitiesControllerGetVulnerabilitiesStatistics<
  TData = Awaited<
    ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics>
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics
            >
          >
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVulnerabilitiesControllerGetVulnerabilitiesStatistics<
  TData = Awaited<
    ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics>
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics
            >
          >
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVulnerabilitiesControllerGetVulnerabilitiesStatistics<
  TData = Awaited<
    ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics>
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics
          >
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get vulnerabilities statistics
 */

export function useVulnerabilitiesControllerGetVulnerabilitiesStatistics<
  TData = Awaited<
    ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics>
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesStatisticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof vulnerabilitiesControllerGetVulnerabilitiesStatistics
          >
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getVulnerabilitiesControllerGetVulnerabilitiesStatisticsQueryOptions(
      params,
      options,
    );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get count of vulnerabilities by severity level based on workspaceId -> target -> assets -> vuls relation path
 * @summary Get vulnerabilities severity counts
 */
export const vulnerabilitiesControllerGetVulnerabilitiesSeverity = (
  params: VulnerabilitiesControllerGetVulnerabilitiesSeverityParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetVulnerabilitiesSeverityResponseDto>(
    { url: `/api/vulnerabilities/severity`, method: 'GET', params, signal },
    options,
  );
};

export const getVulnerabilitiesControllerGetVulnerabilitiesSeverityQueryKey = (
  params: VulnerabilitiesControllerGetVulnerabilitiesSeverityParams,
) => {
  return [
    `/api/vulnerabilities/severity`,
    ...(params ? [params] : []),
  ] as const;
};

export const getVulnerabilitiesControllerGetVulnerabilitiesSeverityInfiniteQueryOptions =
  <
    TData = InfiniteData<
      Awaited<
        ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
      >,
      VulnerabilitiesControllerGetVulnerabilitiesSeverityParams['page']
    >,
    TError = unknown,
  >(
    params: VulnerabilitiesControllerGetVulnerabilitiesSeverityParams,
    options?: {
      query?: Partial<
        UseInfiniteQueryOptions<
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity
            >
          >,
          TError,
          TData,
          QueryKey,
          VulnerabilitiesControllerGetVulnerabilitiesSeverityParams['page']
        >
      >;
      request?: SecondParameter<typeof orvalClient>;
    },
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getVulnerabilitiesControllerGetVulnerabilitiesSeverityQueryKey(params);

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
      >,
      QueryKey,
      VulnerabilitiesControllerGetVulnerabilitiesSeverityParams['page']
    > = ({ signal, pageParam }) =>
      vulnerabilitiesControllerGetVulnerabilitiesSeverity(
        { ...params, page: pageParam || params?.['page'] },
        requestOptions,
        signal,
      );

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
      Awaited<
        ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
      >,
      TError,
      TData,
      QueryKey,
      VulnerabilitiesControllerGetVulnerabilitiesSeverityParams['page']
    > & { queryKey: DataTag<QueryKey, TData, TError> };
  };

export type VulnerabilitiesControllerGetVulnerabilitiesSeverityInfiniteQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
    >
  >;
export type VulnerabilitiesControllerGetVulnerabilitiesSeverityInfiniteQueryError =
  unknown;

export function useVulnerabilitiesControllerGetVulnerabilitiesSeverityInfinite<
  TData = InfiniteData<
    Awaited<
      ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
    >,
    VulnerabilitiesControllerGetVulnerabilitiesSeverityParams['page']
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesSeverityParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<
          ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
        >,
        TError,
        TData,
        QueryKey,
        VulnerabilitiesControllerGetVulnerabilitiesSeverityParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity
            >
          >,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVulnerabilitiesControllerGetVulnerabilitiesSeverityInfinite<
  TData = InfiniteData<
    Awaited<
      ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
    >,
    VulnerabilitiesControllerGetVulnerabilitiesSeverityParams['page']
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesSeverityParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<
          ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
        >,
        TError,
        TData,
        QueryKey,
        VulnerabilitiesControllerGetVulnerabilitiesSeverityParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity
            >
          >,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVulnerabilitiesControllerGetVulnerabilitiesSeverityInfinite<
  TData = InfiniteData<
    Awaited<
      ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
    >,
    VulnerabilitiesControllerGetVulnerabilitiesSeverityParams['page']
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesSeverityParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<
          ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
        >,
        TError,
        TData,
        QueryKey,
        VulnerabilitiesControllerGetVulnerabilitiesSeverityParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get vulnerabilities severity counts
 */

export function useVulnerabilitiesControllerGetVulnerabilitiesSeverityInfinite<
  TData = InfiniteData<
    Awaited<
      ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
    >,
    VulnerabilitiesControllerGetVulnerabilitiesSeverityParams['page']
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesSeverityParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<
          ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
        >,
        TError,
        TData,
        QueryKey,
        VulnerabilitiesControllerGetVulnerabilitiesSeverityParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getVulnerabilitiesControllerGetVulnerabilitiesSeverityInfiniteQueryOptions(
      params,
      options,
    );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getVulnerabilitiesControllerGetVulnerabilitiesSeverityQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
    >,
    TError = unknown,
  >(
    params: VulnerabilitiesControllerGetVulnerabilitiesSeverityParams,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity
            >
          >,
          TError,
          TData
        >
      >;
      request?: SecondParameter<typeof orvalClient>;
    },
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getVulnerabilitiesControllerGetVulnerabilitiesSeverityQueryKey(params);

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
      >
    > = ({ signal }) =>
      vulnerabilitiesControllerGetVulnerabilitiesSeverity(
        params,
        requestOptions,
        signal,
      );

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
      Awaited<
        ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
  };

export type VulnerabilitiesControllerGetVulnerabilitiesSeverityQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
    >
  >;
export type VulnerabilitiesControllerGetVulnerabilitiesSeverityQueryError =
  unknown;

export function useVulnerabilitiesControllerGetVulnerabilitiesSeverity<
  TData = Awaited<
    ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesSeverityParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity
            >
          >
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVulnerabilitiesControllerGetVulnerabilitiesSeverity<
  TData = Awaited<
    ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesSeverityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity
            >
          >
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVulnerabilitiesControllerGetVulnerabilitiesSeverity<
  TData = Awaited<
    ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesSeverityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get vulnerabilities severity counts
 */

export function useVulnerabilitiesControllerGetVulnerabilitiesSeverity<
  TData = Awaited<
    ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
  >,
  TError = unknown,
>(
  params: VulnerabilitiesControllerGetVulnerabilitiesSeverityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof vulnerabilitiesControllerGetVulnerabilitiesSeverity>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getVulnerabilitiesControllerGetVulnerabilitiesSeverityQueryOptions(
      params,
      options,
    );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves a list of all available workflow templates in YAML format.
 * @summary Get all workflow templates
 */
export const workflowsControllerListTemplates = (
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyStringDto>(
    { url: `/api/workflows/templates`, method: 'GET', signal },
    options,
  );
};

export const getWorkflowsControllerListTemplatesQueryKey = () => {
  return [`/api/workflows/templates`] as const;
};

export const getWorkflowsControllerListTemplatesInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof workflowsControllerListTemplates>>
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getWorkflowsControllerListTemplatesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workflowsControllerListTemplates>>
  > = ({ signal }) => workflowsControllerListTemplates(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkflowsControllerListTemplatesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof workflowsControllerListTemplates>>
>;
export type WorkflowsControllerListTemplatesInfiniteQueryError = unknown;

export function useWorkflowsControllerListTemplatesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workflowsControllerListTemplates>>
  >,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
          TError,
          Awaited<ReturnType<typeof workflowsControllerListTemplates>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkflowsControllerListTemplatesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workflowsControllerListTemplates>>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
          TError,
          Awaited<ReturnType<typeof workflowsControllerListTemplates>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkflowsControllerListTemplatesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workflowsControllerListTemplates>>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all workflow templates
 */

export function useWorkflowsControllerListTemplatesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workflowsControllerListTemplates>>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getWorkflowsControllerListTemplatesInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getWorkflowsControllerListTemplatesQueryOptions = <
  TData = Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getWorkflowsControllerListTemplatesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workflowsControllerListTemplates>>
  > = ({ signal }) => workflowsControllerListTemplates(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkflowsControllerListTemplatesQueryResult = NonNullable<
  Awaited<ReturnType<typeof workflowsControllerListTemplates>>
>;
export type WorkflowsControllerListTemplatesQueryError = unknown;

export function useWorkflowsControllerListTemplates<
  TData = Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
          TError,
          Awaited<ReturnType<typeof workflowsControllerListTemplates>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkflowsControllerListTemplates<
  TData = Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
          TError,
          Awaited<ReturnType<typeof workflowsControllerListTemplates>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkflowsControllerListTemplates<
  TData = Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all workflow templates
 */

export function useWorkflowsControllerListTemplates<
  TData = Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workflowsControllerListTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWorkflowsControllerListTemplatesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves statistics for a workspace including total targets, assets, vulnerabilities, and unique technologies.
 * @summary Get workspace statistics
 */
export const statisticControllerGetStatistics = (
  params: StatisticControllerGetStatisticsParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<StatisticResponseDto>(
    { url: `/api/statistic`, method: 'GET', params, signal },
    options,
  );
};

export const getStatisticControllerGetStatisticsQueryKey = (
  params: StatisticControllerGetStatisticsParams,
) => {
  return [`/api/statistic`, ...(params ? [params] : [])] as const;
};

export const getStatisticControllerGetStatisticsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
    StatisticControllerGetStatisticsParams['page']
  >,
  TError = unknown,
>(
  params: StatisticControllerGetStatisticsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
        TError,
        TData,
        QueryKey,
        StatisticControllerGetStatisticsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getStatisticControllerGetStatisticsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
    QueryKey,
    StatisticControllerGetStatisticsParams['page']
  > = ({ signal, pageParam }) =>
    statisticControllerGetStatistics(
      { ...params, page: pageParam || params?.['page'] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
    TError,
    TData,
    QueryKey,
    StatisticControllerGetStatisticsParams['page']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StatisticControllerGetStatisticsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof statisticControllerGetStatistics>>
>;
export type StatisticControllerGetStatisticsInfiniteQueryError = unknown;

export function useStatisticControllerGetStatisticsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
    StatisticControllerGetStatisticsParams['page']
  >,
  TError = unknown,
>(
  params: StatisticControllerGetStatisticsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
        TError,
        TData,
        QueryKey,
        StatisticControllerGetStatisticsParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
          TError,
          Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStatisticControllerGetStatisticsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
    StatisticControllerGetStatisticsParams['page']
  >,
  TError = unknown,
>(
  params: StatisticControllerGetStatisticsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
        TError,
        TData,
        QueryKey,
        StatisticControllerGetStatisticsParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
          TError,
          Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStatisticControllerGetStatisticsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
    StatisticControllerGetStatisticsParams['page']
  >,
  TError = unknown,
>(
  params: StatisticControllerGetStatisticsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
        TError,
        TData,
        QueryKey,
        StatisticControllerGetStatisticsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get workspace statistics
 */

export function useStatisticControllerGetStatisticsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
    StatisticControllerGetStatisticsParams['page']
  >,
  TError = unknown,
>(
  params: StatisticControllerGetStatisticsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
        TError,
        TData,
        QueryKey,
        StatisticControllerGetStatisticsParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getStatisticControllerGetStatisticsInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getStatisticControllerGetStatisticsQueryOptions = <
  TData = Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
  TError = unknown,
>(
  params: StatisticControllerGetStatisticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getStatisticControllerGetStatisticsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof statisticControllerGetStatistics>>
  > = ({ signal }) =>
    statisticControllerGetStatistics(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StatisticControllerGetStatisticsQueryResult = NonNullable<
  Awaited<ReturnType<typeof statisticControllerGetStatistics>>
>;
export type StatisticControllerGetStatisticsQueryError = unknown;

export function useStatisticControllerGetStatistics<
  TData = Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
  TError = unknown,
>(
  params: StatisticControllerGetStatisticsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
          TError,
          Awaited<ReturnType<typeof statisticControllerGetStatistics>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStatisticControllerGetStatistics<
  TData = Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
  TError = unknown,
>(
  params: StatisticControllerGetStatisticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
          TError,
          Awaited<ReturnType<typeof statisticControllerGetStatistics>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStatisticControllerGetStatistics<
  TData = Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
  TError = unknown,
>(
  params: StatisticControllerGetStatisticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get workspace statistics
 */

export function useStatisticControllerGetStatistics<
  TData = Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
  TError = unknown,
>(
  params: StatisticControllerGetStatisticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof statisticControllerGetStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getStatisticControllerGetStatisticsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get all providers with pagination, filtered by owner
 * @summary Get all providers
 */
export const providersControllerGetManyProviders = (
  params?: ProvidersControllerGetManyProvidersParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyToolProviderDto>(
    { url: `/api/providers`, method: 'GET', params, signal },
    options,
  );
};

export const getProvidersControllerGetManyProvidersQueryKey = (
  params?: ProvidersControllerGetManyProvidersParams,
) => {
  return [`/api/providers`, ...(params ? [params] : [])] as const;
};

export const getProvidersControllerGetManyProvidersInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
    ProvidersControllerGetManyProvidersParams['page']
  >,
  TError = unknown,
>(
  params?: ProvidersControllerGetManyProvidersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
        TError,
        TData,
        QueryKey,
        ProvidersControllerGetManyProvidersParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getProvidersControllerGetManyProvidersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
    QueryKey,
    ProvidersControllerGetManyProvidersParams['page']
  > = ({ signal, pageParam }) =>
    providersControllerGetManyProviders(
      { ...params, page: pageParam || params?.['page'] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
    TError,
    TData,
    QueryKey,
    ProvidersControllerGetManyProvidersParams['page']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ProvidersControllerGetManyProvidersInfiniteQueryResult =
  NonNullable<Awaited<ReturnType<typeof providersControllerGetManyProviders>>>;
export type ProvidersControllerGetManyProvidersInfiniteQueryError = unknown;

export function useProvidersControllerGetManyProvidersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
    ProvidersControllerGetManyProvidersParams['page']
  >,
  TError = unknown,
>(
  params: undefined | ProvidersControllerGetManyProvidersParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
        TError,
        TData,
        QueryKey,
        ProvidersControllerGetManyProvidersParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
          TError,
          Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useProvidersControllerGetManyProvidersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
    ProvidersControllerGetManyProvidersParams['page']
  >,
  TError = unknown,
>(
  params?: ProvidersControllerGetManyProvidersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
        TError,
        TData,
        QueryKey,
        ProvidersControllerGetManyProvidersParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
          TError,
          Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useProvidersControllerGetManyProvidersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
    ProvidersControllerGetManyProvidersParams['page']
  >,
  TError = unknown,
>(
  params?: ProvidersControllerGetManyProvidersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
        TError,
        TData,
        QueryKey,
        ProvidersControllerGetManyProvidersParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all providers
 */

export function useProvidersControllerGetManyProvidersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
    ProvidersControllerGetManyProvidersParams['page']
  >,
  TError = unknown,
>(
  params?: ProvidersControllerGetManyProvidersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
        TError,
        TData,
        QueryKey,
        ProvidersControllerGetManyProvidersParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getProvidersControllerGetManyProvidersInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getProvidersControllerGetManyProvidersQueryOptions = <
  TData = Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
  TError = unknown,
>(
  params?: ProvidersControllerGetManyProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getProvidersControllerGetManyProvidersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof providersControllerGetManyProviders>>
  > = ({ signal }) =>
    providersControllerGetManyProviders(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ProvidersControllerGetManyProvidersQueryResult = NonNullable<
  Awaited<ReturnType<typeof providersControllerGetManyProviders>>
>;
export type ProvidersControllerGetManyProvidersQueryError = unknown;

export function useProvidersControllerGetManyProviders<
  TData = Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
  TError = unknown,
>(
  params: undefined | ProvidersControllerGetManyProvidersParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
          TError,
          Awaited<ReturnType<typeof providersControllerGetManyProviders>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useProvidersControllerGetManyProviders<
  TData = Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
  TError = unknown,
>(
  params?: ProvidersControllerGetManyProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
          TError,
          Awaited<ReturnType<typeof providersControllerGetManyProviders>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useProvidersControllerGetManyProviders<
  TData = Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
  TError = unknown,
>(
  params?: ProvidersControllerGetManyProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all providers
 */

export function useProvidersControllerGetManyProviders<
  TData = Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
  TError = unknown,
>(
  params?: ProvidersControllerGetManyProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetManyProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getProvidersControllerGetManyProvidersQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new provider
 * @summary Create a new provider
 */
export const providersControllerCreateProvider = (
  createProviderDto: CreateProviderDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<ToolProvider>(
    {
      url: `/api/providers`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createProviderDto,
      signal,
    },
    options,
  );
};

export const getProvidersControllerCreateProviderMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof providersControllerCreateProvider>>,
    TError,
    { data: CreateProviderDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof providersControllerCreateProvider>>,
  TError,
  { data: CreateProviderDto },
  TContext
> => {
  const mutationKey = ['providersControllerCreateProvider'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof providersControllerCreateProvider>>,
    { data: CreateProviderDto }
  > = (props) => {
    const { data } = props ?? {};

    return providersControllerCreateProvider(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProvidersControllerCreateProviderMutationResult = NonNullable<
  Awaited<ReturnType<typeof providersControllerCreateProvider>>
>;
export type ProvidersControllerCreateProviderMutationBody = CreateProviderDto;
export type ProvidersControllerCreateProviderMutationError = unknown;

/**
 * @summary Create a new provider
 */
export const useProvidersControllerCreateProvider = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof providersControllerCreateProvider>>,
      TError,
      { data: CreateProviderDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof providersControllerCreateProvider>>,
  TError,
  { data: CreateProviderDto },
  TContext
> => {
  const mutationOptions =
    getProvidersControllerCreateProviderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Get detailed information about a specific provider
 * @summary Get a provider by ID
 */
export const providersControllerGetProvider = (
  id: string,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<ToolProvider>(
    { url: `/api/providers/${id}`, method: 'GET', signal },
    options,
  );
};

export const getProvidersControllerGetProviderQueryKey = (id: string) => {
  return [`/api/providers/${id}`] as const;
};

export const getProvidersControllerGetProviderInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof providersControllerGetProvider>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetProvider>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProvidersControllerGetProviderQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof providersControllerGetProvider>>
  > = ({ signal }) =>
    providersControllerGetProvider(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof providersControllerGetProvider>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ProvidersControllerGetProviderInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof providersControllerGetProvider>>
>;
export type ProvidersControllerGetProviderInfiniteQueryError = unknown;

export function useProvidersControllerGetProviderInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof providersControllerGetProvider>>
  >,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetProvider>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof providersControllerGetProvider>>,
          TError,
          Awaited<ReturnType<typeof providersControllerGetProvider>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useProvidersControllerGetProviderInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof providersControllerGetProvider>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetProvider>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof providersControllerGetProvider>>,
          TError,
          Awaited<ReturnType<typeof providersControllerGetProvider>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useProvidersControllerGetProviderInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof providersControllerGetProvider>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetProvider>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a provider by ID
 */

export function useProvidersControllerGetProviderInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof providersControllerGetProvider>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetProvider>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getProvidersControllerGetProviderInfiniteQueryOptions(
    id,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getProvidersControllerGetProviderQueryOptions = <
  TData = Awaited<ReturnType<typeof providersControllerGetProvider>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetProvider>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProvidersControllerGetProviderQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof providersControllerGetProvider>>
  > = ({ signal }) =>
    providersControllerGetProvider(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof providersControllerGetProvider>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ProvidersControllerGetProviderQueryResult = NonNullable<
  Awaited<ReturnType<typeof providersControllerGetProvider>>
>;
export type ProvidersControllerGetProviderQueryError = unknown;

export function useProvidersControllerGetProvider<
  TData = Awaited<ReturnType<typeof providersControllerGetProvider>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetProvider>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof providersControllerGetProvider>>,
          TError,
          Awaited<ReturnType<typeof providersControllerGetProvider>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useProvidersControllerGetProvider<
  TData = Awaited<ReturnType<typeof providersControllerGetProvider>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetProvider>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof providersControllerGetProvider>>,
          TError,
          Awaited<ReturnType<typeof providersControllerGetProvider>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useProvidersControllerGetProvider<
  TData = Awaited<ReturnType<typeof providersControllerGetProvider>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetProvider>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a provider by ID
 */

export function useProvidersControllerGetProvider<
  TData = Awaited<ReturnType<typeof providersControllerGetProvider>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof providersControllerGetProvider>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getProvidersControllerGetProviderQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update an existing provider by ID
 * @summary Update a provider
 */
export const providersControllerUpdateProvider = (
  id: string,
  updateProviderDto: UpdateProviderDto,
  options?: SecondParameter<typeof orvalClient>,
) => {
  return orvalClient<ToolProvider>(
    {
      url: `/api/providers/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateProviderDto,
    },
    options,
  );
};

export const getProvidersControllerUpdateProviderMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof providersControllerUpdateProvider>>,
    TError,
    { id: string; data: UpdateProviderDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof providersControllerUpdateProvider>>,
  TError,
  { id: string; data: UpdateProviderDto },
  TContext
> => {
  const mutationKey = ['providersControllerUpdateProvider'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof providersControllerUpdateProvider>>,
    { id: string; data: UpdateProviderDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return providersControllerUpdateProvider(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProvidersControllerUpdateProviderMutationResult = NonNullable<
  Awaited<ReturnType<typeof providersControllerUpdateProvider>>
>;
export type ProvidersControllerUpdateProviderMutationBody = UpdateProviderDto;
export type ProvidersControllerUpdateProviderMutationError = unknown;

/**
 * @summary Update a provider
 */
export const useProvidersControllerUpdateProvider = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof providersControllerUpdateProvider>>,
      TError,
      { id: string; data: UpdateProviderDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof providersControllerUpdateProvider>>,
  TError,
  { id: string; data: UpdateProviderDto },
  TContext
> => {
  const mutationOptions =
    getProvidersControllerUpdateProviderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Soft delete a provider by ID
 * @summary Delete a provider
 */
export const providersControllerDeleteProvider = (
  id: string,
  options?: SecondParameter<typeof orvalClient>,
) => {
  return orvalClient<DefaultMessageResponseDto>(
    { url: `/api/providers/${id}`, method: 'DELETE' },
    options,
  );
};

export const getProvidersControllerDeleteProviderMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof providersControllerDeleteProvider>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof providersControllerDeleteProvider>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['providersControllerDeleteProvider'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof providersControllerDeleteProvider>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return providersControllerDeleteProvider(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProvidersControllerDeleteProviderMutationResult = NonNullable<
  Awaited<ReturnType<typeof providersControllerDeleteProvider>>
>;

export type ProvidersControllerDeleteProviderMutationError = unknown;

/**
 * @summary Delete a provider
 */
export const useProvidersControllerDeleteProvider = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof providersControllerDeleteProvider>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof providersControllerDeleteProvider>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getProvidersControllerDeleteProviderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Create a new template with file stored in the storage
 * @summary Create a new templates
 */
export const templatesControllerCreateTemplate = (
  createTemplateDTO: CreateTemplateDTO,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<Template>(
    {
      url: `/api/templates`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createTemplateDTO,
      signal,
    },
    options,
  );
};

export const getTemplatesControllerCreateTemplateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof templatesControllerCreateTemplate>>,
    TError,
    { data: CreateTemplateDTO },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof templatesControllerCreateTemplate>>,
  TError,
  { data: CreateTemplateDTO },
  TContext
> => {
  const mutationKey = ['templatesControllerCreateTemplate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof templatesControllerCreateTemplate>>,
    { data: CreateTemplateDTO }
  > = (props) => {
    const { data } = props ?? {};

    return templatesControllerCreateTemplate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TemplatesControllerCreateTemplateMutationResult = NonNullable<
  Awaited<ReturnType<typeof templatesControllerCreateTemplate>>
>;
export type TemplatesControllerCreateTemplateMutationBody = CreateTemplateDTO;
export type TemplatesControllerCreateTemplateMutationError = unknown;

/**
 * @summary Create a new templates
 */
export const useTemplatesControllerCreateTemplate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof templatesControllerCreateTemplate>>,
      TError,
      { data: CreateTemplateDTO },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof templatesControllerCreateTemplate>>,
  TError,
  { data: CreateTemplateDTO },
  TContext
> => {
  const mutationOptions =
    getTemplatesControllerCreateTemplateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieve all templates in a workspace
 * @summary Get all templates
 */
export const templatesControllerGetAllTemplates = (
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<Template>(
    { url: `/api/templates`, method: 'GET', signal },
    options,
  );
};

export const getTemplatesControllerGetAllTemplatesQueryKey = () => {
  return [`/api/templates`] as const;
};

export const getTemplatesControllerGetAllTemplatesInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTemplatesControllerGetAllTemplatesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>
  > = ({ signal }) =>
    templatesControllerGetAllTemplates(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TemplatesControllerGetAllTemplatesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>
>;
export type TemplatesControllerGetAllTemplatesInfiniteQueryError = unknown;

export function useTemplatesControllerGetAllTemplatesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>
  >,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
          TError,
          Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTemplatesControllerGetAllTemplatesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
          TError,
          Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTemplatesControllerGetAllTemplatesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all templates
 */

export function useTemplatesControllerGetAllTemplatesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getTemplatesControllerGetAllTemplatesInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getTemplatesControllerGetAllTemplatesQueryOptions = <
  TData = Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTemplatesControllerGetAllTemplatesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>
  > = ({ signal }) =>
    templatesControllerGetAllTemplates(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TemplatesControllerGetAllTemplatesQueryResult = NonNullable<
  Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>
>;
export type TemplatesControllerGetAllTemplatesQueryError = unknown;

export function useTemplatesControllerGetAllTemplates<
  TData = Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
          TError,
          Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTemplatesControllerGetAllTemplates<
  TData = Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
          TError,
          Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTemplatesControllerGetAllTemplates<
  TData = Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all templates
 */

export function useTemplatesControllerGetAllTemplates<
  TData = Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof templatesControllerGetAllTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getTemplatesControllerGetAllTemplatesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Upload a template to the storage
 * @summary Template upload
 */
export const templatesControllerUploadFile = (
  uploadTemplateDTO: UploadTemplateDTO,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<UploadTemplateResponseDTO>(
    {
      url: `/api/templates/upload`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: uploadTemplateDTO,
      signal,
    },
    options,
  );
};

export const getTemplatesControllerUploadFileMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof templatesControllerUploadFile>>,
    TError,
    { data: UploadTemplateDTO },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof templatesControllerUploadFile>>,
  TError,
  { data: UploadTemplateDTO },
  TContext
> => {
  const mutationKey = ['templatesControllerUploadFile'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof templatesControllerUploadFile>>,
    { data: UploadTemplateDTO }
  > = (props) => {
    const { data } = props ?? {};

    return templatesControllerUploadFile(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TemplatesControllerUploadFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof templatesControllerUploadFile>>
>;
export type TemplatesControllerUploadFileMutationBody = UploadTemplateDTO;
export type TemplatesControllerUploadFileMutationError = unknown;

/**
 * @summary Template upload
 */
export const useTemplatesControllerUploadFile = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof templatesControllerUploadFile>>,
      TError,
      { data: UploadTemplateDTO },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof templatesControllerUploadFile>>,
  TError,
  { data: UploadTemplateDTO },
  TContext
> => {
  const mutationOptions =
    getTemplatesControllerUploadFileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Rename the display filename of a template
 * @summary Rename a template file
 */
export const templatesControllerRenameFile = (
  templateId: string,
  options?: SecondParameter<typeof orvalClient>,
) => {
  return orvalClient<Template>(
    { url: `/api/templates/${templateId}/rename`, method: 'PATCH' },
    options,
  );
};

export const getTemplatesControllerRenameFileMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof templatesControllerRenameFile>>,
    TError,
    { templateId: string },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof templatesControllerRenameFile>>,
  TError,
  { templateId: string },
  TContext
> => {
  const mutationKey = ['templatesControllerRenameFile'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof templatesControllerRenameFile>>,
    { templateId: string }
  > = (props) => {
    const { templateId } = props ?? {};

    return templatesControllerRenameFile(templateId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TemplatesControllerRenameFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof templatesControllerRenameFile>>
>;

export type TemplatesControllerRenameFileMutationError = unknown;

/**
 * @summary Rename a template file
 */
export const useTemplatesControllerRenameFile = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof templatesControllerRenameFile>>,
      TError,
      { templateId: string },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof templatesControllerRenameFile>>,
  TError,
  { templateId: string },
  TContext
> => {
  const mutationOptions =
    getTemplatesControllerRenameFileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieve a template by its ID
 * @summary Get a template by ID
 */
export const templatesControllerGetTemplateById = (
  templateId: string,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<Template>(
    { url: `/api/templates/${templateId}`, method: 'GET', signal },
    options,
  );
};

export const getTemplatesControllerGetTemplateByIdQueryKey = (
  templateId: string,
) => {
  return [`/api/templates/${templateId}`] as const;
};

export const getTemplatesControllerGetTemplateByIdInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof templatesControllerGetTemplateById>>
  >,
  TError = unknown,
>(
  templateId: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTemplatesControllerGetTemplateByIdQueryKey(templateId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof templatesControllerGetTemplateById>>
  > = ({ signal }) =>
    templatesControllerGetTemplateById(templateId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!templateId,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TemplatesControllerGetTemplateByIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof templatesControllerGetTemplateById>>
>;
export type TemplatesControllerGetTemplateByIdInfiniteQueryError = unknown;

export function useTemplatesControllerGetTemplateByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof templatesControllerGetTemplateById>>
  >,
  TError = unknown,
>(
  templateId: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
          TError,
          Awaited<ReturnType<typeof templatesControllerGetTemplateById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTemplatesControllerGetTemplateByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof templatesControllerGetTemplateById>>
  >,
  TError = unknown,
>(
  templateId: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
          TError,
          Awaited<ReturnType<typeof templatesControllerGetTemplateById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTemplatesControllerGetTemplateByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof templatesControllerGetTemplateById>>
  >,
  TError = unknown,
>(
  templateId: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a template by ID
 */

export function useTemplatesControllerGetTemplateByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof templatesControllerGetTemplateById>>
  >,
  TError = unknown,
>(
  templateId: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getTemplatesControllerGetTemplateByIdInfiniteQueryOptions(
      templateId,
      options,
    );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getTemplatesControllerGetTemplateByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
  TError = unknown,
>(
  templateId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTemplatesControllerGetTemplateByIdQueryKey(templateId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof templatesControllerGetTemplateById>>
  > = ({ signal }) =>
    templatesControllerGetTemplateById(templateId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!templateId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TemplatesControllerGetTemplateByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof templatesControllerGetTemplateById>>
>;
export type TemplatesControllerGetTemplateByIdQueryError = unknown;

export function useTemplatesControllerGetTemplateById<
  TData = Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
  TError = unknown,
>(
  templateId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
          TError,
          Awaited<ReturnType<typeof templatesControllerGetTemplateById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTemplatesControllerGetTemplateById<
  TData = Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
  TError = unknown,
>(
  templateId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
          TError,
          Awaited<ReturnType<typeof templatesControllerGetTemplateById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTemplatesControllerGetTemplateById<
  TData = Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
  TError = unknown,
>(
  templateId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a template by ID
 */

export function useTemplatesControllerGetTemplateById<
  TData = Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
  TError = unknown,
>(
  templateId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof templatesControllerGetTemplateById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getTemplatesControllerGetTemplateByIdQueryOptions(
    templateId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Delete a template and its associated file from storage
 * @summary Delete a template
 */
export const templatesControllerDeleteTemplate = (
  templateId: string,
  options?: SecondParameter<typeof orvalClient>,
) => {
  return orvalClient<AppResponseSerialization>(
    { url: `/api/templates/${templateId}`, method: 'DELETE' },
    options,
  );
};

export const getTemplatesControllerDeleteTemplateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof templatesControllerDeleteTemplate>>,
    TError,
    { templateId: string },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof templatesControllerDeleteTemplate>>,
  TError,
  { templateId: string },
  TContext
> => {
  const mutationKey = ['templatesControllerDeleteTemplate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof templatesControllerDeleteTemplate>>,
    { templateId: string }
  > = (props) => {
    const { templateId } = props ?? {};

    return templatesControllerDeleteTemplate(templateId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TemplatesControllerDeleteTemplateMutationResult = NonNullable<
  Awaited<ReturnType<typeof templatesControllerDeleteTemplate>>
>;

export type TemplatesControllerDeleteTemplateMutationError = unknown;

/**
 * @summary Delete a template
 */
export const useTemplatesControllerDeleteTemplate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof templatesControllerDeleteTemplate>>,
      TError,
      { templateId: string },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof templatesControllerDeleteTemplate>>,
  TError,
  { templateId: string },
  TContext
> => {
  const mutationOptions =
    getTemplatesControllerDeleteTemplateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Upload a file to storage
 */
export const storageControllerUploadFile = (
  storageControllerUploadFileBody: StorageControllerUploadFileBody,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  formData.append(`file`, storageControllerUploadFileBody.file);
  if (storageControllerUploadFileBody.bucket !== undefined) {
    formData.append(`bucket`, storageControllerUploadFileBody.bucket);
  }

  return orvalClient<StorageControllerUploadFile200>(
    {
      url: `/api/storage/upload`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options,
  );
};

export const getStorageControllerUploadFileMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof storageControllerUploadFile>>,
    TError,
    { data: StorageControllerUploadFileBody },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof storageControllerUploadFile>>,
  TError,
  { data: StorageControllerUploadFileBody },
  TContext
> => {
  const mutationKey = ['storageControllerUploadFile'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof storageControllerUploadFile>>,
    { data: StorageControllerUploadFileBody }
  > = (props) => {
    const { data } = props ?? {};

    return storageControllerUploadFile(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type StorageControllerUploadFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof storageControllerUploadFile>>
>;
export type StorageControllerUploadFileMutationBody =
  StorageControllerUploadFileBody;
export type StorageControllerUploadFileMutationError = unknown;

/**
 * @summary Upload a file to storage
 */
export const useStorageControllerUploadFile = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof storageControllerUploadFile>>,
      TError,
      { data: StorageControllerUploadFileBody },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof storageControllerUploadFile>>,
  TError,
  { data: StorageControllerUploadFileBody },
  TContext
> => {
  const mutationOptions =
    getStorageControllerUploadFileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Get a file from storage (public)
 */
export const storageControllerGetFile = (
  bucket: string,
  path: string,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<Blob>(
    {
      url: `/api/storage/${bucket}/${path}`,
      method: 'GET',
      responseType: 'blob',
      signal,
    },
    options,
  );
};

export const getStorageControllerGetFileQueryKey = (
  bucket: string,
  path: string,
) => {
  return [`/api/storage/${bucket}/${path}`] as const;
};

export const getStorageControllerGetFileInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof storageControllerGetFile>>>,
  TError = void,
>(
  bucket: string,
  path: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof storageControllerGetFile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getStorageControllerGetFileQueryKey(bucket, path);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof storageControllerGetFile>>
  > = ({ signal }) =>
    storageControllerGetFile(bucket, path, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(bucket && path),
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof storageControllerGetFile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StorageControllerGetFileInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof storageControllerGetFile>>
>;
export type StorageControllerGetFileInfiniteQueryError = void;

export function useStorageControllerGetFileInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof storageControllerGetFile>>>,
  TError = void,
>(
  bucket: string,
  path: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof storageControllerGetFile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof storageControllerGetFile>>,
          TError,
          Awaited<ReturnType<typeof storageControllerGetFile>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStorageControllerGetFileInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof storageControllerGetFile>>>,
  TError = void,
>(
  bucket: string,
  path: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof storageControllerGetFile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof storageControllerGetFile>>,
          TError,
          Awaited<ReturnType<typeof storageControllerGetFile>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStorageControllerGetFileInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof storageControllerGetFile>>>,
  TError = void,
>(
  bucket: string,
  path: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof storageControllerGetFile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a file from storage (public)
 */

export function useStorageControllerGetFileInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof storageControllerGetFile>>>,
  TError = void,
>(
  bucket: string,
  path: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof storageControllerGetFile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getStorageControllerGetFileInfiniteQueryOptions(
    bucket,
    path,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getStorageControllerGetFileQueryOptions = <
  TData = Awaited<ReturnType<typeof storageControllerGetFile>>,
  TError = void,
>(
  bucket: string,
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof storageControllerGetFile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getStorageControllerGetFileQueryKey(bucket, path);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof storageControllerGetFile>>
  > = ({ signal }) =>
    storageControllerGetFile(bucket, path, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(bucket && path),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof storageControllerGetFile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StorageControllerGetFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof storageControllerGetFile>>
>;
export type StorageControllerGetFileQueryError = void;

export function useStorageControllerGetFile<
  TData = Awaited<ReturnType<typeof storageControllerGetFile>>,
  TError = void,
>(
  bucket: string,
  path: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof storageControllerGetFile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof storageControllerGetFile>>,
          TError,
          Awaited<ReturnType<typeof storageControllerGetFile>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStorageControllerGetFile<
  TData = Awaited<ReturnType<typeof storageControllerGetFile>>,
  TError = void,
>(
  bucket: string,
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof storageControllerGetFile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof storageControllerGetFile>>,
          TError,
          Awaited<ReturnType<typeof storageControllerGetFile>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStorageControllerGetFile<
  TData = Awaited<ReturnType<typeof storageControllerGetFile>>,
  TError = void,
>(
  bucket: string,
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof storageControllerGetFile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a file from storage (public)
 */

export function useStorageControllerGetFile<
  TData = Awaited<ReturnType<typeof storageControllerGetFile>>,
  TError = void,
>(
  bucket: string,
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof storageControllerGetFile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getStorageControllerGetFileQueryOptions(
    bucket,
    path,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Forward an image from a URL
 */
export const storageControllerForwardImage = (
  params: StorageControllerForwardImageParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<Blob>(
    {
      url: `/api/storage/forward`,
      method: 'GET',
      params,
      responseType: 'blob',
      signal,
    },
    options,
  );
};

export const getStorageControllerForwardImageQueryKey = (
  params: StorageControllerForwardImageParams,
) => {
  return [`/api/storage/forward`, ...(params ? [params] : [])] as const;
};

export const getStorageControllerForwardImageInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof storageControllerForwardImage>>,
    StorageControllerForwardImageParams['page']
  >,
  TError = void,
>(
  params: StorageControllerForwardImageParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof storageControllerForwardImage>>,
        TError,
        TData,
        QueryKey,
        StorageControllerForwardImageParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getStorageControllerForwardImageQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof storageControllerForwardImage>>,
    QueryKey,
    StorageControllerForwardImageParams['page']
  > = ({ signal, pageParam }) =>
    storageControllerForwardImage(
      { ...params, page: pageParam || params?.['page'] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof storageControllerForwardImage>>,
    TError,
    TData,
    QueryKey,
    StorageControllerForwardImageParams['page']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StorageControllerForwardImageInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof storageControllerForwardImage>>
>;
export type StorageControllerForwardImageInfiniteQueryError = void;

export function useStorageControllerForwardImageInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof storageControllerForwardImage>>,
    StorageControllerForwardImageParams['page']
  >,
  TError = void,
>(
  params: StorageControllerForwardImageParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof storageControllerForwardImage>>,
        TError,
        TData,
        QueryKey,
        StorageControllerForwardImageParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof storageControllerForwardImage>>,
          TError,
          Awaited<ReturnType<typeof storageControllerForwardImage>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStorageControllerForwardImageInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof storageControllerForwardImage>>,
    StorageControllerForwardImageParams['page']
  >,
  TError = void,
>(
  params: StorageControllerForwardImageParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof storageControllerForwardImage>>,
        TError,
        TData,
        QueryKey,
        StorageControllerForwardImageParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof storageControllerForwardImage>>,
          TError,
          Awaited<ReturnType<typeof storageControllerForwardImage>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStorageControllerForwardImageInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof storageControllerForwardImage>>,
    StorageControllerForwardImageParams['page']
  >,
  TError = void,
>(
  params: StorageControllerForwardImageParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof storageControllerForwardImage>>,
        TError,
        TData,
        QueryKey,
        StorageControllerForwardImageParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Forward an image from a URL
 */

export function useStorageControllerForwardImageInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof storageControllerForwardImage>>,
    StorageControllerForwardImageParams['page']
  >,
  TError = void,
>(
  params: StorageControllerForwardImageParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof storageControllerForwardImage>>,
        TError,
        TData,
        QueryKey,
        StorageControllerForwardImageParams['page']
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getStorageControllerForwardImageInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getStorageControllerForwardImageQueryOptions = <
  TData = Awaited<ReturnType<typeof storageControllerForwardImage>>,
  TError = void,
>(
  params: StorageControllerForwardImageParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof storageControllerForwardImage>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getStorageControllerForwardImageQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof storageControllerForwardImage>>
  > = ({ signal }) =>
    storageControllerForwardImage(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof storageControllerForwardImage>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StorageControllerForwardImageQueryResult = NonNullable<
  Awaited<ReturnType<typeof storageControllerForwardImage>>
>;
export type StorageControllerForwardImageQueryError = void;

export function useStorageControllerForwardImage<
  TData = Awaited<ReturnType<typeof storageControllerForwardImage>>,
  TError = void,
>(
  params: StorageControllerForwardImageParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof storageControllerForwardImage>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof storageControllerForwardImage>>,
          TError,
          Awaited<ReturnType<typeof storageControllerForwardImage>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStorageControllerForwardImage<
  TData = Awaited<ReturnType<typeof storageControllerForwardImage>>,
  TError = void,
>(
  params: StorageControllerForwardImageParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof storageControllerForwardImage>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof storageControllerForwardImage>>,
          TError,
          Awaited<ReturnType<typeof storageControllerForwardImage>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStorageControllerForwardImage<
  TData = Awaited<ReturnType<typeof storageControllerForwardImage>>,
  TError = void,
>(
  params: StorageControllerForwardImageParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof storageControllerForwardImage>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Forward an image from a URL
 */

export function useStorageControllerForwardImage<
  TData = Awaited<ReturnType<typeof storageControllerForwardImage>>,
  TError = void,
>(
  params: StorageControllerForwardImageParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof storageControllerForwardImage>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getStorageControllerForwardImageQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
