/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Open Attack Surface Management
 * Open-source platform for cybersecurity Attack Surface Management (ASM)
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { orvalClient } from "../axios-client";
export type Target = {
  id: string;
  createdAt: string;
  updatedAt: string;
  /** The target domain (with optional URL path, will be parsed to extract domain) */
  value: string;
  lastDiscoveredAt: string;
};

export type AppResponseSerialization = { [key: string]: unknown };

export type CreateTargetDto = {
  /** The target domain (with optional URL path, will be parsed to extract domain) */
  value: string;
  /** The id of the workspace */
  workspaceId: string;
};

export type GetManyTargetResponseDtoStatus =
  (typeof GetManyTargetResponseDtoStatus)[keyof typeof GetManyTargetResponseDtoStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetManyTargetResponseDtoStatus = {
  RUNNING: "RUNNING",
  DONE: "DONE",
} as const;

export type GetManyTargetResponseDto = {
  id: string;
  createdAt: string;
  updatedAt: string;
  /** The target domain (with optional URL path, will be parsed to extract domain) */
  value: string;
  lastDiscoveredAt: string;
  status: GetManyTargetResponseDtoStatus;
  totalAssets: number;
};

export type GetManyGetManyTargetResponseDtoDto = {
  data: GetManyTargetResponseDto[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type DefaultMessageResponseDto = {
  message: string;
};

export type Workspace = {
  id: string;
  createdAt: string;
  updatedAt: string;
  /** The name of the workspace */
  name: string;
  /** The description of the workspace */
  description: string;
};

export type CreateWorkspaceDto = {
  /** The name of the workspace */
  name: string;
  /** The description of the workspace */
  description: string;
};

export type GetManyWorkspaceDto = {
  data: Workspace[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type WorkspaceStatisticsResponseDto = { [key: string]: unknown };

export type UpdateWorkspaceDto = {
  /** The name of the workspace */
  name?: string;
  /** The description of the workspace */
  description?: string;
};

export type GetApiKeyResponseDto = {
  apiKey: string;
};

export type CreateFirstAdminDto = {
  email: string;
  password: string;
};

export type Job = {
  id: string;
  createdAt: string;
  updatedAt: string;
  workerName: string;
  status: string;
  pickJobAt: string;
  completedAt: string;
};

export type GetManyJobDto = {
  data: Job[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type GetNextJobResponseDto = {
  jobId: string;
  value: string;
  workerName: string;
  /** Command to run */
  command: string;
};

export type UpdateResultDtoData = { [key: string]: unknown };

export type UpdateResultDto = {
  jobId: string;
  data: UpdateResultDtoData;
};

export type Any = { [key: string]: unknown };

export type GetAssetsResponseDtoDnsRecords = { [key: string]: unknown };

export type GetAssetsResponseDto = {
  id: string;
  value: string;
  targetId: string;
  isPrimary?: boolean;
  createdAt: string;
  updatedAt: string;
  dnsRecords?: GetAssetsResponseDtoDnsRecords;
  metadata?: Any;
};

export type GetManyGetAssetsResponseDtoDto = {
  data: GetAssetsResponseDto[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type WorkerAliveDto = {
  token: string;
};

export type WorkerInstance = {
  id: string;
  createdAt: string;
  updatedAt: string;
  lastSeenAt: string;
  token: string;
  currentJobsCount: number;
  type: string;
};

export type WorkerJoinDto = {
  token: string;
};

export type GetManyWorkerInstanceDto = {
  data: WorkerInstance[];
  total: number;
  page: number;
  limit: number;
  hasNextPage: boolean;
  pageCount: number;
};

export type TargetsControllerGetTargetsInWorkspaceParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  workspaceId: string;
  value?: string;
};

export type WorkspacesControllerGetWorkspacesParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
};

export type JobsRegistryControllerGetManyJobsParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
};

export type JobsRegistryControllerGetJobsByAssetIdParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  /**
   * Filter jobs by status
   */
  jobStatus?: JobsRegistryControllerGetJobsByAssetIdJobStatus;
  /**
   * Filter jobs by worker name
   */
  workerName?: JobsRegistryControllerGetJobsByAssetIdWorkerName;
};

export type JobsRegistryControllerGetJobsByAssetIdJobStatus =
  (typeof JobsRegistryControllerGetJobsByAssetIdJobStatus)[keyof typeof JobsRegistryControllerGetJobsByAssetIdJobStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const JobsRegistryControllerGetJobsByAssetIdJobStatus = {
  pending: "pending",
  in_progress: "in_progress",
  completed: "completed",
  failed: "failed",
  cancelled: "cancelled",
  all: "all",
} as const;

export type JobsRegistryControllerGetJobsByAssetIdWorkerName =
  (typeof JobsRegistryControllerGetJobsByAssetIdWorkerName)[keyof typeof JobsRegistryControllerGetJobsByAssetIdWorkerName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const JobsRegistryControllerGetJobsByAssetIdWorkerName = {
  subdomains: "subdomains",
  httpx: "httpx",
  ports: "ports",
  all: "all",
} as const;

export type JobsRegistryControllerGetJobsByTargetIdParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  /**
   * Filter jobs by status
   */
  jobStatus?: JobsRegistryControllerGetJobsByTargetIdJobStatus;
  /**
   * Filter jobs by worker name
   */
  workerName?: JobsRegistryControllerGetJobsByTargetIdWorkerName;
};

export type JobsRegistryControllerGetJobsByTargetIdJobStatus =
  (typeof JobsRegistryControllerGetJobsByTargetIdJobStatus)[keyof typeof JobsRegistryControllerGetJobsByTargetIdJobStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const JobsRegistryControllerGetJobsByTargetIdJobStatus = {
  pending: "pending",
  in_progress: "in_progress",
  completed: "completed",
  failed: "failed",
  cancelled: "cancelled",
  all: "all",
} as const;

export type JobsRegistryControllerGetJobsByTargetIdWorkerName =
  (typeof JobsRegistryControllerGetJobsByTargetIdWorkerName)[keyof typeof JobsRegistryControllerGetJobsByTargetIdWorkerName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const JobsRegistryControllerGetJobsByTargetIdWorkerName = {
  subdomains: "subdomains",
  httpx: "httpx",
  ports: "ports",
  all: "all",
} as const;

export type AssetsControllerGetAssetsParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  workspaceId: string;
  targetIds?: string[];
  ports?: string[];
  techs?: string[];
  statusCodes?: string[];
};

export type WorkersControllerGetWorkersParams = {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Creates a new target.
 * @summary Create a target
 */
export const targetsControllerCreateTarget = (
  createTargetDto: CreateTargetDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<Target>(
    {
      url: `/api/targets`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createTargetDto,
      signal,
    },
    options,
  );
};

export const getTargetsControllerCreateTargetMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof targetsControllerCreateTarget>>,
    TError,
    { data: CreateTargetDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof targetsControllerCreateTarget>>,
  TError,
  { data: CreateTargetDto },
  TContext
> => {
  const mutationKey = ["targetsControllerCreateTarget"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof targetsControllerCreateTarget>>,
    { data: CreateTargetDto }
  > = (props) => {
    const { data } = props ?? {};

    return targetsControllerCreateTarget(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TargetsControllerCreateTargetMutationResult = NonNullable<
  Awaited<ReturnType<typeof targetsControllerCreateTarget>>
>;
export type TargetsControllerCreateTargetMutationBody = CreateTargetDto;
export type TargetsControllerCreateTargetMutationError = unknown;

/**
 * @summary Create a target
 */
export const useTargetsControllerCreateTarget = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof targetsControllerCreateTarget>>,
      TError,
      { data: CreateTargetDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof targetsControllerCreateTarget>>,
  TError,
  { data: CreateTargetDto },
  TContext
> => {
  const mutationOptions =
    getTargetsControllerCreateTargetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieves all targets in a workspace.
 * @summary Get all targets in a workspace
 */
export const targetsControllerGetTargetsInWorkspace = (
  params: TargetsControllerGetTargetsInWorkspaceParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyGetManyTargetResponseDtoDto>(
    { url: `/api/targets`, method: "GET", params, signal },
    options,
  );
};

export const getTargetsControllerGetTargetsInWorkspaceQueryKey = (
  params: TargetsControllerGetTargetsInWorkspaceParams,
) => {
  return [`/api/targets`, ...(params ? [params] : [])] as const;
};

export const getTargetsControllerGetTargetsInWorkspaceInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
    TargetsControllerGetTargetsInWorkspaceParams["page"]
  >,
  TError = unknown,
>(
  params: TargetsControllerGetTargetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData,
        QueryKey,
        TargetsControllerGetTargetsInWorkspaceParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTargetsControllerGetTargetsInWorkspaceQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
    QueryKey,
    TargetsControllerGetTargetsInWorkspaceParams["page"]
  > = ({ signal, pageParam }) =>
    targetsControllerGetTargetsInWorkspace(
      { ...params, page: pageParam || params?.["page"] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
    TError,
    TData,
    QueryKey,
    TargetsControllerGetTargetsInWorkspaceParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TargetsControllerGetTargetsInWorkspaceInfiniteQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>
  >;
export type TargetsControllerGetTargetsInWorkspaceInfiniteQueryError = unknown;

export function useTargetsControllerGetTargetsInWorkspaceInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
    TargetsControllerGetTargetsInWorkspaceParams["page"]
  >,
  TError = unknown,
>(
  params: TargetsControllerGetTargetsInWorkspaceParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData,
        QueryKey,
        TargetsControllerGetTargetsInWorkspaceParams["page"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
          TError,
          Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTargetsControllerGetTargetsInWorkspaceInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
    TargetsControllerGetTargetsInWorkspaceParams["page"]
  >,
  TError = unknown,
>(
  params: TargetsControllerGetTargetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData,
        QueryKey,
        TargetsControllerGetTargetsInWorkspaceParams["page"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
          TError,
          Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTargetsControllerGetTargetsInWorkspaceInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
    TargetsControllerGetTargetsInWorkspaceParams["page"]
  >,
  TError = unknown,
>(
  params: TargetsControllerGetTargetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData,
        QueryKey,
        TargetsControllerGetTargetsInWorkspaceParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all targets in a workspace
 */

export function useTargetsControllerGetTargetsInWorkspaceInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
    TargetsControllerGetTargetsInWorkspaceParams["page"]
  >,
  TError = unknown,
>(
  params: TargetsControllerGetTargetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData,
        QueryKey,
        TargetsControllerGetTargetsInWorkspaceParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getTargetsControllerGetTargetsInWorkspaceInfiniteQueryOptions(
      params,
      options,
    );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getTargetsControllerGetTargetsInWorkspaceQueryOptions = <
  TData = Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
  TError = unknown,
>(
  params: TargetsControllerGetTargetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTargetsControllerGetTargetsInWorkspaceQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>
  > = ({ signal }) =>
    targetsControllerGetTargetsInWorkspace(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TargetsControllerGetTargetsInWorkspaceQueryResult = NonNullable<
  Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>
>;
export type TargetsControllerGetTargetsInWorkspaceQueryError = unknown;

export function useTargetsControllerGetTargetsInWorkspace<
  TData = Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
  TError = unknown,
>(
  params: TargetsControllerGetTargetsInWorkspaceParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
          TError,
          Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTargetsControllerGetTargetsInWorkspace<
  TData = Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
  TError = unknown,
>(
  params: TargetsControllerGetTargetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
          TError,
          Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTargetsControllerGetTargetsInWorkspace<
  TData = Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
  TError = unknown,
>(
  params: TargetsControllerGetTargetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all targets in a workspace
 */

export function useTargetsControllerGetTargetsInWorkspace<
  TData = Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
  TError = unknown,
>(
  params: TargetsControllerGetTargetsInWorkspaceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTargetsInWorkspace>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getTargetsControllerGetTargetsInWorkspaceQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves a target by its ID.
 * @summary Get a target by ID
 */
export const targetsControllerGetTarget = (
  id: string,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<Target>(
    { url: `/api/targets/${id}`, method: "GET", signal },
    options,
  );
};

export const getTargetsControllerGetTargetQueryKey = (id: string) => {
  return [`/api/targets/${id}`] as const;
};

export const getTargetsControllerGetTargetInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof targetsControllerGetTarget>>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTarget>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTargetsControllerGetTargetQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof targetsControllerGetTarget>>
  > = ({ signal }) => targetsControllerGetTarget(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof targetsControllerGetTarget>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TargetsControllerGetTargetInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof targetsControllerGetTarget>>
>;
export type TargetsControllerGetTargetInfiniteQueryError = unknown;

export function useTargetsControllerGetTargetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof targetsControllerGetTarget>>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTarget>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof targetsControllerGetTarget>>,
          TError,
          Awaited<ReturnType<typeof targetsControllerGetTarget>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTargetsControllerGetTargetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof targetsControllerGetTarget>>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTarget>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof targetsControllerGetTarget>>,
          TError,
          Awaited<ReturnType<typeof targetsControllerGetTarget>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTargetsControllerGetTargetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof targetsControllerGetTarget>>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTarget>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a target by ID
 */

export function useTargetsControllerGetTargetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof targetsControllerGetTarget>>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTarget>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getTargetsControllerGetTargetInfiniteQueryOptions(
    id,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getTargetsControllerGetTargetQueryOptions = <
  TData = Awaited<ReturnType<typeof targetsControllerGetTarget>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTarget>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTargetsControllerGetTargetQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof targetsControllerGetTarget>>
  > = ({ signal }) => targetsControllerGetTarget(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof targetsControllerGetTarget>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TargetsControllerGetTargetQueryResult = NonNullable<
  Awaited<ReturnType<typeof targetsControllerGetTarget>>
>;
export type TargetsControllerGetTargetQueryError = unknown;

export function useTargetsControllerGetTarget<
  TData = Awaited<ReturnType<typeof targetsControllerGetTarget>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTarget>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof targetsControllerGetTarget>>,
          TError,
          Awaited<ReturnType<typeof targetsControllerGetTarget>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTargetsControllerGetTarget<
  TData = Awaited<ReturnType<typeof targetsControllerGetTarget>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTarget>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof targetsControllerGetTarget>>,
          TError,
          Awaited<ReturnType<typeof targetsControllerGetTarget>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTargetsControllerGetTarget<
  TData = Awaited<ReturnType<typeof targetsControllerGetTarget>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTarget>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a target by ID
 */

export function useTargetsControllerGetTarget<
  TData = Awaited<ReturnType<typeof targetsControllerGetTarget>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof targetsControllerGetTarget>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getTargetsControllerGetTargetQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Deletes a target from a workspace.
 * @summary Delete a target from a workspace
 */
export const targetsControllerDeleteTargetFromWorkspace = (
  id: string,
  workspaceId: string,
  options?: SecondParameter<typeof orvalClient>,
) => {
  return orvalClient<DefaultMessageResponseDto>(
    { url: `/api/targets/${id}/workspace/${workspaceId}`, method: "DELETE" },
    options,
  );
};

export const getTargetsControllerDeleteTargetFromWorkspaceMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof targetsControllerDeleteTargetFromWorkspace>>,
    TError,
    { id: string; workspaceId: string },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof targetsControllerDeleteTargetFromWorkspace>>,
  TError,
  { id: string; workspaceId: string },
  TContext
> => {
  const mutationKey = ["targetsControllerDeleteTargetFromWorkspace"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof targetsControllerDeleteTargetFromWorkspace>>,
    { id: string; workspaceId: string }
  > = (props) => {
    const { id, workspaceId } = props ?? {};

    return targetsControllerDeleteTargetFromWorkspace(
      id,
      workspaceId,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type TargetsControllerDeleteTargetFromWorkspaceMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof targetsControllerDeleteTargetFromWorkspace>>
  >;

export type TargetsControllerDeleteTargetFromWorkspaceMutationError = unknown;

/**
 * @summary Delete a target from a workspace
 */
export const useTargetsControllerDeleteTargetFromWorkspace = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof targetsControllerDeleteTargetFromWorkspace>>,
      TError,
      { id: string; workspaceId: string },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof targetsControllerDeleteTargetFromWorkspace>>,
  TError,
  { id: string; workspaceId: string },
  TContext
> => {
  const mutationOptions =
    getTargetsControllerDeleteTargetFromWorkspaceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Rescans a target and triggers a new scan job.
 * @summary Rescan a target
 */
export const targetsControllerReScanTarget = (
  id: string,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<DefaultMessageResponseDto>(
    { url: `/api/targets/${id}/re-scan`, method: "POST", signal },
    options,
  );
};

export const getTargetsControllerReScanTargetMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof targetsControllerReScanTarget>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof targetsControllerReScanTarget>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["targetsControllerReScanTarget"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof targetsControllerReScanTarget>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return targetsControllerReScanTarget(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TargetsControllerReScanTargetMutationResult = NonNullable<
  Awaited<ReturnType<typeof targetsControllerReScanTarget>>
>;

export type TargetsControllerReScanTargetMutationError = unknown;

/**
 * @summary Rescan a target
 */
export const useTargetsControllerReScanTarget = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof targetsControllerReScanTarget>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof targetsControllerReScanTarget>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getTargetsControllerReScanTargetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Creates a new workspace.
 * @summary Create Workspace
 */
export const workspacesControllerCreateWorkspace = (
  createWorkspaceDto: CreateWorkspaceDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<Workspace>(
    {
      url: `/api/workspaces`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createWorkspaceDto,
      signal,
    },
    options,
  );
};

export const getWorkspacesControllerCreateWorkspaceMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workspacesControllerCreateWorkspace>>,
    TError,
    { data: CreateWorkspaceDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workspacesControllerCreateWorkspace>>,
  TError,
  { data: CreateWorkspaceDto },
  TContext
> => {
  const mutationKey = ["workspacesControllerCreateWorkspace"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workspacesControllerCreateWorkspace>>,
    { data: CreateWorkspaceDto }
  > = (props) => {
    const { data } = props ?? {};

    return workspacesControllerCreateWorkspace(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkspacesControllerCreateWorkspaceMutationResult = NonNullable<
  Awaited<ReturnType<typeof workspacesControllerCreateWorkspace>>
>;
export type WorkspacesControllerCreateWorkspaceMutationBody =
  CreateWorkspaceDto;
export type WorkspacesControllerCreateWorkspaceMutationError = unknown;

/**
 * @summary Create Workspace
 */
export const useWorkspacesControllerCreateWorkspace = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof workspacesControllerCreateWorkspace>>,
      TError,
      { data: CreateWorkspaceDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof workspacesControllerCreateWorkspace>>,
  TError,
  { data: CreateWorkspaceDto },
  TContext
> => {
  const mutationOptions =
    getWorkspacesControllerCreateWorkspaceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieves a list of workspaces that the user is a member of.
 * @summary Get Workspaces
 */
export const workspacesControllerGetWorkspaces = (
  params?: WorkspacesControllerGetWorkspacesParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyWorkspaceDto>(
    { url: `/api/workspaces`, method: "GET", params, signal },
    options,
  );
};

export const getWorkspacesControllerGetWorkspacesQueryKey = (
  params?: WorkspacesControllerGetWorkspacesParams,
) => {
  return [`/api/workspaces`, ...(params ? [params] : [])] as const;
};

export const getWorkspacesControllerGetWorkspacesInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
    WorkspacesControllerGetWorkspacesParams["page"]
  >,
  TError = unknown,
>(
  params?: WorkspacesControllerGetWorkspacesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData,
        QueryKey,
        WorkspacesControllerGetWorkspacesParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getWorkspacesControllerGetWorkspacesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
    QueryKey,
    WorkspacesControllerGetWorkspacesParams["page"]
  > = ({ signal, pageParam }) =>
    workspacesControllerGetWorkspaces(
      { ...params, page: pageParam || params?.["page"] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
    TError,
    TData,
    QueryKey,
    WorkspacesControllerGetWorkspacesParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkspacesControllerGetWorkspacesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>
>;
export type WorkspacesControllerGetWorkspacesInfiniteQueryError = unknown;

export function useWorkspacesControllerGetWorkspacesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
    WorkspacesControllerGetWorkspacesParams["page"]
  >,
  TError = unknown,
>(
  params: undefined | WorkspacesControllerGetWorkspacesParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData,
        QueryKey,
        WorkspacesControllerGetWorkspacesParams["page"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspacesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
    WorkspacesControllerGetWorkspacesParams["page"]
  >,
  TError = unknown,
>(
  params?: WorkspacesControllerGetWorkspacesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData,
        QueryKey,
        WorkspacesControllerGetWorkspacesParams["page"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspacesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
    WorkspacesControllerGetWorkspacesParams["page"]
  >,
  TError = unknown,
>(
  params?: WorkspacesControllerGetWorkspacesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData,
        QueryKey,
        WorkspacesControllerGetWorkspacesParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Workspaces
 */

export function useWorkspacesControllerGetWorkspacesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
    WorkspacesControllerGetWorkspacesParams["page"]
  >,
  TError = unknown,
>(
  params?: WorkspacesControllerGetWorkspacesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData,
        QueryKey,
        WorkspacesControllerGetWorkspacesParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWorkspacesControllerGetWorkspacesInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getWorkspacesControllerGetWorkspacesQueryOptions = <
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
  TError = unknown,
>(
  params?: WorkspacesControllerGetWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getWorkspacesControllerGetWorkspacesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>
  > = ({ signal }) =>
    workspacesControllerGetWorkspaces(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkspacesControllerGetWorkspacesQueryResult = NonNullable<
  Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>
>;
export type WorkspacesControllerGetWorkspacesQueryError = unknown;

export function useWorkspacesControllerGetWorkspaces<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
  TError = unknown,
>(
  params: undefined | WorkspacesControllerGetWorkspacesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaces<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
  TError = unknown,
>(
  params?: WorkspacesControllerGetWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaces<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
  TError = unknown,
>(
  params?: WorkspacesControllerGetWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Workspaces
 */

export function useWorkspacesControllerGetWorkspaces<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
  TError = unknown,
>(
  params?: WorkspacesControllerGetWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaces>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWorkspacesControllerGetWorkspacesQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves statistics for a specific workspace.
 * @summary Get Workspace Statistics
 */
export const workspacesControllerGetWorkspaceStatistics = (
  id: string,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<WorkspaceStatisticsResponseDto>(
    { url: `/api/workspaces/${id}/statistics`, method: "GET", signal },
    options,
  );
};

export const getWorkspacesControllerGetWorkspaceStatisticsQueryKey = (
  id: string,
) => {
  return [`/api/workspaces/${id}/statistics`] as const;
};

export const getWorkspacesControllerGetWorkspaceStatisticsInfiniteQueryOptions =
  <
    TData = InfiniteData<
      Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>
    >,
    TError = unknown,
  >(
    id: string,
    options?: {
      query?: Partial<
        UseInfiniteQueryOptions<
          Awaited<
            ReturnType<typeof workspacesControllerGetWorkspaceStatistics>
          >,
          TError,
          TData
        >
      >;
      request?: SecondParameter<typeof orvalClient>;
    },
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getWorkspacesControllerGetWorkspaceStatisticsQueryKey(id);

    const queryFn: QueryFunction<
      Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>
    > = ({ signal }) =>
      workspacesControllerGetWorkspaceStatistics(id, requestOptions, signal);

    return {
      queryKey,
      queryFn,
      enabled: !!id,
      ...queryOptions,
    } as UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
  };

export type WorkspacesControllerGetWorkspaceStatisticsInfiniteQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>
  >;
export type WorkspacesControllerGetWorkspaceStatisticsInfiniteQueryError =
  unknown;

export function useWorkspacesControllerGetWorkspaceStatisticsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>
  >,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof workspacesControllerGetWorkspaceStatistics>
          >,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaceStatisticsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof workspacesControllerGetWorkspaceStatistics>
          >,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaceStatisticsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Workspace Statistics
 */

export function useWorkspacesControllerGetWorkspaceStatisticsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getWorkspacesControllerGetWorkspaceStatisticsInfiniteQueryOptions(
      id,
      options,
    );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getWorkspacesControllerGetWorkspaceStatisticsQueryOptions = <
  TData = Awaited<
    ReturnType<typeof workspacesControllerGetWorkspaceStatistics>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getWorkspacesControllerGetWorkspaceStatisticsQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>
  > = ({ signal }) =>
    workspacesControllerGetWorkspaceStatistics(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkspacesControllerGetWorkspaceStatisticsQueryResult = NonNullable<
  Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>
>;
export type WorkspacesControllerGetWorkspaceStatisticsQueryError = unknown;

export function useWorkspacesControllerGetWorkspaceStatistics<
  TData = Awaited<
    ReturnType<typeof workspacesControllerGetWorkspaceStatistics>
  >,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof workspacesControllerGetWorkspaceStatistics>
          >,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaceStatistics<
  TData = Awaited<
    ReturnType<typeof workspacesControllerGetWorkspaceStatistics>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof workspacesControllerGetWorkspaceStatistics>
          >,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaceStatistics<
  TData = Awaited<
    ReturnType<typeof workspacesControllerGetWorkspaceStatistics>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Workspace Statistics
 */

export function useWorkspacesControllerGetWorkspaceStatistics<
  TData = Awaited<
    ReturnType<typeof workspacesControllerGetWorkspaceStatistics>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getWorkspacesControllerGetWorkspaceStatisticsQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves a workspace by its ID.
 * @summary Get Workspace By ID
 */
export const workspacesControllerGetWorkspaceById = (
  id: string,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<Workspace>(
    { url: `/api/workspaces/${id}`, method: "GET", signal },
    options,
  );
};

export const getWorkspacesControllerGetWorkspaceByIdQueryKey = (id: string) => {
  return [`/api/workspaces/${id}`] as const;
};

export const getWorkspacesControllerGetWorkspaceByIdInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getWorkspacesControllerGetWorkspaceByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
  > = ({ signal }) =>
    workspacesControllerGetWorkspaceById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkspacesControllerGetWorkspaceByIdInfiniteQueryResult =
  NonNullable<Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>>;
export type WorkspacesControllerGetWorkspaceByIdInfiniteQueryError = unknown;

export function useWorkspacesControllerGetWorkspaceByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
  >,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaceByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaceByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Workspace By ID
 */

export function useWorkspacesControllerGetWorkspaceByIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
  >,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getWorkspacesControllerGetWorkspaceByIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getWorkspacesControllerGetWorkspaceByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getWorkspacesControllerGetWorkspaceByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
  > = ({ signal }) =>
    workspacesControllerGetWorkspaceById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkspacesControllerGetWorkspaceByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
>;
export type WorkspacesControllerGetWorkspaceByIdQueryError = unknown;

export function useWorkspacesControllerGetWorkspaceById<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaceById<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
          TError,
          Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkspacesControllerGetWorkspaceById<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Workspace By ID
 */

export function useWorkspacesControllerGetWorkspaceById<
  TData = Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workspacesControllerGetWorkspaceById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWorkspacesControllerGetWorkspaceByIdQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates a workspace by its ID.
 * @summary Update Workspace
 */
export const workspacesControllerUpdateWorkspace = (
  id: string,
  updateWorkspaceDto: UpdateWorkspaceDto,
  options?: SecondParameter<typeof orvalClient>,
) => {
  return orvalClient<DefaultMessageResponseDto>(
    {
      url: `/api/workspaces/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateWorkspaceDto,
    },
    options,
  );
};

export const getWorkspacesControllerUpdateWorkspaceMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workspacesControllerUpdateWorkspace>>,
    TError,
    { id: string; data: UpdateWorkspaceDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workspacesControllerUpdateWorkspace>>,
  TError,
  { id: string; data: UpdateWorkspaceDto },
  TContext
> => {
  const mutationKey = ["workspacesControllerUpdateWorkspace"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workspacesControllerUpdateWorkspace>>,
    { id: string; data: UpdateWorkspaceDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return workspacesControllerUpdateWorkspace(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkspacesControllerUpdateWorkspaceMutationResult = NonNullable<
  Awaited<ReturnType<typeof workspacesControllerUpdateWorkspace>>
>;
export type WorkspacesControllerUpdateWorkspaceMutationBody =
  UpdateWorkspaceDto;
export type WorkspacesControllerUpdateWorkspaceMutationError = unknown;

/**
 * @summary Update Workspace
 */
export const useWorkspacesControllerUpdateWorkspace = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof workspacesControllerUpdateWorkspace>>,
      TError,
      { id: string; data: UpdateWorkspaceDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof workspacesControllerUpdateWorkspace>>,
  TError,
  { id: string; data: UpdateWorkspaceDto },
  TContext
> => {
  const mutationOptions =
    getWorkspacesControllerUpdateWorkspaceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Deletes a workspace by its ID.
 * @summary Delete Workspace
 */
export const workspacesControllerDeleteWorkspace = (
  id: string,
  options?: SecondParameter<typeof orvalClient>,
) => {
  return orvalClient<DefaultMessageResponseDto>(
    { url: `/api/workspaces/${id}`, method: "DELETE" },
    options,
  );
};

export const getWorkspacesControllerDeleteWorkspaceMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workspacesControllerDeleteWorkspace>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workspacesControllerDeleteWorkspace>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["workspacesControllerDeleteWorkspace"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workspacesControllerDeleteWorkspace>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return workspacesControllerDeleteWorkspace(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkspacesControllerDeleteWorkspaceMutationResult = NonNullable<
  Awaited<ReturnType<typeof workspacesControllerDeleteWorkspace>>
>;

export type WorkspacesControllerDeleteWorkspaceMutationError = unknown;

/**
 * @summary Delete Workspace
 */
export const useWorkspacesControllerDeleteWorkspace = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof workspacesControllerDeleteWorkspace>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof workspacesControllerDeleteWorkspace>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getWorkspacesControllerDeleteWorkspaceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Get API key
 * @summary Get API key
 */
export const usersControllerGetApiKey = (
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetApiKeyResponseDto>(
    { url: `/api/users/api-key`, method: "GET", signal },
    options,
  );
};

export const getUsersControllerGetApiKeyQueryKey = () => {
  return [`/api/users/api-key`] as const;
};

export const getUsersControllerGetApiKeyInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof usersControllerGetApiKey>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof usersControllerGetApiKey>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUsersControllerGetApiKeyQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof usersControllerGetApiKey>>
  > = ({ signal }) => usersControllerGetApiKey(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof usersControllerGetApiKey>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UsersControllerGetApiKeyInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerGetApiKey>>
>;
export type UsersControllerGetApiKeyInfiniteQueryError = unknown;

export function useUsersControllerGetApiKeyInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof usersControllerGetApiKey>>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof usersControllerGetApiKey>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerGetApiKey>>,
          TError,
          Awaited<ReturnType<typeof usersControllerGetApiKey>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUsersControllerGetApiKeyInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof usersControllerGetApiKey>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof usersControllerGetApiKey>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerGetApiKey>>,
          TError,
          Awaited<ReturnType<typeof usersControllerGetApiKey>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUsersControllerGetApiKeyInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof usersControllerGetApiKey>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof usersControllerGetApiKey>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get API key
 */

export function useUsersControllerGetApiKeyInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof usersControllerGetApiKey>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof usersControllerGetApiKey>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUsersControllerGetApiKeyInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getUsersControllerGetApiKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof usersControllerGetApiKey>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerGetApiKey>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUsersControllerGetApiKeyQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof usersControllerGetApiKey>>
  > = ({ signal }) => usersControllerGetApiKey(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof usersControllerGetApiKey>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UsersControllerGetApiKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerGetApiKey>>
>;
export type UsersControllerGetApiKeyQueryError = unknown;

export function useUsersControllerGetApiKey<
  TData = Awaited<ReturnType<typeof usersControllerGetApiKey>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerGetApiKey>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerGetApiKey>>,
          TError,
          Awaited<ReturnType<typeof usersControllerGetApiKey>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUsersControllerGetApiKey<
  TData = Awaited<ReturnType<typeof usersControllerGetApiKey>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerGetApiKey>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerGetApiKey>>,
          TError,
          Awaited<ReturnType<typeof usersControllerGetApiKey>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUsersControllerGetApiKey<
  TData = Awaited<ReturnType<typeof usersControllerGetApiKey>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerGetApiKey>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get API key
 */

export function useUsersControllerGetApiKey<
  TData = Awaited<ReturnType<typeof usersControllerGetApiKey>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerGetApiKey>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUsersControllerGetApiKeyQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Regenerates the API key for a user.
 * @summary Regenerate API key
 */
export const usersControllerRegenerateApiKey = (
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetApiKeyResponseDto>(
    { url: `/api/users/api-key/regenerate`, method: "GET", signal },
    options,
  );
};

export const getUsersControllerRegenerateApiKeyQueryKey = () => {
  return [`/api/users/api-key/regenerate`] as const;
};

export const getUsersControllerRegenerateApiKeyInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUsersControllerRegenerateApiKeyQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>
  > = ({ signal }) => usersControllerRegenerateApiKey(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UsersControllerRegenerateApiKeyInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>
>;
export type UsersControllerRegenerateApiKeyInfiniteQueryError = unknown;

export function useUsersControllerRegenerateApiKeyInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>
  >,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
          TError,
          Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUsersControllerRegenerateApiKeyInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
          TError,
          Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUsersControllerRegenerateApiKeyInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Regenerate API key
 */

export function useUsersControllerRegenerateApiKeyInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getUsersControllerRegenerateApiKeyInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getUsersControllerRegenerateApiKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUsersControllerRegenerateApiKeyQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>
  > = ({ signal }) => usersControllerRegenerateApiKey(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UsersControllerRegenerateApiKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>
>;
export type UsersControllerRegenerateApiKeyQueryError = unknown;

export function useUsersControllerRegenerateApiKey<
  TData = Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
          TError,
          Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUsersControllerRegenerateApiKey<
  TData = Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
          TError,
          Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUsersControllerRegenerateApiKey<
  TData = Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Regenerate API key
 */

export function useUsersControllerRegenerateApiKey<
  TData = Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerRegenerateApiKey>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUsersControllerRegenerateApiKeyQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const rootControllerGetHealth = (
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<void>({ url: `/`, method: "GET", signal }, options);
};

export const getRootControllerGetHealthQueryKey = () => {
  return [`/`] as const;
};

export const getRootControllerGetHealthInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof rootControllerGetHealth>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof rootControllerGetHealth>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRootControllerGetHealthQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rootControllerGetHealth>>
  > = ({ signal }) => rootControllerGetHealth(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof rootControllerGetHealth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RootControllerGetHealthInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof rootControllerGetHealth>>
>;
export type RootControllerGetHealthInfiniteQueryError = unknown;

export function useRootControllerGetHealthInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rootControllerGetHealth>>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetHealth>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootControllerGetHealth>>,
          TError,
          Awaited<ReturnType<typeof rootControllerGetHealth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRootControllerGetHealthInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rootControllerGetHealth>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetHealth>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootControllerGetHealth>>,
          TError,
          Awaited<ReturnType<typeof rootControllerGetHealth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRootControllerGetHealthInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rootControllerGetHealth>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetHealth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useRootControllerGetHealthInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rootControllerGetHealth>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetHealth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRootControllerGetHealthInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getRootControllerGetHealthQueryOptions = <
  TData = Awaited<ReturnType<typeof rootControllerGetHealth>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof rootControllerGetHealth>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRootControllerGetHealthQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rootControllerGetHealth>>
  > = ({ signal }) => rootControllerGetHealth(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof rootControllerGetHealth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RootControllerGetHealthQueryResult = NonNullable<
  Awaited<ReturnType<typeof rootControllerGetHealth>>
>;
export type RootControllerGetHealthQueryError = unknown;

export function useRootControllerGetHealth<
  TData = Awaited<ReturnType<typeof rootControllerGetHealth>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetHealth>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootControllerGetHealth>>,
          TError,
          Awaited<ReturnType<typeof rootControllerGetHealth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRootControllerGetHealth<
  TData = Awaited<ReturnType<typeof rootControllerGetHealth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetHealth>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootControllerGetHealth>>,
          TError,
          Awaited<ReturnType<typeof rootControllerGetHealth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRootControllerGetHealth<
  TData = Awaited<ReturnType<typeof rootControllerGetHealth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetHealth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useRootControllerGetHealth<
  TData = Awaited<ReturnType<typeof rootControllerGetHealth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rootControllerGetHealth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRootControllerGetHealthQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates the first admin user in the system.
 * @summary Creates the first admin user in the system.
 */
export const rootControllerCreateFirstAdmin = (
  createFirstAdminDto: CreateFirstAdminDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<DefaultMessageResponseDto>(
    {
      url: `/api/init-admin`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createFirstAdminDto,
      signal,
    },
    options,
  );
};

export const getRootControllerCreateFirstAdminMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rootControllerCreateFirstAdmin>>,
    TError,
    { data: CreateFirstAdminDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof rootControllerCreateFirstAdmin>>,
  TError,
  { data: CreateFirstAdminDto },
  TContext
> => {
  const mutationKey = ["rootControllerCreateFirstAdmin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rootControllerCreateFirstAdmin>>,
    { data: CreateFirstAdminDto }
  > = (props) => {
    const { data } = props ?? {};

    return rootControllerCreateFirstAdmin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RootControllerCreateFirstAdminMutationResult = NonNullable<
  Awaited<ReturnType<typeof rootControllerCreateFirstAdmin>>
>;
export type RootControllerCreateFirstAdminMutationBody = CreateFirstAdminDto;
export type RootControllerCreateFirstAdminMutationError = unknown;

/**
 * @summary Creates the first admin user in the system.
 */
export const useRootControllerCreateFirstAdmin = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof rootControllerCreateFirstAdmin>>,
      TError,
      { data: CreateFirstAdminDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof rootControllerCreateFirstAdmin>>,
  TError,
  { data: CreateFirstAdminDto },
  TContext
> => {
  const mutationOptions =
    getRootControllerCreateFirstAdminMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieves a list of jobs that the user is a member of.
 * @summary Get Jobs
 */
export const jobsRegistryControllerGetManyJobs = (
  params?: JobsRegistryControllerGetManyJobsParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyJobDto>(
    { url: `/api/jobs-registry`, method: "GET", params, signal },
    options,
  );
};

export const getJobsRegistryControllerGetManyJobsQueryKey = (
  params?: JobsRegistryControllerGetManyJobsParams,
) => {
  return [`/api/jobs-registry`, ...(params ? [params] : [])] as const;
};

export const getJobsRegistryControllerGetManyJobsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
    JobsRegistryControllerGetManyJobsParams["page"]
  >,
  TError = unknown,
>(
  params?: JobsRegistryControllerGetManyJobsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetManyJobsParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getJobsRegistryControllerGetManyJobsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
    QueryKey,
    JobsRegistryControllerGetManyJobsParams["page"]
  > = ({ signal, pageParam }) =>
    jobsRegistryControllerGetManyJobs(
      { ...params, page: pageParam || params?.["page"] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
    TError,
    TData,
    QueryKey,
    JobsRegistryControllerGetManyJobsParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type JobsRegistryControllerGetManyJobsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>
>;
export type JobsRegistryControllerGetManyJobsInfiniteQueryError = unknown;

export function useJobsRegistryControllerGetManyJobsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
    JobsRegistryControllerGetManyJobsParams["page"]
  >,
  TError = unknown,
>(
  params: undefined | JobsRegistryControllerGetManyJobsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetManyJobsParams["page"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetManyJobsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
    JobsRegistryControllerGetManyJobsParams["page"]
  >,
  TError = unknown,
>(
  params?: JobsRegistryControllerGetManyJobsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetManyJobsParams["page"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetManyJobsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
    JobsRegistryControllerGetManyJobsParams["page"]
  >,
  TError = unknown,
>(
  params?: JobsRegistryControllerGetManyJobsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetManyJobsParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Jobs
 */

export function useJobsRegistryControllerGetManyJobsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
    JobsRegistryControllerGetManyJobsParams["page"]
  >,
  TError = unknown,
>(
  params?: JobsRegistryControllerGetManyJobsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetManyJobsParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getJobsRegistryControllerGetManyJobsInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getJobsRegistryControllerGetManyJobsQueryOptions = <
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
  TError = unknown,
>(
  params?: JobsRegistryControllerGetManyJobsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getJobsRegistryControllerGetManyJobsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>
  > = ({ signal }) =>
    jobsRegistryControllerGetManyJobs(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type JobsRegistryControllerGetManyJobsQueryResult = NonNullable<
  Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>
>;
export type JobsRegistryControllerGetManyJobsQueryError = unknown;

export function useJobsRegistryControllerGetManyJobs<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
  TError = unknown,
>(
  params: undefined | JobsRegistryControllerGetManyJobsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetManyJobs<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
  TError = unknown,
>(
  params?: JobsRegistryControllerGetManyJobsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetManyJobs<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
  TError = unknown,
>(
  params?: JobsRegistryControllerGetManyJobsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Jobs
 */

export function useJobsRegistryControllerGetManyJobs<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
  TError = unknown,
>(
  params?: JobsRegistryControllerGetManyJobsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetManyJobs>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getJobsRegistryControllerGetManyJobsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Retrieves the next job associated with the given worker that has not yet been started.
 */
export const jobsRegistryControllerGetNextJob = (
  workerId: string,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetNextJobResponseDto>(
    { url: `/api/jobs-registry/${workerId}/next`, method: "GET", signal },
    options,
  );
};

export const getJobsRegistryControllerGetNextJobQueryKey = (
  workerId: string,
) => {
  return [`/api/jobs-registry/${workerId}/next`] as const;
};

export const getJobsRegistryControllerGetNextJobInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
  >,
  TError = unknown,
>(
  workerId: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getJobsRegistryControllerGetNextJobQueryKey(workerId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
  > = ({ signal }) =>
    jobsRegistryControllerGetNextJob(workerId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!workerId,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type JobsRegistryControllerGetNextJobInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
>;
export type JobsRegistryControllerGetNextJobInfiniteQueryError = unknown;

export function useJobsRegistryControllerGetNextJobInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
  >,
  TError = unknown,
>(
  workerId: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetNextJobInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
  >,
  TError = unknown,
>(
  workerId: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetNextJobInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
  >,
  TError = unknown,
>(
  workerId: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Retrieves the next job associated with the given worker that has not yet been started.
 */

export function useJobsRegistryControllerGetNextJobInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
  >,
  TError = unknown,
>(
  workerId: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getJobsRegistryControllerGetNextJobInfiniteQueryOptions(
    workerId,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getJobsRegistryControllerGetNextJobQueryOptions = <
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
  TError = unknown,
>(
  workerId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getJobsRegistryControllerGetNextJobQueryKey(workerId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
  > = ({ signal }) =>
    jobsRegistryControllerGetNextJob(workerId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!workerId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type JobsRegistryControllerGetNextJobQueryResult = NonNullable<
  Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
>;
export type JobsRegistryControllerGetNextJobQueryError = unknown;

export function useJobsRegistryControllerGetNextJob<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
  TError = unknown,
>(
  workerId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetNextJob<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
  TError = unknown,
>(
  workerId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetNextJob<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
  TError = unknown,
>(
  workerId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Retrieves the next job associated with the given worker that has not yet been started.
 */

export function useJobsRegistryControllerGetNextJob<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
  TError = unknown,
>(
  workerId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetNextJob>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getJobsRegistryControllerGetNextJobQueryOptions(
    workerId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets jobs by asset ID, filtered by status and worker name.
 */
export const jobsRegistryControllerGetJobsByAssetId = (
  assetId: string,
  params: JobsRegistryControllerGetJobsByAssetIdParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyJobDto>(
    {
      url: `/api/jobs-registry/asset/${assetId}`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getJobsRegistryControllerGetJobsByAssetIdQueryKey = (
  assetId: string,
  params: JobsRegistryControllerGetJobsByAssetIdParams,
) => {
  return [
    `/api/jobs-registry/asset/${assetId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getJobsRegistryControllerGetJobsByAssetIdInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
    JobsRegistryControllerGetJobsByAssetIdParams["page"]
  >,
  TError = unknown,
>(
  assetId: string,
  params: JobsRegistryControllerGetJobsByAssetIdParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetJobsByAssetIdParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getJobsRegistryControllerGetJobsByAssetIdQueryKey(assetId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
    QueryKey,
    JobsRegistryControllerGetJobsByAssetIdParams["page"]
  > = ({ signal, pageParam }) =>
    jobsRegistryControllerGetJobsByAssetId(
      assetId,
      { ...params, page: pageParam || params?.["page"] },
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!assetId,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
    TError,
    TData,
    QueryKey,
    JobsRegistryControllerGetJobsByAssetIdParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type JobsRegistryControllerGetJobsByAssetIdInfiniteQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>
  >;
export type JobsRegistryControllerGetJobsByAssetIdInfiniteQueryError = unknown;

export function useJobsRegistryControllerGetJobsByAssetIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
    JobsRegistryControllerGetJobsByAssetIdParams["page"]
  >,
  TError = unknown,
>(
  assetId: string,
  params: JobsRegistryControllerGetJobsByAssetIdParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetJobsByAssetIdParams["page"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetJobsByAssetIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
    JobsRegistryControllerGetJobsByAssetIdParams["page"]
  >,
  TError = unknown,
>(
  assetId: string,
  params: JobsRegistryControllerGetJobsByAssetIdParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetJobsByAssetIdParams["page"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetJobsByAssetIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
    JobsRegistryControllerGetJobsByAssetIdParams["page"]
  >,
  TError = unknown,
>(
  assetId: string,
  params: JobsRegistryControllerGetJobsByAssetIdParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetJobsByAssetIdParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets jobs by asset ID, filtered by status and worker name.
 */

export function useJobsRegistryControllerGetJobsByAssetIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
    JobsRegistryControllerGetJobsByAssetIdParams["page"]
  >,
  TError = unknown,
>(
  assetId: string,
  params: JobsRegistryControllerGetJobsByAssetIdParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetJobsByAssetIdParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getJobsRegistryControllerGetJobsByAssetIdInfiniteQueryOptions(
      assetId,
      params,
      options,
    );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getJobsRegistryControllerGetJobsByAssetIdQueryOptions = <
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
  TError = unknown,
>(
  assetId: string,
  params: JobsRegistryControllerGetJobsByAssetIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getJobsRegistryControllerGetJobsByAssetIdQueryKey(assetId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>
  > = ({ signal }) =>
    jobsRegistryControllerGetJobsByAssetId(
      assetId,
      params,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!assetId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type JobsRegistryControllerGetJobsByAssetIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>
>;
export type JobsRegistryControllerGetJobsByAssetIdQueryError = unknown;

export function useJobsRegistryControllerGetJobsByAssetId<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
  TError = unknown,
>(
  assetId: string,
  params: JobsRegistryControllerGetJobsByAssetIdParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetJobsByAssetId<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
  TError = unknown,
>(
  assetId: string,
  params: JobsRegistryControllerGetJobsByAssetIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetJobsByAssetId<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
  TError = unknown,
>(
  assetId: string,
  params: JobsRegistryControllerGetJobsByAssetIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets jobs by asset ID, filtered by status and worker name.
 */

export function useJobsRegistryControllerGetJobsByAssetId<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
  TError = unknown,
>(
  assetId: string,
  params: JobsRegistryControllerGetJobsByAssetIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByAssetId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getJobsRegistryControllerGetJobsByAssetIdQueryOptions(
    assetId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets jobs by target ID, filtered by status and worker name.
 */
export const jobsRegistryControllerGetJobsByTargetId = (
  targetId: string,
  params: JobsRegistryControllerGetJobsByTargetIdParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyJobDto>(
    {
      url: `/api/jobs-registry/target/${targetId}`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getJobsRegistryControllerGetJobsByTargetIdQueryKey = (
  targetId: string,
  params: JobsRegistryControllerGetJobsByTargetIdParams,
) => {
  return [
    `/api/jobs-registry/target/${targetId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getJobsRegistryControllerGetJobsByTargetIdInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
    JobsRegistryControllerGetJobsByTargetIdParams["page"]
  >,
  TError = unknown,
>(
  targetId: string,
  params: JobsRegistryControllerGetJobsByTargetIdParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetJobsByTargetIdParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getJobsRegistryControllerGetJobsByTargetIdQueryKey(targetId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
    QueryKey,
    JobsRegistryControllerGetJobsByTargetIdParams["page"]
  > = ({ signal, pageParam }) =>
    jobsRegistryControllerGetJobsByTargetId(
      targetId,
      { ...params, page: pageParam || params?.["page"] },
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!targetId,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
    TError,
    TData,
    QueryKey,
    JobsRegistryControllerGetJobsByTargetIdParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type JobsRegistryControllerGetJobsByTargetIdInfiniteQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>
  >;
export type JobsRegistryControllerGetJobsByTargetIdInfiniteQueryError = unknown;

export function useJobsRegistryControllerGetJobsByTargetIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
    JobsRegistryControllerGetJobsByTargetIdParams["page"]
  >,
  TError = unknown,
>(
  targetId: string,
  params: JobsRegistryControllerGetJobsByTargetIdParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetJobsByTargetIdParams["page"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetJobsByTargetIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
    JobsRegistryControllerGetJobsByTargetIdParams["page"]
  >,
  TError = unknown,
>(
  targetId: string,
  params: JobsRegistryControllerGetJobsByTargetIdParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetJobsByTargetIdParams["page"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetJobsByTargetIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
    JobsRegistryControllerGetJobsByTargetIdParams["page"]
  >,
  TError = unknown,
>(
  targetId: string,
  params: JobsRegistryControllerGetJobsByTargetIdParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetJobsByTargetIdParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets jobs by target ID, filtered by status and worker name.
 */

export function useJobsRegistryControllerGetJobsByTargetIdInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
    JobsRegistryControllerGetJobsByTargetIdParams["page"]
  >,
  TError = unknown,
>(
  targetId: string,
  params: JobsRegistryControllerGetJobsByTargetIdParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
        TError,
        TData,
        QueryKey,
        JobsRegistryControllerGetJobsByTargetIdParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getJobsRegistryControllerGetJobsByTargetIdInfiniteQueryOptions(
      targetId,
      params,
      options,
    );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getJobsRegistryControllerGetJobsByTargetIdQueryOptions = <
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
  TError = unknown,
>(
  targetId: string,
  params: JobsRegistryControllerGetJobsByTargetIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getJobsRegistryControllerGetJobsByTargetIdQueryKey(targetId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>
  > = ({ signal }) =>
    jobsRegistryControllerGetJobsByTargetId(
      targetId,
      params,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!targetId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type JobsRegistryControllerGetJobsByTargetIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>
>;
export type JobsRegistryControllerGetJobsByTargetIdQueryError = unknown;

export function useJobsRegistryControllerGetJobsByTargetId<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
  TError = unknown,
>(
  targetId: string,
  params: JobsRegistryControllerGetJobsByTargetIdParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetJobsByTargetId<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
  TError = unknown,
>(
  targetId: string,
  params: JobsRegistryControllerGetJobsByTargetIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
          TError,
          Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useJobsRegistryControllerGetJobsByTargetId<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
  TError = unknown,
>(
  targetId: string,
  params: JobsRegistryControllerGetJobsByTargetIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets jobs by target ID, filtered by status and worker name.
 */

export function useJobsRegistryControllerGetJobsByTargetId<
  TData = Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
  TError = unknown,
>(
  targetId: string,
  params: JobsRegistryControllerGetJobsByTargetIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobsRegistryControllerGetJobsByTargetId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getJobsRegistryControllerGetJobsByTargetIdQueryOptions(
    targetId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Updates the result of a job with the given worker ID.
 */
export const jobsRegistryControllerUpdateResult = (
  workerId: string,
  updateResultDto: UpdateResultDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<AppResponseSerialization>(
    {
      url: `/api/jobs-registry/${workerId}/result`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: updateResultDto,
      signal,
    },
    options,
  );
};

export const getJobsRegistryControllerUpdateResultMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof jobsRegistryControllerUpdateResult>>,
    TError,
    { workerId: string; data: UpdateResultDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof jobsRegistryControllerUpdateResult>>,
  TError,
  { workerId: string; data: UpdateResultDto },
  TContext
> => {
  const mutationKey = ["jobsRegistryControllerUpdateResult"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof jobsRegistryControllerUpdateResult>>,
    { workerId: string; data: UpdateResultDto }
  > = (props) => {
    const { workerId, data } = props ?? {};

    return jobsRegistryControllerUpdateResult(workerId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type JobsRegistryControllerUpdateResultMutationResult = NonNullable<
  Awaited<ReturnType<typeof jobsRegistryControllerUpdateResult>>
>;
export type JobsRegistryControllerUpdateResultMutationBody = UpdateResultDto;
export type JobsRegistryControllerUpdateResultMutationError = unknown;

/**
 * @summary Updates the result of a job with the given worker ID.
 */
export const useJobsRegistryControllerUpdateResult = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof jobsRegistryControllerUpdateResult>>,
      TError,
      { workerId: string; data: UpdateResultDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof jobsRegistryControllerUpdateResult>>,
  TError,
  { workerId: string; data: UpdateResultDto },
  TContext
> => {
  const mutationOptions =
    getJobsRegistryControllerUpdateResultMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieves a list of assets associated with the given target.
 * @summary Get assets in target
 */
export const assetsControllerGetAssets = (
  params: AssetsControllerGetAssetsParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyGetAssetsResponseDtoDto>(
    { url: `/api/assets`, method: "GET", params, signal },
    options,
  );
};

export const getAssetsControllerGetAssetsQueryKey = (
  params: AssetsControllerGetAssetsParams,
) => {
  return [`/api/assets`, ...(params ? [params] : [])] as const;
};

export const getAssetsControllerGetAssetsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetAssets>>,
    AssetsControllerGetAssetsParams["page"]
  >,
  TError = unknown,
>(
  params: AssetsControllerGetAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetAssetsParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAssetsControllerGetAssetsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsControllerGetAssets>>,
    QueryKey,
    AssetsControllerGetAssetsParams["page"]
  > = ({ signal, pageParam }) =>
    assetsControllerGetAssets(
      { ...params, page: pageParam || params?.["page"] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof assetsControllerGetAssets>>,
    TError,
    TData,
    QueryKey,
    AssetsControllerGetAssetsParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AssetsControllerGetAssetsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsControllerGetAssets>>
>;
export type AssetsControllerGetAssetsInfiniteQueryError = unknown;

export function useAssetsControllerGetAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetAssets>>,
    AssetsControllerGetAssetsParams["page"]
  >,
  TError = unknown,
>(
  params: AssetsControllerGetAssetsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetAssetsParams["page"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetAssets>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetAssets>>,
    AssetsControllerGetAssetsParams["page"]
  >,
  TError = unknown,
>(
  params: AssetsControllerGetAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetAssetsParams["page"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetAssets>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetAssets>>,
    AssetsControllerGetAssetsParams["page"]
  >,
  TError = unknown,
>(
  params: AssetsControllerGetAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetAssetsParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get assets in target
 */

export function useAssetsControllerGetAssetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetAssets>>,
    AssetsControllerGetAssetsParams["page"]
  >,
  TError = unknown,
>(
  params: AssetsControllerGetAssetsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssets>>,
        TError,
        TData,
        QueryKey,
        AssetsControllerGetAssetsParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAssetsControllerGetAssetsInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAssetsControllerGetAssetsQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsControllerGetAssets>>,
  TError = unknown,
>(
  params: AssetsControllerGetAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAssetsControllerGetAssetsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsControllerGetAssets>>
  > = ({ signal }) => assetsControllerGetAssets(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsControllerGetAssets>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AssetsControllerGetAssetsQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsControllerGetAssets>>
>;
export type AssetsControllerGetAssetsQueryError = unknown;

export function useAssetsControllerGetAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetAssets>>,
  TError = unknown,
>(
  params: AssetsControllerGetAssetsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssets>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetAssets>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetAssets>>,
  TError = unknown,
>(
  params: AssetsControllerGetAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssets>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof assetsControllerGetAssets>>,
          TError,
          Awaited<ReturnType<typeof assetsControllerGetAssets>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAssetsControllerGetAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetAssets>>,
  TError = unknown,
>(
  params: AssetsControllerGetAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get assets in target
 */

export function useAssetsControllerGetAssets<
  TData = Awaited<ReturnType<typeof assetsControllerGetAssets>>,
  TError = unknown,
>(
  params: AssetsControllerGetAssetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof assetsControllerGetAssets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAssetsControllerGetAssetsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const workersControllerAlive = (
  workerAliveDto: WorkerAliveDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<void>(
    {
      url: `/api/workers/alive`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: workerAliveDto,
      signal,
    },
    options,
  );
};

export const getWorkersControllerAliveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workersControllerAlive>>,
    TError,
    { data: WorkerAliveDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workersControllerAlive>>,
  TError,
  { data: WorkerAliveDto },
  TContext
> => {
  const mutationKey = ["workersControllerAlive"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workersControllerAlive>>,
    { data: WorkerAliveDto }
  > = (props) => {
    const { data } = props ?? {};

    return workersControllerAlive(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkersControllerAliveMutationResult = NonNullable<
  Awaited<ReturnType<typeof workersControllerAlive>>
>;
export type WorkersControllerAliveMutationBody = WorkerAliveDto;
export type WorkersControllerAliveMutationError = unknown;

export const useWorkersControllerAlive = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof workersControllerAlive>>,
      TError,
      { data: WorkerAliveDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof workersControllerAlive>>,
  TError,
  { data: WorkerAliveDto },
  TContext
> => {
  const mutationOptions = getWorkersControllerAliveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Worker join the cluster
 * @summary Worker join
 */
export const workersControllerJoin = (
  workerJoinDto: WorkerJoinDto,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<WorkerInstance>(
    {
      url: `/api/workers/join`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: workerJoinDto,
      signal,
    },
    options,
  );
};

export const getWorkersControllerJoinMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workersControllerJoin>>,
    TError,
    { data: WorkerJoinDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workersControllerJoin>>,
  TError,
  { data: WorkerJoinDto },
  TContext
> => {
  const mutationKey = ["workersControllerJoin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workersControllerJoin>>,
    { data: WorkerJoinDto }
  > = (props) => {
    const { data } = props ?? {};

    return workersControllerJoin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkersControllerJoinMutationResult = NonNullable<
  Awaited<ReturnType<typeof workersControllerJoin>>
>;
export type WorkersControllerJoinMutationBody = WorkerJoinDto;
export type WorkersControllerJoinMutationError = unknown;

/**
 * @summary Worker join
 */
export const useWorkersControllerJoin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof workersControllerJoin>>,
      TError,
      { data: WorkerJoinDto },
      TContext
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof workersControllerJoin>>,
  TError,
  { data: WorkerJoinDto },
  TContext
> => {
  const mutationOptions = getWorkersControllerJoinMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Gets all workers with pagination and sorting.
 */
export const workersControllerGetWorkers = (
  params?: WorkersControllerGetWorkersParams,
  options?: SecondParameter<typeof orvalClient>,
  signal?: AbortSignal,
) => {
  return orvalClient<GetManyWorkerInstanceDto>(
    { url: `/api/workers`, method: "GET", params, signal },
    options,
  );
};

export const getWorkersControllerGetWorkersQueryKey = (
  params?: WorkersControllerGetWorkersParams,
) => {
  return [`/api/workers`, ...(params ? [params] : [])] as const;
};

export const getWorkersControllerGetWorkersInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof workersControllerGetWorkers>>,
    WorkersControllerGetWorkersParams["page"]
  >,
  TError = unknown,
>(
  params?: WorkersControllerGetWorkersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData,
        QueryKey,
        WorkersControllerGetWorkersParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getWorkersControllerGetWorkersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workersControllerGetWorkers>>,
    QueryKey,
    WorkersControllerGetWorkersParams["page"]
  > = ({ signal, pageParam }) =>
    workersControllerGetWorkers(
      { ...params, page: pageParam || params?.["page"] },
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof workersControllerGetWorkers>>,
    TError,
    TData,
    QueryKey,
    WorkersControllerGetWorkersParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkersControllerGetWorkersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof workersControllerGetWorkers>>
>;
export type WorkersControllerGetWorkersInfiniteQueryError = unknown;

export function useWorkersControllerGetWorkersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workersControllerGetWorkers>>,
    WorkersControllerGetWorkersParams["page"]
  >,
  TError = unknown,
>(
  params: undefined | WorkersControllerGetWorkersParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData,
        QueryKey,
        WorkersControllerGetWorkersParams["page"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof workersControllerGetWorkers>>,
          TError,
          Awaited<ReturnType<typeof workersControllerGetWorkers>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkersControllerGetWorkersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workersControllerGetWorkers>>,
    WorkersControllerGetWorkersParams["page"]
  >,
  TError = unknown,
>(
  params?: WorkersControllerGetWorkersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData,
        QueryKey,
        WorkersControllerGetWorkersParams["page"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof workersControllerGetWorkers>>,
          TError,
          Awaited<ReturnType<typeof workersControllerGetWorkers>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkersControllerGetWorkersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workersControllerGetWorkers>>,
    WorkersControllerGetWorkersParams["page"]
  >,
  TError = unknown,
>(
  params?: WorkersControllerGetWorkersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData,
        QueryKey,
        WorkersControllerGetWorkersParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets all workers with pagination and sorting.
 */

export function useWorkersControllerGetWorkersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof workersControllerGetWorkers>>,
    WorkersControllerGetWorkersParams["page"]
  >,
  TError = unknown,
>(
  params?: WorkersControllerGetWorkersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData,
        QueryKey,
        WorkersControllerGetWorkersParams["page"]
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWorkersControllerGetWorkersInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getWorkersControllerGetWorkersQueryOptions = <
  TData = Awaited<ReturnType<typeof workersControllerGetWorkers>>,
  TError = unknown,
>(
  params?: WorkersControllerGetWorkersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getWorkersControllerGetWorkersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workersControllerGetWorkers>>
  > = ({ signal }) =>
    workersControllerGetWorkers(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof workersControllerGetWorkers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkersControllerGetWorkersQueryResult = NonNullable<
  Awaited<ReturnType<typeof workersControllerGetWorkers>>
>;
export type WorkersControllerGetWorkersQueryError = unknown;

export function useWorkersControllerGetWorkers<
  TData = Awaited<ReturnType<typeof workersControllerGetWorkers>>,
  TError = unknown,
>(
  params: undefined | WorkersControllerGetWorkersParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof workersControllerGetWorkers>>,
          TError,
          Awaited<ReturnType<typeof workersControllerGetWorkers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkersControllerGetWorkers<
  TData = Awaited<ReturnType<typeof workersControllerGetWorkers>>,
  TError = unknown,
>(
  params?: WorkersControllerGetWorkersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof workersControllerGetWorkers>>,
          TError,
          Awaited<ReturnType<typeof workersControllerGetWorkers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWorkersControllerGetWorkers<
  TData = Awaited<ReturnType<typeof workersControllerGetWorkers>>,
  TError = unknown,
>(
  params?: WorkersControllerGetWorkersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets all workers with pagination and sorting.
 */

export function useWorkersControllerGetWorkers<
  TData = Awaited<ReturnType<typeof workersControllerGetWorkers>>,
  TError = unknown,
>(
  params?: WorkersControllerGetWorkersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workersControllerGetWorkers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWorkersControllerGetWorkersQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
