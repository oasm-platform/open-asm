
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useWorkspaceSelector } from "@/hooks/useWorkspaceSelector";
import { useVulnerabilitiesControllerGetVulnerabilitiesSeverity } from "@/services/apis/gen/queries";
import { Cell, Legend, Pie, PieChart, ResponsiveContainer, Tooltip } from 'recharts';



// Colors matching VulnerabilitiesStatistic component
// Critical: red-500, High: orange-500, Medium: yellow-500, Low: blue-500, Info: default
const COLORS = ['#ef4444', '#f97316', '#eab308', '#3b82f6', '#94a3b8'];

// Custom legend formatter to capitalize first letter
const renderColorfulLegendText = (value: string) => {
  return (
    <span className="capitalize">
      {value.charAt(0).toUpperCase() + value.slice(1)}
    </span>
  );
};

// Custom tooltip with rounded corners
const CustomTooltip = ({ active, payload }: { active?: boolean; payload?: { name: string; value: string }[] }) => {
  if (active && payload && payload.length) {
    return (
      <div className="rounded-md border bg-background p-2 shadow-sm">
        <p className="font-medium">{`${payload[0].name}: ${payload[0].value}`}</p>
      </div>
    );
  }

  return null;
};

export default function VulnerabilitySeverityDonutChart() {
  const { selectedWorkspace } = useWorkspaceSelector();
  const { data: response } = useVulnerabilitiesControllerGetVulnerabilitiesSeverity({
    workspaceId: selectedWorkspace ?? "",
  });
  const data = response?.data
  if (!data || data.length === 0) return null

  // Ensure data is ordered correctly: critical, high, medium, low, info
  const orderedData = [
    data.find(item => item.severity === 'critical'),
    data.find(item => item.severity === 'high'),
    data.find(item => item.severity === 'medium'),
    data.find(item => item.severity === 'low'),
    data.find(item => item.severity === 'info')
  ].filter(item => item !== undefined) as typeof data;

  return (
      <Card className="w-full">
          <CardHeader>
              <CardTitle>Vulnerability Severity</CardTitle>
          </CardHeader>
          <CardContent className="p-0">
              <ResponsiveContainer width="100%" height={300}>
                  <PieChart>
                      <Pie
                          data={orderedData.map((item) => ({ name: item.severity, value: item.count }))}
                          cx="50%"
                          cy="50%"
                          innerRadius={50}
                          outerRadius={100}
                          fill="#8884d8"
                          dataKey="value"
                          labelLine={false}
                          stroke="none"
                      >
                          {orderedData.map((_, index) => (
                              <Cell
                                  key={`cell-${index}`}
                                  fill={COLORS[index % COLORS.length]}
                                  stroke="none"
                              />
                          ))}
                      </Pie>
                      <Tooltip content={<CustomTooltip />} />
                      <Legend
                          formatter={renderColorfulLegendText}
                      />
                  </PieChart>
              </ResponsiveContainer>
          </CardContent>
      </Card >
  );
}
