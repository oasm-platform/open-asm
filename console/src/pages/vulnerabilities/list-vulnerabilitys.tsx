import { Badge } from "@/components/ui/badge";
import { DataTable } from "@/components/ui/data-table";
import SeverityBadge from "@/components/ui/severity-badge";
import { useServerDataTable } from "@/hooks/useServerDataTable";
import { useWorkspaceSelector } from "@/hooks/useWorkspaceSelector";
import type { Vulnerability } from "@/services/apis/gen/queries";
import { useVulnerabilitiesControllerGetVulnerabilities } from "@/services/apis/gen/queries";
import { type ColumnDef } from "@tanstack/react-table";
import { ExternalLink, Info } from "lucide-react";
import { useLocation, useNavigate } from "react-router-dom";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

export const vulnerabilityColumns: ColumnDef<Vulnerability, any>[] = [
    {
        accessorKey: "severity",
        header: "Severity",
        size: 120,
        cell: ({ row }) => {
            const value = String(row.getValue("severity")).toLowerCase();
            return (
                <div className="min-h-[60px] flex items-center">
                    <SeverityBadge severity={value} />
                </div>
            );
        },
    },
    {
        accessorKey: "name",
        header: "Details",
        size: 300,
        enableHiding: false,
        cell: ({ row }) => {
            const data = row.original;
            const value: string = row.getValue("name");
            const cveId: string = row.getValue("cveId") || "";

            return (
                <div className="flex flex-col gap-2 py-2 justify-center min-h-[60px]">
                    <div className="flex items-center gap-2">
                        <div className="font-medium">{value}</div>
                        {data.description && (
                            <TooltipProvider>
                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Info size={14} className="text-muted-foreground cursor-help" />
                                    </TooltipTrigger>
                                    <TooltipContent className="max-w-xs text-sm">
                                        {data.description}
                                    </TooltipContent>
                                </Tooltip>
                            </TooltipProvider>
                        )}
                    </div>
                    {cveId && (
                        <div className="text-sm text-muted-foreground">
                            {cveId}
                        </div>
                    )}
                </div>
            );
        },
    },
    {
        accessorKey: "cveId",
        header: "CVE ID",
        size: 150,
        cell: ({ row }) => {
            const value: string = row.getValue("cveId");
            return (
                <div className="min-h-[60px] flex items-center">
                    {value ? (
                        <div className="font-medium">{value}</div>
                    ) : (
                        <div className="text-muted-foreground">Not matched</div>
                    )}
                </div>
            );
        },
    },
    {
        accessorKey: "affectedUrl",
        header: "Affected URL",
        size: 200,
        cell: ({ row }) => {
            const value: string = row.getValue("affectedUrl");
            return (
                <div className="flex items-center min-h-[60px]">
                    {value ? (
                        <div className="flex items-center gap-1">
                            <span className="truncate">{value}</span>
                            <ExternalLink size={14} className="text-muted-foreground flex-shrink-0" />
                        </div>
                    ) : (
                        <div className="text-muted-foreground">Not matched</div>
                    )}
                </div>
            );
        },
    },
    {
        accessorKey: "cvssMetric",
        header: "CVSS Score",
        size: 120,
        cell: ({ row }) => {
            const value: string = row.getValue("cvssMetric");
            return (
                <div className="min-h-[60px] flex items-center">
                    {value ? (
                        <Badge variant="outline" className="font-medium">
                            {value?.split(":")[1].split("/")[0]}
                        </Badge>
                    ) : (
                        <div className="text-muted-foreground">Not matched</div>
                    )}
                </div>
            );
        },
    },
    {
        accessorKey: "tags",
        header: "Tags",
        size: 150,
        cell: ({ row }) => {
            const tags = row.getValue("tags");
            if (!tags || !Array.isArray(tags)) {
                return (
                    <div className="min-h-[60px] flex items-center">
                        <div className="text-muted-foreground">Not matched</div>
                    </div>
                );
            }

            const maxTagsDisplay = 3;
            const displayedTags = tags.slice(0, maxTagsDisplay);
            const remainingCount = tags.length - maxTagsDisplay;

            return (
                <div className="flex flex-wrap gap-1 max-w-[150px] min-h-[60px] items-center">
                    {displayedTags.map((tag: string, index: number) => (
                        <Badge variant="outline" key={index} className="text-xs">
                            {tag}
                        </Badge>
                    ))}
                    {remainingCount > 0 && (
                        <Badge variant="outline" className="text-xs">
                            +{remainingCount}
                        </Badge>
                    )}
                </div>
            );
        },
    },
    {
        accessorKey: "createdAt",
        header: "Created At",
        size: 120,
        cell: ({ row }) => {
            const value: string = row.getValue("createdAt");
            return (
                <div className="min-h-[60px] flex items-center">
                    {value ? (
                        <div>{new Date(value).toLocaleDateString()}</div>
                    ) : (
                        <div className="text-muted-foreground">Not matched</div>
                    )}
                </div>
            );
        },
    },
];

export function ListVulnerabilities() {
    const { selectedWorkspace } = useWorkspaceSelector();
    const location = useLocation();

    const {
        tableParams: { page, pageSize, sortBy, sortOrder, filter },
        tableHandlers: { setPage, setPageSize, setSortBy, setSortOrder, setFilter },
    } = useServerDataTable();

    // Extract targetId from URL search params if present
    const urlParams = new URLSearchParams(location.search);
    const targetId = urlParams.get("targetId") || undefined;

    const { data, isLoading } = useVulnerabilitiesControllerGetVulnerabilities(
        {
            workspaceId: selectedWorkspace ?? "",
            targetIds: targetId ? [targetId] : undefined,
            limit: pageSize,
            page,
            sortBy,
            sortOrder,
            q: filter || undefined,
        },
        {
            query: {
                queryKey: ["vulnerabilities", selectedWorkspace, targetId, page, pageSize, sortBy, sortOrder, filter],
            },
        },
    );

    const vulnerabilities = data?.data ?? [];
    const total = data?.total ?? 0;

    if (!data && !isLoading) return <div>Error loading vulnerabilities.</div>;

    const navigate = useNavigate();

    return (
        <DataTable
            data={vulnerabilities as any}
            columns={vulnerabilityColumns}
            isLoading={isLoading}
            page={page}
            pageSize={pageSize}
            sortBy={sortBy}
            sortOrder={sortOrder}
            onPageChange={setPage}
            onPageSizeChange={setPageSize}
            onSortChange={(col, order) => {
                setSortBy(col);
                setSortOrder(order);
            }}
            filterColumnKey="__search__"
            filterValue={filter}
            onFilterChange={setFilter}
            totalItems={total}
            rowClassName="cursor-pointer hover:bg-muted/50 transition-colors"
        />
    );
}