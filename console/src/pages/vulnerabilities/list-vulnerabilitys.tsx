import { DataTable } from "@/components/ui/data-table";
import { useServerDataTable } from "@/hooks/useServerDataTable";
import { useWorkspaceSelector } from "@/hooks/useWorkspaceSelector";
import type { Vulnerability } from "@/services/apis/gen/queries";
import { useVulnerabilitiesControllerGetVulnerabilities } from "@/services/apis/gen/queries";
import { useLocation } from "react-router-dom";
import CreateWorkspace from "../workspaces/create-workspace";
import { vulnerabilityColumns } from "./vulnerablity-columns";

export function ListVulnerabilities({ targetId }: { targetId?: string }) {
    const { selectedWorkspace, workspaces } = useWorkspaceSelector();
    const location = useLocation();

    const {
        tableParams: { page, pageSize, sortBy, sortOrder, filter },
        tableHandlers: { setPage, setPageSize, setSortBy, setSortOrder, setFilter },
    } = useServerDataTable({
        defaultSortBy: 'severity',
        defaultSortOrder: 'ASC',
    });

    // Extract targetId from URL search params if present
    const urlParams = new URLSearchParams(location.search);
    const urlTargetId = urlParams.get("targetId") || undefined;

    // Use targetId from props if provided, otherwise use from URL
    const effectiveTargetId = targetId || urlTargetId;

    const { data, isLoading } = useVulnerabilitiesControllerGetVulnerabilities(
        {
            workspaceId: selectedWorkspace ?? "",
            targetIds: effectiveTargetId ? [effectiveTargetId] : undefined,
            limit: pageSize,
            page,
            sortBy,
            sortOrder,
            q: filter || undefined,
        },
        {
            query: {
                refetchInterval: 5000,
                queryKey: ["vulnerabilities", selectedWorkspace, effectiveTargetId, page, pageSize, sortBy, sortOrder, filter],
            },
        },
    );

    const vulnerabilities = data?.data ?? [];
    const total = data?.total ?? 0;
    if (workspaces.length === 0) return <CreateWorkspace />
    if (!data && !isLoading) return <div>Error loading vulnerabilities.</div>;

    return (
        <DataTable<Vulnerability, unknown>
            data={vulnerabilities}
            columns={vulnerabilityColumns}
            isLoading={isLoading}
            page={page}
            pageSize={pageSize}
            sortBy={sortBy}
            sortOrder={sortOrder}
            onPageChange={setPage}
            onPageSizeChange={setPageSize}
            onSortChange={(col, order) => {
                setSortBy(col);
                setSortOrder(order);
            }}
            filterColumnKey="__search__"
            filterValue={filter}
            onFilterChange={setFilter}
            totalItems={total}
            rowClassName="cursor-pointer hover:bg-muted/50 transition-colors"
        />
    );
}