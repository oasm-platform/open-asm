import { Badge } from "@/components/ui/badge";
import { DataTable } from "@/components/ui/data-table";
import SeverityBadge from "@/components/ui/severity-badge";
import { useServerDataTable } from "@/hooks/useServerDataTable";
import { useWorkspaceSelector } from "@/hooks/useWorkspaceSelector";
import type { Vulnerability } from "@/services/apis/gen/queries";
import { useVulnerabilitiesControllerGetVulnerabilities } from "@/services/apis/gen/queries";
import { type ColumnDef } from "@tanstack/react-table";
import { useNavigate } from "react-router-dom";

export const vulnerabilityColumns: ColumnDef<Vulnerability, any>[] = [
    {
        accessorKey: "severity",
        header: "Severity",
        cell: ({ row }) => {
            const value = String(row.getValue("severity")).toLowerCase();
            return (
                <SeverityBadge severity={value} />
            );
        },
    },
    {
        accessorKey: "name",
        header: "Name",
        cell: ({ row }) => (
            <div className="font-medium">{row.getValue("name")}</div>
        ),
    },
    {
        accessorKey: "affectedUrl",
        header: "Affected URL",
        cell: ({ row }) => {
            const value: string = row.getValue("affectedUrl");
            return <div>{value}</div>;
        },
    },
    {
        accessorKey: "cvssMetric",
        header: "CVSS score",
        cell: ({ row }) => {
            const value: string = row.getValue("cvssMetric");
            return <div className="font-medium">{value?.split(":")[1].split("/")[0]}</div>;
        },
    },
    {
        accessorKey: "cveId",
        header: "CVE ID",
        cell: ({ row }) => {
            const value: string = row.getValue("cveId");
            return <div>{value}</div>;
        },
    },
    {
        accessorKey: "tags",
        header: "Tags",
        cell: ({ row }) => {
            const tags = row.getValue("tags");
            if (!tags || !Array.isArray(tags)) return null;

            return (
                <div className="flex flex-wrap gap-1">
                    {tags.map((tag: string, index: number) => (
                        <Badge
                            variant="outline"
                            key={index}

                        >
                            {tag}
                        </Badge>
                    ))}
                </div>
            );
        },
    },
    {
        accessorKey: "createdAt",
        header: "Created At",
        cell: ({ row }) => {
            const value: string = row.getValue("createdAt");
            return <div>{new Date(value).toLocaleString()}</div>;
        },
    },
];

export function ListVulnerabilities() {
    const { selectedWorkspace } = useWorkspaceSelector();

    const {
        tableParams: { page, pageSize, sortBy, sortOrder, filter },
        tableHandlers: { setPage, setPageSize, setSortBy, setSortOrder, setFilter },
    } = useServerDataTable();

    const { data, isLoading } = useVulnerabilitiesControllerGetVulnerabilities(
        {
            workspaceId: selectedWorkspace ?? "",
            limit: pageSize,
            page,
            sortBy,
            sortOrder,
        },
        {
            query: {
                refetchInterval: 3000,
                queryKey: ["vulnerabilities", selectedWorkspace, page, pageSize, sortBy, sortOrder, filter],
            },
        },
    );

    const vulnerabilities = data?.data ?? [];
    const total = data?.total ?? 0;

    if (!data && !isLoading) return <div>Error loading vulnerabilities.</div>;

    const navigate = useNavigate();

    // const handleRowClick = (vulnerability: Vulnerability) => {
    //     navigate(`/vulnerabilities/${vulnerability.id}`);
    // };

    return (
        <DataTable
            data={vulnerabilities as any}
            columns={vulnerabilityColumns}
            isLoading={isLoading}
            page={page}
            pageSize={pageSize}
            sortBy={sortBy}
            sortOrder={sortOrder}
            onPageChange={setPage}
            onPageSizeChange={setPageSize}
            onSortChange={(col, order) => {
                setSortBy(col);
                setSortOrder(order);
            }}
            filterColumnKey="name"
            filterValue={filter}
            onFilterChange={setFilter}
            totalItems={total}
            // onRowClick={handleRowClick}
            rowClassName="cursor-pointer hover:bg-muted/50 transition-colors"
        />
    );
}