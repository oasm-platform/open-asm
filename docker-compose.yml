version: '3.8'

services:
  console:
    container_name: console
    image: oasm/console:latest
    build:
      context: ./console
      dockerfile: Dockerfile
    networks:
      - oasm
    env_file:
      - ./console/.env
    ports:
      - '3000:3000'
    restart: 'always'
    depends_on:
      core-api:
        condition: service_healthy

  core-api:
    container_name: oasm-api
    image: oasm/oasm-api:latest
    build:
      context: ./core-api
      dockerfile: Dockerfile
    networks:
      - oasm
    env_file:
      - ./core-api/.env
    ports:
      - '6276:6276'
    restart: 'always'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    volumes:
      - ./.open-api:/.open-api
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:6276/api/health']
      interval: 1s
      timeout: 5s
      retries: 10

  oasm-worker:
    image: oasm/oasm-worker:latest
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      - API=http://core-api:6276/
      - API_KEY=change_me
      - MAX_JOBS=10
    volumes:
      - nuclei-templates:/root/nuclei-templates:rw
    networks:
      - oasm
    restart: 'always'
    depends_on:
      core-api:
        condition: service_healthy

  postgres:
    container_name: oasm-postgres
    image: postgres:17
    restart: always
    env_file:
      - ./core-api/.env
    environment:
      POSTGRES_USER: '${POSTGRES_USERNAME:-postgres}'
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-open_asm}
      POSTGRES_HOST_AUTH_METHOD: trust
      PGUSER: '${POSTGRES_USERNAME:-postgres}'
      PGPASSWORD: '${POSTGRES_PASSWORD:-postgres}'
    volumes:
      - pgdata:/var/lib/postgresql/data:rw
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    networks:
      - oasm
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready']
      interval: 1s
      timeout: 5s
      retries: 10

  redis:
    container_name: oasm-redis
    image: redis:alpine
    restart: always
    ports:
      - '6379:6379'
    networks:
      - oasm
    volumes:
      - redis-data:/data
    command: 'redis-server --requirepass password'
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', 'password', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1500M
        reservations:
          cpus: '0.5'
          memory: 512M

  redpanda:
    container_name: oasm-redpanda
    image: redpandadata/redpanda:latest
    restart: always
    ports:
      - '9092:9092'
    networks:
      - oasm
    volumes:
      - redpanda-data:/var/lib/redpanda/data:rw
    command:
      - redpanda start
      - --smp 1
      # - --memory 512M
      - --reserve-memory 0M
      - --overprovisioned
      - --node-id 0
      - --check=false
      - --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092 # change localhost to your IP
      - --rpc-addr 0.0.0.0:33145
      - --set redpanda.log_cleanup_policy=compact
      - --set redpanda.log_compression_type=zstd
      - --set redpanda.retention_bytes=64424509440
      - --set redpanda.transaction_coordinator_cleanup_policy=compact
    healthcheck:
      test: ['CMD', 'rpk', 'cluster', 'health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  geo-ip:
    container_name: geo-ip
    image: ghcr.io/l1ttps/geoip-proxy:latest
    networks:
      - oasm
    ports:
      - '4360:4360'
    restart: 'always'
    volumes:
      - geoip-data:/app/data:rw

volumes:
  pgdata:
  nuclei-templates:
  redis-data:
  redpanda-data:
  geoip-data:

networks:
  oasm:
    driver: bridge
